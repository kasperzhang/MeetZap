{"ast":null,"code":"import { isPhone } from \"@/utils\";\nimport { mapState } from \"vuex\";\nimport SignUpBlock from \"./SignUpBlock.vue\";\nimport OverflowGradient from \"@/components/OverflowGradient.vue\";\nexport default {\n  name: \"SignUpBlocksList\",\n  props: {\n    signUpBlocks: {\n      type: Array,\n      required: true\n    },\n    signUpBlocksToAdd: {\n      type: Array,\n      required: true\n    },\n    isEditing: {\n      type: Boolean,\n      required: true\n    },\n    isOwner: {\n      type: Boolean,\n      required: true\n    },\n    alreadyResponded: {\n      type: Boolean,\n      required: true\n    },\n    anonymous: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: () => ({\n    desktopMaxHeight: 0,\n    signUpBlocksListMinHeight: 400,\n    hasMounted: false\n  }),\n  mounted() {\n    this.setDesktopMaxHeight();\n    addEventListener(\"resize\", this.setDesktopMaxHeight);\n    this.$nextTick(() => {\n      this.hasMounted = true;\n    });\n  },\n  computed: {\n    ...mapState([\"authUser\"]),\n    isPhone() {\n      return isPhone(this.$vuetify);\n    },\n    signUpBlocksListMaxHeight() {\n      return Math.max(this.desktopMaxHeight, this.signUpBlocksListMinHeight);\n    }\n  },\n  methods: {\n    setDesktopMaxHeight() {\n      const el = this.$refs.scrollableSection;\n      if (el) {\n        const {\n          top\n        } = el.getBoundingClientRect();\n        this.desktopMaxHeight = window.innerHeight - top - 32;\n      } else {\n        this.desktopMaxHeight = 0;\n      }\n    },\n    scrollToSignUpBlock(id) {\n      const scrollView = this.$refs.signUpBlocksScrollView;\n      if (scrollView) {\n        const targetBlock = scrollView.querySelector(`[data-id='${id}']`);\n        if (targetBlock) {\n          // Calculate the scroll position\n          const scrollTop = targetBlock.offsetTop - scrollView.offsetTop;\n\n          // Scroll the container\n          scrollView.scrollTo({\n            top: scrollTop,\n            behavior: \"smooth\"\n          });\n        }\n      }\n    }\n  },\n  components: {\n    SignUpBlock,\n    OverflowGradient\n  }\n};","map":{"version":3,"names":["isPhone","mapState","SignUpBlock","OverflowGradient","name","props","signUpBlocks","type","Array","required","signUpBlocksToAdd","isEditing","Boolean","isOwner","alreadyResponded","anonymous","default","data","desktopMaxHeight","signUpBlocksListMinHeight","hasMounted","mounted","setDesktopMaxHeight","addEventListener","$nextTick","computed","$vuetify","signUpBlocksListMaxHeight","Math","max","methods","el","$refs","scrollableSection","top","getBoundingClientRect","window","innerHeight","scrollToSignUpBlock","id","scrollView","signUpBlocksScrollView","targetBlock","querySelector","scrollTop","offsetTop","scrollTo","behavior","components"],"sources":["src/components/sign_up_form/SignUpBlocksList.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"scrollableSection\"\n    class=\"tw-flex tw-flex-col\"\n    :style=\"\n      !isPhone ? `max-height: ${signUpBlocksListMaxHeight}px !important;` : ''\n    \"\n  >\n    <div\n      ref=\"signUpBlocksScrollView\"\n      :class=\"\n        isPhone\n          ? 'tw-overflow-hidden'\n          : 'tw-overflow-y-auto tw-overflow-x-hidden'\n      \"\n    >\n      <div\n        v-if=\"isOwner && signUpBlocks.length === 0 && signUpBlocksToAdd.length === 0\"\n        class=\"tw-text-sm tw-italic tw-text-dark-gray\"\n      >\n        Click and drag on the grid to create a slot\n      </div>\n      <div class=\"tw-flex tw-flex-col tw-gap-3\">\n        <SignUpBlock\n          v-for=\"signUpBlock in signUpBlocksToAdd\"\n          :key=\"signUpBlock._id\"\n          :signUpBlock=\"signUpBlock\"\n          @update:signUpBlock=\"$emit('update:signUpBlock', $event)\"\n          @delete:signUpBlock=\"$emit('delete:signUpBlock', $event)\"\n          @signUpForBlock=\"$emit('signUpForBlock', $event)\"\n          :isEditing=\"isEditing\"\n          :isOwner=\"isOwner\"\n          unsaved\n        ></SignUpBlock>\n        <SignUpBlock\n          v-for=\"signUpBlock in signUpBlocks\"\n          :key=\"signUpBlock._id\"\n          :signUpBlock=\"signUpBlock\"\n          @update:signUpBlock=\"$emit('update:signUpBlock', $event)\"\n          @delete:signUpBlock=\"$emit('delete:signUpBlock', $event)\"\n          @signUpForBlock=\"$emit('signUpForBlock', $event)\"\n          :isEditing=\"isEditing\"\n          :anonymous=\"anonymous\"\n          :isOwner=\"isOwner\"\n          :infoOnly=\"alreadyResponded\"\n        ></SignUpBlock>\n      </div>\n    </div>\n\n    <div class=\"tw-relative\">\n      <OverflowGradient\n        v-if=\"hasMounted && !isPhone\"\n        class=\"tw-h-16\"\n        :scrollContainer=\"$refs.signUpBlocksScrollView\"\n        :showArrow=\"false\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { isPhone } from \"@/utils\"\nimport { mapState } from \"vuex\"\n\nimport SignUpBlock from \"./SignUpBlock.vue\"\nimport OverflowGradient from \"@/components/OverflowGradient.vue\"\n\nexport default {\n  name: \"SignUpBlocksList\",\n\n  props: {\n    signUpBlocks: { type: Array, required: true },\n    signUpBlocksToAdd: { type: Array, required: true },\n    isEditing: { type: Boolean, required: true },\n    isOwner: { type: Boolean, required: true },\n    alreadyResponded: { type: Boolean, required: true },\n    anonymous: { type: Boolean, default: false },\n  },\n\n  data: () => ({\n    desktopMaxHeight: 0,\n    signUpBlocksListMinHeight: 400,\n    hasMounted: false,\n  }),\n\n  mounted() {\n    this.setDesktopMaxHeight()\n\n    addEventListener(\"resize\", this.setDesktopMaxHeight)\n\n    this.$nextTick(() => {\n      this.hasMounted = true\n    })\n  },\n\n  computed: {\n    ...mapState([\"authUser\"]),\n    isPhone() {\n      return isPhone(this.$vuetify)\n    },\n    signUpBlocksListMaxHeight() {\n      return Math.max(this.desktopMaxHeight, this.signUpBlocksListMinHeight)\n    },\n  },\n\n  methods: {\n    setDesktopMaxHeight() {\n      const el = this.$refs.scrollableSection\n      if (el) {\n        const { top } = el.getBoundingClientRect()\n        this.desktopMaxHeight = window.innerHeight - top - 32\n      } else {\n        this.desktopMaxHeight = 0\n      }\n    },\n    scrollToSignUpBlock(id) {\n      const scrollView = this.$refs.signUpBlocksScrollView\n      if (scrollView) {\n        const targetBlock = scrollView.querySelector(`[data-id='${id}']`)\n        if (targetBlock) {\n          // Calculate the scroll position\n          const scrollTop = targetBlock.offsetTop - scrollView.offsetTop\n\n          // Scroll the container\n          scrollView.scrollTo({\n            top: scrollTop,\n            behavior: \"smooth\",\n          })\n        }\n      }\n    },\n  },\n\n  components: {\n    SignUpBlock,\n    OverflowGradient,\n  },\n}\n</script>\n"],"mappings":"AA6DA,SAAAA,OAAA;AACA,SAAAC,QAAA;AAEA,OAAAC,WAAA;AACA,OAAAC,gBAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACAC,YAAA;MAAAC,IAAA,EAAAC,KAAA;MAAAC,QAAA;IAAA;IACAC,iBAAA;MAAAH,IAAA,EAAAC,KAAA;MAAAC,QAAA;IAAA;IACAE,SAAA;MAAAJ,IAAA,EAAAK,OAAA;MAAAH,QAAA;IAAA;IACAI,OAAA;MAAAN,IAAA,EAAAK,OAAA;MAAAH,QAAA;IAAA;IACAK,gBAAA;MAAAP,IAAA,EAAAK,OAAA;MAAAH,QAAA;IAAA;IACAM,SAAA;MAAAR,IAAA,EAAAK,OAAA;MAAAI,OAAA;IAAA;EACA;EAEAC,IAAA,EAAAA,CAAA;IACAC,gBAAA;IACAC,yBAAA;IACAC,UAAA;EACA;EAEAC,QAAA;IACA,KAAAC,mBAAA;IAEAC,gBAAA,gBAAAD,mBAAA;IAEA,KAAAE,SAAA;MACA,KAAAJ,UAAA;IACA;EACA;EAEAK,QAAA;IACA,GAAAxB,QAAA;IACAD,QAAA;MACA,OAAAA,OAAA,MAAA0B,QAAA;IACA;IACAC,0BAAA;MACA,OAAAC,IAAA,CAAAC,GAAA,MAAAX,gBAAA,OAAAC,yBAAA;IACA;EACA;EAEAW,OAAA;IACAR,oBAAA;MACA,MAAAS,EAAA,QAAAC,KAAA,CAAAC,iBAAA;MACA,IAAAF,EAAA;QACA;UAAAG;QAAA,IAAAH,EAAA,CAAAI,qBAAA;QACA,KAAAjB,gBAAA,GAAAkB,MAAA,CAAAC,WAAA,GAAAH,GAAA;MACA;QACA,KAAAhB,gBAAA;MACA;IACA;IACAoB,oBAAAC,EAAA;MACA,MAAAC,UAAA,QAAAR,KAAA,CAAAS,sBAAA;MACA,IAAAD,UAAA;QACA,MAAAE,WAAA,GAAAF,UAAA,CAAAG,aAAA,cAAAJ,EAAA;QACA,IAAAG,WAAA;UACA;UACA,MAAAE,SAAA,GAAAF,WAAA,CAAAG,SAAA,GAAAL,UAAA,CAAAK,SAAA;;UAEA;UACAL,UAAA,CAAAM,QAAA;YACAZ,GAAA,EAAAU,SAAA;YACAG,QAAA;UACA;QACA;MACA;IACA;EACA;EAEAC,UAAA;IACA9C,WAAA;IACAC;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}