{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { get, post, signInGoogle, signInOutlook, isPhone, processEvent, getCalendarEventsMap, getDateRangeStringForEvent, isIOS, isDstObserved } from \"@/utils\";\nimport { mapActions, mapState, mapMutations } from \"vuex\";\nimport NewDialog from \"@/components/NewDialog.vue\";\nimport ScheduleOverlap from \"@/components/schedule_overlap/ScheduleOverlap.vue\";\nimport GuestDialog from \"@/components/GuestDialog.vue\";\nimport SignUpForSlotDialog from \"@/components/sign_up_form/SignUpForSlotDialog.vue\";\nimport { errors, authTypes, eventTypes, calendarTypes } from \"@/constants\";\nimport isWebview from \"is-ua-webview\";\nimport SignInNotSupportedDialog from \"@/components/SignInNotSupportedDialog.vue\";\nimport MarkAvailabilityDialog from \"@/components/calendar_permission_dialogs/MarkAvailabilityDialog.vue\";\nimport InvitationDialog from \"@/components/groups/InvitationDialog.vue\";\nimport HelpDialog from \"@/components/HelpDialog.vue\";\nimport EventDescription from \"@/components/event/EventDescription.vue\";\nexport default {\n  name: \"Event\",\n  props: {\n    eventId: {\n      type: String,\n      required: true\n    },\n    fromSignIn: {\n      type: Boolean,\n      default: false\n    },\n    editingMode: {\n      type: Boolean,\n      default: false\n    },\n    linkApple: {\n      type: Boolean,\n      default: false\n    },\n    initialTimezone: {\n      type: Object,\n      default: () => ({})\n    },\n    contactsPayload: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  components: {\n    GuestDialog,\n    SignUpForSlotDialog,\n    ScheduleOverlap,\n    NewDialog,\n    SignInNotSupportedDialog,\n    MarkAvailabilityDialog,\n    InvitationDialog,\n    HelpDialog,\n    EventDescription\n  },\n  data: () => ({\n    fromEditEvent: false,\n    choiceDialog: false,\n    webviewDialog: false,\n    guestDialog: false,\n    signUpForSlotDialog: false,\n    editEventDialog: false,\n    invitationDialog: false,\n    pagesNotVisitedDialog: false,\n    helpDialog: false,\n    loading: true,\n    calendarEventsMap: {},\n    event: null,\n    scheduleOverlapComponent: null,\n    scheduleOverlapComponentLoaded: false,\n    curGuestId: \"\",\n    // Id of the current guest being edited\n    calendarPermissionGranted: true,\n    addingAvailabilityAsGuest: false,\n    // Whether a signed in user is current adding availability as a guest\n\n    weekOffset: 0,\n    availabilityBtnOpacity: 1,\n    hasRefetchedAuthUserCalendarEvents: false,\n    // Availability Groups\n    calendarAvailabilities: {},\n    // maps userId to their calendar events\n\n    // Sign Up Forms\n    currSignUpBlock: null\n  }),\n  mounted() {\n    // If coming from enabling contacts, show the dialog. Checks if contactsPayload is not an Observer.\n    this.editEventDialog = Object.keys(this.contactsPayload).length > 0;\n\n    // If coming from signing in to link apple calendar, show the mark availability dialog\n    if (this.linkApple) {\n      this.choiceDialog = true;\n    }\n  },\n  computed: {\n    ...mapState([\"authUser\", \"events\"]),\n    allowScheduleEvent() {\n      return this.scheduleOverlapComponent?.allowScheduleEvent;\n    },\n    calendarTypes() {\n      return calendarTypes;\n    },\n    dateString() {\n      return getDateRangeStringForEvent(this.event);\n    },\n    isEditing() {\n      return this.scheduleOverlapComponent?.editing;\n    },\n    isScheduling() {\n      return this.scheduleOverlapComponent?.scheduling;\n    },\n    canEdit() {\n      return this.event.ownerId == 0 || this.authUser?._id === this.event.ownerId;\n    },\n    isPhone() {\n      return isPhone(this.$vuetify);\n    },\n    isSpecificDates() {\n      return this.event?.type === eventTypes.SPECIFIC_DATES || !this.event?.type;\n    },\n    isWeekly() {\n      return this.event?.type === eventTypes.DOW;\n    },\n    isGroup() {\n      return this.event?.type === eventTypes.GROUP;\n    },\n    isSignUp() {\n      return this.event?.isSignUpForm;\n    },\n    eventType() {\n      if (this.isGroup) return \"group\";else if (this.isSignUp) return \"signup\";else return \"event\";\n    },\n    areUnsavedChanges() {\n      return this.scheduleOverlapComponent?.unsavedChanges;\n    },\n    userHasResponded() {\n      return this.authUser?._id in this.event.responses;\n    },\n    selectedGuestRespondent() {\n      return this.scheduleOverlapComponent?.selectedGuestRespondent;\n    },\n    showFeedbackBtn() {\n      return this.isPhone;\n    },\n    numResponses() {\n      return this.scheduleOverlapComponent?.respondents.length;\n    },\n    actionButtonText() {\n      if (this.isSignUp) return \"Edit slots\";else if (this.userHasResponded || this.isGroup) return \"编辑可用时间\";\n      return \"添加可用时间\";\n    },\n    mobileGuestActionButtonText() {\n      return this.event.blindAvailabilityEnabled ? \"Edit availability\" : `Edit ${this.selectedGuestRespondent}'s availability`;\n    },\n    mobileActionButtonText() {\n      if (this.isSignUp) return \"Edit slots\";\n      return this.userHasResponded ? \"编辑可用时间\" : \"添加可用时间\";\n    },\n    isIOS() {\n      return isIOS();\n    },\n    isSettingSpecificTimes() {\n      return this.scheduleOverlapComponent?.state === this.scheduleOverlapComponent?.states.SET_SPECIFIC_TIMES;\n    }\n  },\n  methods: {\n    ...mapActions([\"showError\", \"showInfo\", \"getEvents\"]),\n    ...mapMutations([\"setAuthUser\"]),\n    /** Show choice dialog if not signed in, otherwise, immediately start editing availability */\n    addAvailability() {\n      if (!this.scheduleOverlapComponent) return;\n\n      // Start editing immediately if days only\n      if (this.event?.daysOnly) {\n        this.scheduleOverlapComponent.startEditing();\n        return;\n      }\n\n      // Start editing if calendar permission granted or user has responded, otherwise show choice dialog\n      if (this.authUser && this.calendarPermissionGranted || this.userHasResponded) {\n        this.scheduleOverlapComponent.startEditing();\n        if (!this.userHasResponded && !this.isSignUp) {\n          this.scheduleOverlapComponent.setAvailabilityAutomatically();\n        }\n      } else {\n        this.choiceDialog = true;\n      }\n    },\n    /** Add guest availability while signed in */\n    addAvailabilityAsGuest() {\n      this.addingAvailabilityAsGuest = true;\n      this.setAvailabilityManually();\n    },\n    cancelEditing() {\n      /* Cancels editing and resets availability to previous */\n      if (!this.scheduleOverlapComponent) return;\n      if (!this.isSignUp) this.scheduleOverlapComponent.resetCurUserAvailability();else this.scheduleOverlapComponent.resetSignUpForm();\n      this.scheduleOverlapComponent.stopEditing();\n      this.curGuestId = \"\";\n      this.addingAvailabilityAsGuest = false;\n    },\n    copyLink() {\n      /* Copies event link to clipboard */\n      navigator.clipboard.writeText(`${window.location.origin}/e/${this.event.shortId ?? this.event._id}`);\n      this.showInfo(\"Link copied to clipboard!\");\n    },\n    async deleteAvailability() {\n      if (!this.scheduleOverlapComponent) return;\n      if (!this.authUser || this.addingAvailabilityAsGuest) {\n        if (this.curGuestId) {\n          await this.scheduleOverlapComponent.deleteAvailability(this.curGuestId);\n          this.curGuestId = \"\";\n        }\n      } else {\n        await this.scheduleOverlapComponent.deleteAvailability();\n      }\n      this.showInfo(this.isGroup ? \"Left group!\" : \"Availability deleted!\");\n      this.scheduleOverlapComponent.stopEditing();\n    },\n    editEvent() {\n      /* Show edit event dialog */\n      this.editEventDialog = true;\n    },\n    /** Refresh event details */\n    async refreshEvent() {\n      let sanitizedId = this.eventId.replaceAll(\".\", \"\");\n      this.event = await get(`/events/${sanitizedId}`);\n      processEvent(this.event);\n    },\n    setAvailabilityAutomatically(calendarType = calendarTypes.GOOGLE) {\n      /* Prompts user to sign in when \"set availability automatically\" button clicked */\n      if (isWebview(navigator.userAgent)) {\n        // Show dialog prompting user to use a real browser\n        this.webviewDialog = true;\n      } else {\n        // Or sign in if user is already using a real browser\n        let signInParams;\n        if (this.authUser) {\n          // Request permission if calendar permissions not yet granted\n          signInParams = {\n            state: {\n              type: this.isGroup ? authTypes.GROUP_ADD_AVAILABILITY : authTypes.EVENT_ADD_AVAILABILITY,\n              eventId: this.eventId\n            },\n            selectAccount: false,\n            requestCalendarPermission: true\n          };\n        } else {\n          // Ask the user to select the account they want to sign in with if not logged in yet\n          signInParams = {\n            state: {\n              type: authTypes.EVENT_ADD_AVAILABILITY,\n              eventId: this.eventId\n            },\n            selectAccount: true,\n            requestCalendarPermission: true\n          };\n        }\n        if (calendarType === calendarTypes.GOOGLE) {\n          signInGoogle(signInParams);\n        } else if (calendarType === calendarTypes.OUTLOOK) {\n          signInOutlook(signInParams);\n        }\n      }\n      this.choiceDialog = false;\n    },\n    setAvailabilityManually() {\n      /* Starts editing after \"set availability manually\" button clicked */\n      if (!this.scheduleOverlapComponent) return;\n      this.$nextTick(() => {\n        this.scheduleOverlapComponent.startEditing();\n      });\n      this.choiceDialog = false;\n    },\n    editGuestAvailability() {\n      /* Edits the selected guest's availability */\n      if (!this.scheduleOverlapComponent) return;\n      this.curGuestId = this.selectedGuestRespondent;\n      this.scheduleOverlapComponent.startEditing();\n      this.$nextTick(() => {\n        this.scheduleOverlapComponent.populateUserAvailability(this.selectedGuestRespondent);\n      });\n    },\n    async saveChanges(ignorePagesNotVisited = false) {\n      /* Shows guest dialog if not signed in, otherwise saves auth user's availability */\n      if (!this.scheduleOverlapComponent) return;\n\n      // If user hasn't responded and they haven't gone to the next page, show pages not visited dialog\n      if (!this.userHasResponded && this.curGuestId.length === 0 && !this.scheduleOverlapComponent.pageHasChanged && !ignorePagesNotVisited && this.scheduleOverlapComponent.hasPages) {\n        this.pagesNotVisitedDialog = true;\n        return;\n      }\n      if (!this.authUser || this.addingAvailabilityAsGuest) {\n        if (this.curGuestId) {\n          this.saveChangesAsGuest({\n            name: this.curGuestId,\n            email: this.event.responses[this.curGuestId].email\n          });\n          this.curGuestId = \"\";\n          this.addingAvailabilityAsGuest = false;\n        } else {\n          this.guestDialog = true;\n        }\n        return;\n      }\n      let changesPersisted = true;\n      if (this.isSignUp) {\n        changesPersisted = await this.scheduleOverlapComponent.submitNewSignUpBlocks();\n      } else {\n        await this.scheduleOverlapComponent.submitAvailability();\n      }\n      if (changesPersisted) {\n        this.showInfo(\"Changes saved!\");\n        this.scheduleOverlapComponent.stopEditing();\n      }\n    },\n    async saveChangesAsGuest(payload) {\n      /* After guest dialog is submitted, submit availability with the given name */\n      if (!this.scheduleOverlapComponent) return;\n      if (payload.name.length > 0) {\n        await this.scheduleOverlapComponent.submitAvailability(payload);\n        this.showInfo(\"Changes saved!\");\n        this.scheduleOverlapComponent.resetCurUserAvailability();\n        this.scheduleOverlapComponent.stopEditing();\n        this.guestDialog = false;\n        this.addingAvailabilityAsGuest = false;\n      }\n    },\n    scheduleEvent() {\n      this.scheduleOverlapComponent?.scheduleEvent();\n    },\n    cancelScheduleEvent() {\n      this.scheduleOverlapComponent?.cancelScheduleEvent();\n    },\n    confirmScheduleEvent() {\n      this.scheduleOverlapComponent?.confirmScheduleEvent();\n    },\n    highlightAvailabilityBtn() {\n      if (!this.isPhone) {\n        window.scrollTo({\n          top: 0,\n          behavior: \"instant\"\n        });\n      }\n      this.availabilityBtnOpacity = 0.1;\n      setTimeout(() => {\n        this.availabilityBtnOpacity = 1;\n        setTimeout(() => {\n          this.availabilityBtnOpacity = 0.1;\n          setTimeout(() => {\n            this.availabilityBtnOpacity = 1;\n          }, 100);\n        }, 100);\n      }, 100);\n    },\n    /** Sign in with google to link apple calendar */\n    signInLinkApple() {\n      if (isWebview(navigator.userAgent)) {\n        // Show dialog prompting user to use a real browser\n        this.webviewDialog = true;\n      } else {\n        signInGoogle({\n          state: {\n            type: authTypes.EVENT_SIGN_IN_LINK_APPLE,\n            eventId: this.eventId\n          },\n          selectAccount: true\n        });\n      }\n    },\n    /** Called when user adds apple calendar account */\n    addedAppleCalendar() {\n      this.choiceDialog = false;\n      this.scheduleOverlapComponent?.startEditing();\n      this.scheduleOverlapComponent?.setAvailabilityAutomatically();\n    },\n    /** Refresh calendar availabilities of everybody in the group */\n    async fetchCalendarAvailabilities() {\n      if (this.event.type !== eventTypes.GROUP) return;\n\n      // this.calendarAvailabilities = {}\n      const curWeekOffset = this.weekOffset;\n      return getCalendarEventsMap(this.event, {\n        weekOffset: curWeekOffset,\n        eventId: this.event._id\n      }).then(calendarAvailabilities => {\n        // Don't update calendar availabilities if user\n        // selected a different weekoffset by the time these calendar events load\n        if (curWeekOffset !== this.weekOffset) return;\n        this.calendarAvailabilities = calendarAvailabilities;\n\n        // Fix DST bug\n        for (const userId in this.calendarAvailabilities) {\n          for (const index in this.calendarAvailabilities[userId]) {\n            const event = this.calendarAvailabilities[userId][index];\n            const startDate = new Date(event.startDate);\n            const endDate = new Date(event.endDate);\n            if (!isDstObserved(startDate)) {\n              startDate.setHours(startDate.getHours() - 1);\n              endDate.setHours(endDate.getHours() - 1);\n            }\n            this.calendarAvailabilities[userId][index].startDate = startDate.toISOString();\n            this.calendarAvailabilities[userId][index].endDate = endDate.toISOString();\n          }\n        }\n      }).catch(err => {\n        console.error(err);\n      });\n    },\n    /** Fetch current user's calendar events */\n    async fetchAuthUserCalendarEvents() {\n      if (!this.authUser) {\n        this.calendarPermissionGranted = false;\n        return;\n      }\n\n      // this.calendarEventsMap = {}\n      const curWeekOffset = this.weekOffset;\n      return getCalendarEventsMap(this.event, {\n        weekOffset: curWeekOffset\n      }).then(eventsMap => {\n        // If all calendars have error, then set calendarPermissionGranted to false\n        // TODO: What happens if user signed in without enabling calendar??\n        // let noError = false\n        // for (const key in eventsMap) {\n        //   if (!eventsMap[key].error) {\n        //     noError = true\n        //     break\n        //   }\n        // }\n        // if (!noError) {\n        //   this.calendarPermissionGranted = false\n        //   return\n        // }\n\n        // Don't set calendar events / set availability if user has already\n        // selected a different weekoffset by the time these calendar events load\n        if (curWeekOffset !== this.weekOffset) return;\n        this.calendarEventsMap = eventsMap;\n\n        // Fix DST bug\n        if (this.event.type === eventTypes.GROUP) {\n          for (const calendarId in this.calendarEventsMap) {\n            for (const index in this.calendarEventsMap[calendarId].calendarEvents) {\n              const event = this.calendarEventsMap[calendarId].calendarEvents[index];\n              const startDate = new Date(event.startDate);\n              const endDate = new Date(event.endDate);\n              if (!isDstObserved(startDate)) {\n                startDate.setHours(startDate.getHours() - 1);\n                endDate.setHours(endDate.getHours() - 1);\n              }\n              this.calendarEventsMap[calendarId].calendarEvents[index].startDate = startDate.toISOString();\n              this.calendarEventsMap[calendarId].calendarEvents[index].endDate = endDate.toISOString();\n            }\n          }\n        }\n\n        // Set user availability automatically if we're in editing mode and they haven't responded\n        if (this.authUser && this.isEditing && !this.userHasResponded && !this.areUnsavedChanges && this.scheduleOverlapComponent) {\n          this.$nextTick(() => {\n            this.scheduleOverlapComponent?.setAvailabilityAutomatically();\n          });\n        }\n\n        // calendar permission granted is false when every calendar in the calendar map has an error, true otherwise\n        this.calendarPermissionGranted = !Object.values(this.calendarEventsMap).every(c => Boolean(c.error));\n        if (!this.hasRefetchedAuthUserCalendarEvents) {\n          const hasAtLeastOneError = Object.values(this.calendarEventsMap).some(c => Boolean(c.error));\n\n          // Refetch calendar if there is an error\n          if (hasAtLeastOneError) {\n            this.hasRefetchedAuthUserCalendarEvents = true;\n            setTimeout(() => {\n              this.fetchAuthUserCalendarEvents();\n            }, 1000);\n          }\n        }\n      }).catch(err => {\n        console.error(err);\n        this.calendarPermissionGranted = false;\n      });\n    },\n    /** Refreshes calendar avaliabilities and fetches current user calendar events */\n    refreshCalendar() {\n      const promises = [];\n      promises.push(this.fetchCalendarAvailabilities());\n      promises.push(this.fetchAuthUserCalendarEvents());\n      const curWeekOffset = this.weekOffset;\n      this.loading = true;\n      Promise.allSettled(promises).then(() => {\n        // Only set loading to false if promises resolved at the same week offset they were fetched at\n        // i.e. no new promises are currently being run\n        if (curWeekOffset === this.weekOffset) {\n          this.loading = false;\n        }\n      });\n    },\n    /** Resets week offset to 0 */\n    resetWeekOffset() {\n      if (this.event && this.event.startOnMonday) {\n        this.weekOffset = 1;\n      } else {\n        this.weekOffset = 0;\n      }\n    },\n    onBeforeUnload(e) {\n      if (this.areUnsavedChanges) {\n        e.preventDefault();\n        e.returnValue = \"\";\n        return;\n      }\n      delete e[\"returnValue\"];\n    },\n    handleGuestDialogSubmit(guestPayload) {\n      this.saveChangesAsGuest(guestPayload);\n    },\n    // -----------------------------------\n    //#region Sign Up Form\n    // -----------------------------------\n\n    initiateSignUpFlow(signUpBlock) {\n      this.currSignUpBlock = signUpBlock;\n      this.signUpForSlotDialog = true;\n    },\n    async signUpForBlock(guestPayload) {\n      let payload;\n      if (this.authUser) {\n        payload = {\n          guest: false,\n          signUpBlockIds: [this.currSignUpBlock._id]\n        };\n      } else {\n        payload = {\n          guest: true,\n          signUpBlockIds: [this.currSignUpBlock._id],\n          ...guestPayload\n        };\n      }\n      await post(`/events/${this.event._id}/response`, payload);\n      await this.refreshEvent();\n      this.scheduleOverlapComponent.resetSignUpForm();\n      this.signUpForSlotDialog = false;\n    }\n\n    //#endregion\n  },\n  async created() {\n    window.addEventListener(\"beforeunload\", this.onBeforeUnload);\n\n    // Get event details\n    try {\n      await this.refreshEvent();\n\n      // Redirect if we're at the wrong route\n      if (this.event.type === eventTypes.GROUP) {\n        if (this.$route.name === \"event\") {\n          this.$router.replace({\n            name: \"group\",\n            params: {\n              groupId: this.eventId,\n              initialTimezone: this.initialTimezone,\n              fromSignIn: this.fromSignIn,\n              contactsPayload: this.contactsPayload\n            }\n          });\n        }\n      } else {\n        if (this.$route.name === \"group\") {\n          this.$router.replace({\n            name: \"event\",\n            params: {\n              eventId: this.eventId,\n              initialTimezone: this.initialTimezone,\n              fromSignIn: this.fromSignIn,\n              contactsPayload: this.contactsPayload\n            }\n          });\n        }\n      }\n      const fromEditEvent = localStorage.getItem(`from-edit-event-${this.event._id}`);\n      if (fromEditEvent) {\n        localStorage.removeItem(`from-edit-event-${this.event._id}`);\n        this.fromEditEvent = true;\n      }\n    } catch (err) {\n      switch (err.error) {\n        case errors.EventNotFound:\n          this.showError(\"The specified event does not exist!\");\n          this.$router.replace({\n            name: \"home\"\n          });\n          return;\n      }\n    }\n    const promises = [];\n    promises.push(this.fetchCalendarAvailabilities());\n    promises.push(this.fetchAuthUserCalendarEvents());\n    this.loading = true;\n    Promise.allSettled(promises).then(() => {\n      this.loading = false;\n    });\n    get(\"/user/profile\").then(authUser => {\n      this.setAuthUser(authUser);\n    }).catch(() => {\n      this.setAuthUser(null);\n    });\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"beforeunload\", this.onBeforeUnload);\n  },\n  watch: {\n    event() {\n      if (this.event) {\n        this.resetWeekOffset();\n        this.$nextTick(() => {\n          this.scheduleOverlapComponent = this.$refs.scheduleOverlap;\n        });\n        document.title = `${this.event.name} - Schej`;\n      }\n    },\n    scheduleOverlapComponent() {\n      if (!this.scheduleOverlapComponentLoaded) {\n        this.scheduleOverlapComponentLoaded = true;\n\n        // Put into editing mode if just signed in\n        if ((this.fromSignIn || this.editingMode) && !this.isGroup) {\n          this.scheduleOverlapComponent.startEditing();\n        }\n        if (this.isGroup && !this.userHasResponded) {\n          this.invitationDialog = true;\n        }\n      }\n    },\n    weekOffset() {\n      this.refreshCalendar();\n    },\n    [`authUser.calendarAccounts`]() {\n      this.fetchAuthUserCalendarEvents();\n    }\n  }\n};","map":{"version":3,"names":["get","post","signInGoogle","signInOutlook","isPhone","processEvent","getCalendarEventsMap","getDateRangeStringForEvent","isIOS","isDstObserved","mapActions","mapState","mapMutations","NewDialog","ScheduleOverlap","GuestDialog","SignUpForSlotDialog","errors","authTypes","eventTypes","calendarTypes","isWebview","SignInNotSupportedDialog","MarkAvailabilityDialog","InvitationDialog","HelpDialog","EventDescription","name","props","eventId","type","String","required","fromSignIn","Boolean","default","editingMode","linkApple","initialTimezone","Object","contactsPayload","components","data","fromEditEvent","choiceDialog","webviewDialog","guestDialog","signUpForSlotDialog","editEventDialog","invitationDialog","pagesNotVisitedDialog","helpDialog","loading","calendarEventsMap","event","scheduleOverlapComponent","scheduleOverlapComponentLoaded","curGuestId","calendarPermissionGranted","addingAvailabilityAsGuest","weekOffset","availabilityBtnOpacity","hasRefetchedAuthUserCalendarEvents","calendarAvailabilities","currSignUpBlock","mounted","keys","length","computed","allowScheduleEvent","dateString","isEditing","editing","isScheduling","scheduling","canEdit","ownerId","authUser","_id","$vuetify","isSpecificDates","SPECIFIC_DATES","isWeekly","DOW","isGroup","GROUP","isSignUp","isSignUpForm","eventType","areUnsavedChanges","unsavedChanges","userHasResponded","responses","selectedGuestRespondent","showFeedbackBtn","numResponses","respondents","actionButtonText","mobileGuestActionButtonText","blindAvailabilityEnabled","mobileActionButtonText","isSettingSpecificTimes","state","states","SET_SPECIFIC_TIMES","methods","addAvailability","daysOnly","startEditing","setAvailabilityAutomatically","addAvailabilityAsGuest","setAvailabilityManually","cancelEditing","resetCurUserAvailability","resetSignUpForm","stopEditing","copyLink","navigator","clipboard","writeText","window","location","origin","shortId","showInfo","deleteAvailability","editEvent","refreshEvent","sanitizedId","replaceAll","calendarType","GOOGLE","userAgent","signInParams","GROUP_ADD_AVAILABILITY","EVENT_ADD_AVAILABILITY","selectAccount","requestCalendarPermission","OUTLOOK","$nextTick","editGuestAvailability","populateUserAvailability","saveChanges","ignorePagesNotVisited","pageHasChanged","hasPages","saveChangesAsGuest","email","changesPersisted","submitNewSignUpBlocks","submitAvailability","payload","scheduleEvent","cancelScheduleEvent","confirmScheduleEvent","highlightAvailabilityBtn","scrollTo","top","behavior","setTimeout","signInLinkApple","EVENT_SIGN_IN_LINK_APPLE","addedAppleCalendar","fetchCalendarAvailabilities","curWeekOffset","then","userId","index","startDate","Date","endDate","setHours","getHours","toISOString","catch","err","console","error","fetchAuthUserCalendarEvents","eventsMap","calendarId","calendarEvents","values","every","c","hasAtLeastOneError","some","refreshCalendar","promises","push","Promise","allSettled","resetWeekOffset","startOnMonday","onBeforeUnload","e","preventDefault","returnValue","handleGuestDialogSubmit","guestPayload","initiateSignUpFlow","signUpBlock","signUpForBlock","guest","signUpBlockIds","created","addEventListener","$route","$router","replace","params","groupId","localStorage","getItem","removeItem","EventNotFound","showError","setAuthUser","beforeDestroy","removeEventListener","watch","$refs","scheduleOverlap","document","title"],"sources":["src/views/Event.vue"],"sourcesContent":["<template>\n  <div v-if=\"event\" class=\"tw-mt-8 tw-h-full\">\n    <!-- Mark availability option dialog -->\n    <MarkAvailabilityDialog\n      v-model=\"choiceDialog\"\n      :initialState=\"linkApple ? 'create_account_apple' : 'choices'\"\n      @signInLinkApple=\"signInLinkApple\"\n      @allowGoogleCalendar=\"\n        () => setAvailabilityAutomatically(calendarTypes.GOOGLE)\n      \"\n      @allowOutlookCalendar=\"\n        () => setAvailabilityAutomatically(calendarTypes.OUTLOOK)\n      \"\n      @setAvailabilityManually=\"setAvailabilityManually\"\n      @addedAppleCalendar=\"addedAppleCalendar\"\n    />\n\n    <!-- Google sign in not supported dialog -->\n    <SignInNotSupportedDialog v-model=\"webviewDialog\" />\n\n    <!-- Guest dialog -->\n    <GuestDialog\n      v-model=\"guestDialog\"\n      @submit=\"handleGuestDialogSubmit\"\n      :event=\"event\"\n      :respondents=\"Object.keys(event.responses)\"\n    />\n\n    <!-- Join sign up slot dialog-->\n    <SignUpForSlotDialog\n      v-if=\"currSignUpBlock\"\n      v-model=\"signUpForSlotDialog\"\n      :signUpBlock=\"currSignUpBlock\"\n      @submit=\"signUpForBlock\"\n      :event=\"event\"\n    />\n\n    <!-- Edit event dialog -->\n    <NewDialog\n      v-model=\"editEventDialog\"\n      :type=\"eventType\"\n      :event=\"event\"\n      :contactsPayload=\"contactsPayload\"\n      edit\n      no-tabs\n    />\n\n    <!-- Group invitation dialog -->\n    <InvitationDialog\n      v-if=\"isGroup\"\n      v-model=\"invitationDialog\"\n      :group=\"event\"\n      :calendarPermissionGranted=\"calendarPermissionGranted\"\n      @refreshEvent=\"refreshEvent\"\n      @setAvailabilityAutomatically=\"setAvailabilityAutomatically\"\n    ></InvitationDialog>\n\n    <!-- Pages Not Visited dialog -->\n    <v-dialog\n      v-model=\"pagesNotVisitedDialog\"\n      max-width=\"400\"\n      content-class=\"tw-m-0\"\n    >\n      <v-card>\n        <v-card-title>请确认操作</v-card-title>\n        <v-card-text\n          ><span class=\"tw-font-medium\"\n            >您即将提交您的可用时间，但尚未填写所有页面。</span\n          >\n          请点击顶部的左右箭头切换页面。</v-card-text\n        >\n        <v-card-actions>\n          <v-spacer />\n          <v-btn text @click=\"pagesNotVisitedDialog = false\">取消</v-btn>\n          <v-btn\n            text\n            color=\"primary\"\n            @click=\"\n              () => {\n                saveChanges(true)\n                this.pagesNotVisitedDialog = false\n              }\n            \"\n            >提交</v-btn\n          >\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <div class=\"tw-mx-auto tw-mt-4 tw-max-w-5xl\">\n      <div v-if=\"!isSettingSpecificTimes\" class=\"tw-mx-4\">\n        <!-- Title and copy link -->\n        <div class=\"tw-flex tw-items-center tw-text-black\">\n          <div>\n            <div\n              class=\"sm:mb-2 tw-flex tw-flex-wrap tw-items-center tw-gap-x-4 tw-gap-y-2\"\n            >\n              <div class=\"tw-text-xl sm:tw-text-3xl\">{{ event.name }}</div>\n              <v-chip\n                v-if=\"event.when2meetHref?.length > 0\"\n                :href=\"`https://when2meet.com${event.when2meetHref}`\"\n                :small=\"isPhone\"\n                class=\"tw-cursor-pointer tw-select-none tw-rounded tw-bg-light-gray tw-px-2 tw-font-medium sm:tw-px-3\"\n                >来自when2meet的导入</v-chip\n              >\n              <template v-if=\"isGroup\">\n                <div class=\"\">\n                  <v-chip\n                    :small=\"isPhone\"\n                    class=\"tw-cursor-pointer tw-select-none tw-rounded tw-bg-light-gray tw-px-2 tw-font-medium sm:tw-px-3\"\n                    @click=\"helpDialog = true\"\n                    >可用性分组</v-chip\n                  >\n                </div>\n                <HelpDialog v-model=\"helpDialog\">\n                  <template v-slot:header>可用性分组</template>\n                  <div class=\"mb-4\">\n                    使用可用性分组可查看组员每周的Google日历空闲时间。您的实际日历事件对他人不可见。\n                  </div>\n                </HelpDialog>\n              </template>\n            </div>\n            <div class=\"tw-flex tw-items-baseline tw-gap-1\">\n              <div\n                class=\"tw-text-sm tw-font-normal tw-text-very-dark-gray sm:tw-text-base\"\n              >\n                {{ dateString }}\n              </div>\n              <template v-if=\"canEdit\">\n                <v-btn\n                  id=\"edit-event-btn\"\n                  @click=\"editEvent\"\n                  class=\"tw-px-2 tw-text-sm tw-text-green\"\n                  text\n                >\n                  编辑{{ isGroup ? \"分组\" : \"活动\" }}\n                </v-btn>\n              </template>\n            </div>\n          </div>\n          <v-spacer />\n          <div class=\"tw-flex tw-flex-row tw-items-center tw-gap-2.5\">\n            <div v-if=\"isGroup\">\n              <v-btn\n                v-if=\"event.startOnMonday ? weekOffset != 1 : weekOffset != 0\"\n                :icon=\"isPhone\"\n                text\n                class=\"tw-mr-1 tw-text-very-dark-gray sm:tw-mr-2.5\"\n                @click=\"resetWeekOffset\"\n              >\n                <v-icon class=\"sm:tw-mr-2\">mdi-calendar-today</v-icon>\n                <span v-if=\"!isPhone\">今天</span>\n              </v-btn>\n              <v-btn\n                :icon=\"isPhone\"\n                :outlined=\"!isPhone\"\n                class=\"tw-text-green\"\n                @click=\"refreshCalendar\"\n                :loading=\"loading\"\n              >\n                <v-icon class=\"tw-mr-1\" v-if=\"!isPhone\">mdi-refresh</v-icon>\n                <span v-if=\"!isPhone\" class=\"tw-mr-2\">刷新</span>\n                <v-icon class=\"tw-text-green\" v-else>mdi-refresh</v-icon>\n              </v-btn>\n            </div>\n            <div v-else>\n              <v-btn\n                :icon=\"isPhone\"\n                :outlined=\"!isPhone\"\n                class=\"tw-text-green\"\n                @click=\"copyLink\"\n              >\n                <span v-if=\"!isPhone\" class=\"tw-mr-2 tw-text-green\"\n                  >复制链接</span\n                >\n                <v-icon class=\"tw-text-green\" v-if=\"!isPhone\"\n                  >mdi-content-copy</v-icon\n                >\n                <v-icon class=\"tw-text-green\" v-else>mdi-share</v-icon>\n              </v-btn>\n            </div>\n            <div\n              v-if=\"!isPhone && (!isSignUp || canEdit)\"\n              class=\"tw-flex tw-w-40\"\n            >\n              <template v-if=\"!isEditing\">\n                <v-btn\n                  v-if=\"!isGroup && !authUser && selectedGuestRespondent\"\n                  min-width=\"10.25rem\"\n                  class=\"tw-bg-green tw-text-white tw-transition-opacity\"\n                  :style=\"{ opacity: availabilityBtnOpacity }\"\n                  @click=\"editGuestAvailability\"\n                >\n                  {{\n                    event.blindAvailabilityEnabled\n                      ? \"编辑可用时间\"\n                      : `编辑${selectedGuestRespondent}的可用时间`\n                  }}\n                </v-btn>\n                <v-btn\n                  v-else\n                  width=\"10.25rem\"\n                  class=\"tw-text-white tw-transition-opacity\"\n                  :class=\"'tw-bg-green'\"\n                  :disabled=\"loading && !userHasResponded\"\n                  :style=\"{ opacity: availabilityBtnOpacity }\"\n                  @click=\"() => addAvailability()\"\n                >\n                  {{ actionButtonText }}\n                </v-btn>\n              </template>\n              <template v-else>\n                <v-btn\n                  class=\"tw-mr-1 tw-w-20 tw-text-red\"\n                  @click=\"cancelEditing\"\n                  outlined\n                >\n                  取消\n                </v-btn>\n                <v-btn\n                  class=\"tw-w-20 tw-text-white\"\n                  :class=\"'tw-bg-green'\"\n                  @click=\"() => saveChanges()\"\n                >\n                  保存\n                </v-btn></template\n              >\n            </div>\n          </div>\n        </div>\n\n        <!-- Description -->\n        <EventDescription\n          :event.sync=\"event\"\n          :canEdit=\"event.ownerId != 0 && canEdit\"\n        />\n      </div>\n\n      <!-- Calendar -->\n\n      <ScheduleOverlap\n        ref=\"scheduleOverlap\"\n        :event=\"event\"\n        :fromEditEvent=\"fromEditEvent\"\n        :loadingCalendarEvents=\"loading\"\n        :calendarEventsMap=\"calendarEventsMap\"\n        :calendarPermissionGranted=\"calendarPermissionGranted\"\n        :calendar-availabilities=\"calendarAvailabilities\"\n        :weekOffset.sync=\"weekOffset\"\n        :curGuestId=\"curGuestId\"\n        :initial-timezone=\"initialTimezone\"\n        :addingAvailabilityAsGuest=\"addingAvailabilityAsGuest\"\n        @addAvailability=\"addAvailability\"\n        @addAvailabilityAsGuest=\"addAvailabilityAsGuest\"\n        @refreshEvent=\"refreshEvent\"\n        @highlightAvailabilityBtn=\"highlightAvailabilityBtn\"\n        @deleteAvailability=\"deleteAvailability\"\n        @setCurGuestId=\"(id) => (curGuestId = id)\"\n        @signUpForBlock=\"initiateSignUpFlow\"\n      />\n    </div>\n\n    <template v-if=\"showFeedbackBtn\">\n      <div class=\"tw-w-full tw-border-t tw-border-solid tw-border-gray\"></div>\n\n      <div class=\"tw-flex tw-flex-col tw-items-center\" v-if=\"showFeedbackBtn\">\n        <v-btn\n          class=\"tw-h-16\"\n          block\n          id=\"feedback-btn\"\n          text\n          href=\"https://forms.gle/9AgRy4PQfWfVuBnw8\"\n          target=\"_blank\"\n        >\n          意见反馈\n        </v-btn>\n        <div class=\"tw-w-full tw-border-t tw-border-solid tw-border-gray\"></div>\n        <v-btn\n          class=\"tw-h-16\"\n          block\n          text\n          href=\"https://www.paypal.com/donate/?hosted_button_id=KWCH6LGJCP6E6\"\n          target=\"_blank\"\n        >\n          支持我们\n        </v-btn>\n        <div class=\"tw-w-full tw-border-t tw-border-solid tw-border-gray\"></div>\n        <v-btn class=\"tw-h-16\" block text :to=\"{ name: 'privacy-policy' }\">\n          隐私政策\n        </v-btn>\n      </div>\n    </template>\n\n    <div\n      class=\"tw-mb-16 tw-hidden tw-flex-col tw-items-center tw-justify-between sm:tw-flex\"\n    >\n      <router-link\n        class=\"tw-text-xs tw-font-medium tw-text-gray\"\n        :to=\"{ name: 'privacy-policy' }\"\n      >\n        隐私政策\n      </router-link>\n    </div>\n\n    <div class=\"tw-h-8\"></div>\n    <!-- Bottom bar for phones -->\n    <div\n      v-if=\"!isSettingSpecificTimes && isPhone && (!isSignUp || canEdit)\"\n      class=\"tw-fixed tw-bottom-0 tw-z-20 tw-flex tw-h-16 tw-w-full tw-items-center tw-px-4\"\n      :class=\"`${isIOS ? 'tw-pb-2' : ''} ${\n        isScheduling ? 'tw-bg-blue' : 'tw-bg-green'\n      }`\"\n    >\n      <template v-if=\"!isEditing && !isScheduling\">\n        <v-btn\n          v-if=\"!event.daysOnly && numResponses > 0\"\n          text\n          class=\"tw-text-white\"\n          @click=\"scheduleEvent\"\n          >Schedule</v-btn\n        >\n        <v-spacer />\n        <v-btn\n          v-if=\"!isGroup && !authUser && selectedGuestRespondent\"\n          class=\"tw-bg-white tw-text-green tw-transition-opacity\"\n          :style=\"{ opacity: availabilityBtnOpacity }\"\n          @click=\"editGuestAvailability\"\n        >\n          {{ mobileGuestActionButtonText }}\n        </v-btn>\n        <v-btn\n          v-else\n          class=\"tw-bg-white tw-text-green tw-transition-opacity\"\n          :disabled=\"loading && !userHasResponded\"\n          :style=\"{ opacity: availabilityBtnOpacity }\"\n          @click=\"() => addAvailability()\"\n        >\n          {{ mobileActionButtonText }}\n        </v-btn>\n      </template>\n      <template v-else-if=\"isEditing\">\n        <v-btn text class=\"tw-text-white\" @click=\"cancelEditing\">\n          取消\n        </v-btn>\n        <v-spacer />\n        <v-btn class=\"tw-bg-white tw-text-green\" @click=\"() => saveChanges()\">\n          保存\n        </v-btn>\n      </template>\n      <template v-else-if=\"isScheduling\">\n        <v-btn text class=\"tw-text-white\" @click=\"cancelScheduleEvent\">\n          取消\n        </v-btn>\n        <v-spacer />\n        <v-btn\n          :disabled=\"!allowScheduleEvent\"\n          class=\"tw-bg-white tw-text-blue\"\n          @click=\"confirmScheduleEvent\"\n        >\n          安排\n        </v-btn>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  get,\n  post,\n  signInGoogle,\n  signInOutlook,\n  isPhone,\n  processEvent,\n  getCalendarEventsMap,\n  getDateRangeStringForEvent,\n  isIOS,\n  isDstObserved,\n} from \"@/utils\"\nimport { mapActions, mapState, mapMutations } from \"vuex\"\n\nimport NewDialog from \"@/components/NewDialog.vue\"\nimport ScheduleOverlap from \"@/components/schedule_overlap/ScheduleOverlap.vue\"\nimport GuestDialog from \"@/components/GuestDialog.vue\"\nimport SignUpForSlotDialog from \"@/components/sign_up_form/SignUpForSlotDialog.vue\"\nimport { errors, authTypes, eventTypes, calendarTypes } from \"@/constants\"\nimport isWebview from \"is-ua-webview\"\nimport SignInNotSupportedDialog from \"@/components/SignInNotSupportedDialog.vue\"\nimport MarkAvailabilityDialog from \"@/components/calendar_permission_dialogs/MarkAvailabilityDialog.vue\"\nimport InvitationDialog from \"@/components/groups/InvitationDialog.vue\"\nimport HelpDialog from \"@/components/HelpDialog.vue\"\nimport EventDescription from \"@/components/event/EventDescription.vue\"\nexport default {\n  name: \"Event\",\n\n  props: {\n    eventId: { type: String, required: true },\n    fromSignIn: { type: Boolean, default: false },\n    editingMode: { type: Boolean, default: false },\n    linkApple: { type: Boolean, default: false },\n    initialTimezone: { type: Object, default: () => ({}) },\n    contactsPayload: { type: Object, default: () => ({}) },\n  },\n\n  components: {\n    GuestDialog,\n    SignUpForSlotDialog,\n    ScheduleOverlap,\n    NewDialog,\n    SignInNotSupportedDialog,\n    MarkAvailabilityDialog,\n    InvitationDialog,\n    HelpDialog,\n    EventDescription,\n  },\n\n  data: () => ({\n    fromEditEvent: false,\n\n    choiceDialog: false,\n    webviewDialog: false,\n    guestDialog: false,\n    signUpForSlotDialog: false,\n    editEventDialog: false,\n    invitationDialog: false,\n    pagesNotVisitedDialog: false,\n    helpDialog: false,\n\n    loading: true,\n    calendarEventsMap: {},\n    event: null,\n    scheduleOverlapComponent: null,\n    scheduleOverlapComponentLoaded: false,\n\n    curGuestId: \"\", // Id of the current guest being edited\n    calendarPermissionGranted: true,\n    addingAvailabilityAsGuest: false, // Whether a signed in user is current adding availability as a guest\n\n    weekOffset: 0,\n\n    availabilityBtnOpacity: 1,\n    hasRefetchedAuthUserCalendarEvents: false,\n\n    // Availability Groups\n    calendarAvailabilities: {}, // maps userId to their calendar events\n\n    // Sign Up Forms\n    currSignUpBlock: null,\n  }),\n\n  mounted() {\n    // If coming from enabling contacts, show the dialog. Checks if contactsPayload is not an Observer.\n    this.editEventDialog = Object.keys(this.contactsPayload).length > 0\n\n    // If coming from signing in to link apple calendar, show the mark availability dialog\n    if (this.linkApple) {\n      this.choiceDialog = true\n    }\n  },\n\n  computed: {\n    ...mapState([\"authUser\", \"events\"]),\n    allowScheduleEvent() {\n      return this.scheduleOverlapComponent?.allowScheduleEvent\n    },\n    calendarTypes() {\n      return calendarTypes\n    },\n    dateString() {\n      return getDateRangeStringForEvent(this.event)\n    },\n    isEditing() {\n      return this.scheduleOverlapComponent?.editing\n    },\n    isScheduling() {\n      return this.scheduleOverlapComponent?.scheduling\n    },\n    canEdit() {\n      return (\n        this.event.ownerId == 0 || this.authUser?._id === this.event.ownerId\n      )\n    },\n    isPhone() {\n      return isPhone(this.$vuetify)\n    },\n    isSpecificDates() {\n      return this.event?.type === eventTypes.SPECIFIC_DATES || !this.event?.type\n    },\n    isWeekly() {\n      return this.event?.type === eventTypes.DOW\n    },\n    isGroup() {\n      return this.event?.type === eventTypes.GROUP\n    },\n    isSignUp() {\n      return this.event?.isSignUpForm\n    },\n    eventType() {\n      if (this.isGroup) return \"group\"\n      else if (this.isSignUp) return \"signup\"\n      else return \"event\"\n    },\n    areUnsavedChanges() {\n      return this.scheduleOverlapComponent?.unsavedChanges\n    },\n    userHasResponded() {\n      return this.authUser?._id in this.event.responses\n    },\n    selectedGuestRespondent() {\n      return this.scheduleOverlapComponent?.selectedGuestRespondent\n    },\n    showFeedbackBtn() {\n      return this.isPhone\n    },\n    numResponses() {\n      return this.scheduleOverlapComponent?.respondents.length\n    },\n    actionButtonText() {\n      if (this.isSignUp) return \"Edit slots\"\n      else if (this.userHasResponded || this.isGroup) return \"编辑可用时间\"\n      return \"添加可用时间\"\n    },\n    mobileGuestActionButtonText() {\n      return this.event.blindAvailabilityEnabled\n        ? \"Edit availability\"\n        : `Edit ${this.selectedGuestRespondent}'s availability`\n    },\n    mobileActionButtonText() {\n      if (this.isSignUp) return \"Edit slots\"\n      return this.userHasResponded ? \"编辑可用时间\" : \"添加可用时间\"\n    },\n    isIOS() {\n      return isIOS()\n    },\n    isSettingSpecificTimes() {\n      return (\n        this.scheduleOverlapComponent?.state ===\n        this.scheduleOverlapComponent?.states.SET_SPECIFIC_TIMES\n      )\n    },\n  },\n\n  methods: {\n    ...mapActions([\"showError\", \"showInfo\", \"getEvents\"]),\n    ...mapMutations([\"setAuthUser\"]),\n    /** Show choice dialog if not signed in, otherwise, immediately start editing availability */\n    addAvailability() {\n      if (!this.scheduleOverlapComponent) return\n\n      // Start editing immediately if days only\n      if (this.event?.daysOnly) {\n        this.scheduleOverlapComponent.startEditing()\n        return\n      }\n\n      // Start editing if calendar permission granted or user has responded, otherwise show choice dialog\n      if (\n        (this.authUser && this.calendarPermissionGranted) ||\n        this.userHasResponded\n      ) {\n        this.scheduleOverlapComponent.startEditing()\n        if (!this.userHasResponded && !this.isSignUp) {\n          this.scheduleOverlapComponent.setAvailabilityAutomatically()\n        }\n      } else {\n        this.choiceDialog = true\n      }\n    },\n    /** Add guest availability while signed in */\n    addAvailabilityAsGuest() {\n      this.addingAvailabilityAsGuest = true\n      this.setAvailabilityManually()\n    },\n    cancelEditing() {\n      /* Cancels editing and resets availability to previous */\n      if (!this.scheduleOverlapComponent) return\n\n      if (!this.isSignUp)\n        this.scheduleOverlapComponent.resetCurUserAvailability()\n      else this.scheduleOverlapComponent.resetSignUpForm()\n      this.scheduleOverlapComponent.stopEditing()\n      this.curGuestId = \"\"\n      this.addingAvailabilityAsGuest = false\n    },\n    copyLink() {\n      /* Copies event link to clipboard */\n      navigator.clipboard.writeText(\n        `${window.location.origin}/e/${this.event.shortId ?? this.event._id}`\n      )\n      this.showInfo(\"Link copied to clipboard!\")\n    },\n    async deleteAvailability() {\n      if (!this.scheduleOverlapComponent) return\n\n      if (!this.authUser || this.addingAvailabilityAsGuest) {\n        if (this.curGuestId) {\n          await this.scheduleOverlapComponent.deleteAvailability(\n            this.curGuestId\n          )\n          this.curGuestId = \"\"\n        }\n      } else {\n        await this.scheduleOverlapComponent.deleteAvailability()\n      }\n\n      this.showInfo(this.isGroup ? \"Left group!\" : \"Availability deleted!\")\n      this.scheduleOverlapComponent.stopEditing()\n    },\n\n    editEvent() {\n      /* Show edit event dialog */\n      this.editEventDialog = true\n    },\n    /** Refresh event details */\n    async refreshEvent() {\n      let sanitizedId = this.eventId.replaceAll(\".\", \"\")\n      this.event = await get(`/events/${sanitizedId}`)\n      processEvent(this.event)\n    },\n\n    setAvailabilityAutomatically(calendarType = calendarTypes.GOOGLE) {\n      /* Prompts user to sign in when \"set availability automatically\" button clicked */\n      if (isWebview(navigator.userAgent)) {\n        // Show dialog prompting user to use a real browser\n        this.webviewDialog = true\n      } else {\n        // Or sign in if user is already using a real browser\n        let signInParams\n        if (this.authUser) {\n          // Request permission if calendar permissions not yet granted\n          signInParams = {\n            state: {\n              type: this.isGroup\n                ? authTypes.GROUP_ADD_AVAILABILITY\n                : authTypes.EVENT_ADD_AVAILABILITY,\n              eventId: this.eventId,\n            },\n            selectAccount: false,\n            requestCalendarPermission: true,\n          }\n        } else {\n          // Ask the user to select the account they want to sign in with if not logged in yet\n          signInParams = {\n            state: {\n              type: authTypes.EVENT_ADD_AVAILABILITY,\n              eventId: this.eventId,\n            },\n            selectAccount: true,\n            requestCalendarPermission: true,\n          }\n        }\n\n        if (calendarType === calendarTypes.GOOGLE) {\n          signInGoogle(signInParams)\n        } else if (calendarType === calendarTypes.OUTLOOK) {\n          signInOutlook(signInParams)\n        }\n      }\n      this.choiceDialog = false\n    },\n    setAvailabilityManually() {\n      /* Starts editing after \"set availability manually\" button clicked */\n      if (!this.scheduleOverlapComponent) return\n\n      this.$nextTick(() => {\n        this.scheduleOverlapComponent.startEditing()\n      })\n      this.choiceDialog = false\n    },\n    editGuestAvailability() {\n      /* Edits the selected guest's availability */\n      if (!this.scheduleOverlapComponent) return\n\n      this.curGuestId = this.selectedGuestRespondent\n      this.scheduleOverlapComponent.startEditing()\n      this.$nextTick(() => {\n        this.scheduleOverlapComponent.populateUserAvailability(\n          this.selectedGuestRespondent\n        )\n      })\n    },\n\n    async saveChanges(ignorePagesNotVisited = false) {\n      /* Shows guest dialog if not signed in, otherwise saves auth user's availability */\n      if (!this.scheduleOverlapComponent) return\n\n      // If user hasn't responded and they haven't gone to the next page, show pages not visited dialog\n      if (\n        !this.userHasResponded &&\n        this.curGuestId.length === 0 &&\n        !this.scheduleOverlapComponent.pageHasChanged &&\n        !ignorePagesNotVisited &&\n        this.scheduleOverlapComponent.hasPages\n      ) {\n        this.pagesNotVisitedDialog = true\n        return\n      }\n\n      if (!this.authUser || this.addingAvailabilityAsGuest) {\n        if (this.curGuestId) {\n          this.saveChangesAsGuest({\n            name: this.curGuestId,\n            email: this.event.responses[this.curGuestId].email,\n          })\n          this.curGuestId = \"\"\n          this.addingAvailabilityAsGuest = false\n        } else {\n          this.guestDialog = true\n        }\n        return\n      }\n\n      let changesPersisted = true\n\n      if (this.isSignUp) {\n        changesPersisted =\n          await this.scheduleOverlapComponent.submitNewSignUpBlocks()\n      } else {\n        await this.scheduleOverlapComponent.submitAvailability()\n      }\n\n      if (changesPersisted) {\n        this.showInfo(\"Changes saved!\")\n        this.scheduleOverlapComponent.stopEditing()\n      }\n    },\n    async saveChangesAsGuest(payload) {\n      /* After guest dialog is submitted, submit availability with the given name */\n      if (!this.scheduleOverlapComponent) return\n\n      if (payload.name.length > 0) {\n        await this.scheduleOverlapComponent.submitAvailability(payload)\n\n        this.showInfo(\"Changes saved!\")\n        this.scheduleOverlapComponent.resetCurUserAvailability()\n        this.scheduleOverlapComponent.stopEditing()\n        this.guestDialog = false\n        this.addingAvailabilityAsGuest = false\n      }\n    },\n\n    scheduleEvent() {\n      this.scheduleOverlapComponent?.scheduleEvent()\n    },\n    cancelScheduleEvent() {\n      this.scheduleOverlapComponent?.cancelScheduleEvent()\n    },\n    confirmScheduleEvent() {\n      this.scheduleOverlapComponent?.confirmScheduleEvent()\n    },\n\n    highlightAvailabilityBtn() {\n      if (!this.isPhone) {\n        window.scrollTo({ top: 0, behavior: \"instant\" })\n      }\n\n      this.availabilityBtnOpacity = 0.1\n      setTimeout(() => {\n        this.availabilityBtnOpacity = 1\n\n        setTimeout(() => {\n          this.availabilityBtnOpacity = 0.1\n          setTimeout(() => {\n            this.availabilityBtnOpacity = 1\n          }, 100)\n        }, 100)\n      }, 100)\n    },\n\n    /** Sign in with google to link apple calendar */\n    signInLinkApple() {\n      if (isWebview(navigator.userAgent)) {\n        // Show dialog prompting user to use a real browser\n        this.webviewDialog = true\n      } else {\n        signInGoogle({\n          state: {\n            type: authTypes.EVENT_SIGN_IN_LINK_APPLE,\n            eventId: this.eventId,\n          },\n          selectAccount: true,\n        })\n      }\n    },\n    /** Called when user adds apple calendar account */\n    addedAppleCalendar() {\n      this.choiceDialog = false\n      this.scheduleOverlapComponent?.startEditing()\n      this.scheduleOverlapComponent?.setAvailabilityAutomatically()\n    },\n\n    /** Refresh calendar availabilities of everybody in the group */\n    async fetchCalendarAvailabilities() {\n      if (this.event.type !== eventTypes.GROUP) return\n\n      // this.calendarAvailabilities = {}\n      const curWeekOffset = this.weekOffset\n      return getCalendarEventsMap(this.event, {\n        weekOffset: curWeekOffset,\n        eventId: this.event._id,\n      })\n        .then((calendarAvailabilities) => {\n          // Don't update calendar availabilities if user\n          // selected a different weekoffset by the time these calendar events load\n          if (curWeekOffset !== this.weekOffset) return\n\n          this.calendarAvailabilities = calendarAvailabilities\n\n          // Fix DST bug\n          for (const userId in this.calendarAvailabilities) {\n            for (const index in this.calendarAvailabilities[userId]) {\n              const event = this.calendarAvailabilities[userId][index]\n              const startDate = new Date(event.startDate)\n              const endDate = new Date(event.endDate)\n              if (!isDstObserved(startDate)) {\n                startDate.setHours(startDate.getHours() - 1)\n                endDate.setHours(endDate.getHours() - 1)\n              }\n              this.calendarAvailabilities[userId][index].startDate =\n                startDate.toISOString()\n              this.calendarAvailabilities[userId][index].endDate =\n                endDate.toISOString()\n            }\n          }\n        })\n        .catch((err) => {\n          console.error(err)\n        })\n    },\n\n    /** Fetch current user's calendar events */\n    async fetchAuthUserCalendarEvents() {\n      if (!this.authUser) {\n        this.calendarPermissionGranted = false\n        return\n      }\n\n      // this.calendarEventsMap = {}\n      const curWeekOffset = this.weekOffset\n      return getCalendarEventsMap(this.event, { weekOffset: curWeekOffset })\n        .then((eventsMap) => {\n          // If all calendars have error, then set calendarPermissionGranted to false\n          // TODO: What happens if user signed in without enabling calendar??\n          // let noError = false\n          // for (const key in eventsMap) {\n          //   if (!eventsMap[key].error) {\n          //     noError = true\n          //     break\n          //   }\n          // }\n          // if (!noError) {\n          //   this.calendarPermissionGranted = false\n          //   return\n          // }\n\n          // Don't set calendar events / set availability if user has already\n          // selected a different weekoffset by the time these calendar events load\n          if (curWeekOffset !== this.weekOffset) return\n\n          this.calendarEventsMap = eventsMap\n\n          // Fix DST bug\n          if (this.event.type === eventTypes.GROUP) {\n            for (const calendarId in this.calendarEventsMap) {\n              for (const index in this.calendarEventsMap[calendarId]\n                .calendarEvents) {\n                const event =\n                  this.calendarEventsMap[calendarId].calendarEvents[index]\n                const startDate = new Date(event.startDate)\n                const endDate = new Date(event.endDate)\n                if (!isDstObserved(startDate)) {\n                  startDate.setHours(startDate.getHours() - 1)\n                  endDate.setHours(endDate.getHours() - 1)\n                }\n                this.calendarEventsMap[calendarId].calendarEvents[\n                  index\n                ].startDate = startDate.toISOString()\n                this.calendarEventsMap[calendarId].calendarEvents[\n                  index\n                ].endDate = endDate.toISOString()\n              }\n            }\n          }\n\n          // Set user availability automatically if we're in editing mode and they haven't responded\n          if (\n            this.authUser &&\n            this.isEditing &&\n            !this.userHasResponded &&\n            !this.areUnsavedChanges &&\n            this.scheduleOverlapComponent\n          ) {\n            this.$nextTick(() => {\n              this.scheduleOverlapComponent?.setAvailabilityAutomatically()\n            })\n          }\n\n          // calendar permission granted is false when every calendar in the calendar map has an error, true otherwise\n          this.calendarPermissionGranted = !Object.values(\n            this.calendarEventsMap\n          ).every((c) => Boolean(c.error))\n\n          if (!this.hasRefetchedAuthUserCalendarEvents) {\n            const hasAtLeastOneError = Object.values(\n              this.calendarEventsMap\n            ).some((c) => Boolean(c.error))\n\n            // Refetch calendar if there is an error\n            if (hasAtLeastOneError) {\n              this.hasRefetchedAuthUserCalendarEvents = true\n              setTimeout(() => {\n                this.fetchAuthUserCalendarEvents()\n              }, 1000)\n            }\n          }\n        })\n        .catch((err) => {\n          console.error(err)\n          this.calendarPermissionGranted = false\n        })\n    },\n\n    /** Refreshes calendar avaliabilities and fetches current user calendar events */\n    refreshCalendar() {\n      const promises = []\n      promises.push(this.fetchCalendarAvailabilities())\n      promises.push(this.fetchAuthUserCalendarEvents())\n\n      const curWeekOffset = this.weekOffset\n      this.loading = true\n      Promise.allSettled(promises).then(() => {\n        // Only set loading to false if promises resolved at the same week offset they were fetched at\n        // i.e. no new promises are currently being run\n        if (curWeekOffset === this.weekOffset) {\n          this.loading = false\n        }\n      })\n    },\n\n    /** Resets week offset to 0 */\n    resetWeekOffset() {\n      if (this.event && this.event.startOnMonday) {\n        this.weekOffset = 1\n      } else {\n        this.weekOffset = 0\n      }\n    },\n\n    onBeforeUnload(e) {\n      if (this.areUnsavedChanges) {\n        e.preventDefault()\n        e.returnValue = \"\"\n        return\n      }\n\n      delete e[\"returnValue\"]\n    },\n\n    handleGuestDialogSubmit(guestPayload) {\n      this.saveChangesAsGuest(guestPayload)\n    },\n\n    // -----------------------------------\n    //#region Sign Up Form\n    // -----------------------------------\n\n    initiateSignUpFlow(signUpBlock) {\n      this.currSignUpBlock = signUpBlock\n      this.signUpForSlotDialog = true\n    },\n\n    async signUpForBlock(guestPayload) {\n      let payload\n\n      if (this.authUser) {\n        payload = {\n          guest: false,\n          signUpBlockIds: [this.currSignUpBlock._id],\n        }\n      } else {\n        payload = {\n          guest: true,\n          signUpBlockIds: [this.currSignUpBlock._id],\n          ...guestPayload,\n        }\n      }\n\n      await post(`/events/${this.event._id}/response`, payload)\n      await this.refreshEvent()\n\n      this.scheduleOverlapComponent.resetSignUpForm()\n      this.signUpForSlotDialog = false\n    },\n\n    //#endregion\n  },\n\n  async created() {\n    window.addEventListener(\"beforeunload\", this.onBeforeUnload)\n\n    // Get event details\n    try {\n      await this.refreshEvent()\n\n      // Redirect if we're at the wrong route\n      if (this.event.type === eventTypes.GROUP) {\n        if (this.$route.name === \"event\") {\n          this.$router.replace({\n            name: \"group\",\n            params: {\n              groupId: this.eventId,\n              initialTimezone: this.initialTimezone,\n              fromSignIn: this.fromSignIn,\n              contactsPayload: this.contactsPayload,\n            },\n          })\n        }\n      } else {\n        if (this.$route.name === \"group\") {\n          this.$router.replace({\n            name: \"event\",\n            params: {\n              eventId: this.eventId,\n              initialTimezone: this.initialTimezone,\n              fromSignIn: this.fromSignIn,\n              contactsPayload: this.contactsPayload,\n            },\n          })\n        }\n      }\n\n      const fromEditEvent = localStorage.getItem(\n        `from-edit-event-${this.event._id}`\n      )\n      if (fromEditEvent) {\n        localStorage.removeItem(`from-edit-event-${this.event._id}`)\n        this.fromEditEvent = true\n      }\n    } catch (err) {\n      switch (err.error) {\n        case errors.EventNotFound:\n          this.showError(\"The specified event does not exist!\")\n          this.$router.replace({ name: \"home\" })\n          return\n      }\n    }\n\n    const promises = []\n    promises.push(this.fetchCalendarAvailabilities())\n    promises.push(this.fetchAuthUserCalendarEvents())\n\n    this.loading = true\n    Promise.allSettled(promises).then(() => {\n      this.loading = false\n    })\n\n    get(\"/user/profile\")\n      .then((authUser) => {\n        this.setAuthUser(authUser)\n      })\n      .catch(() => {\n        this.setAuthUser(null)\n      })\n  },\n\n  beforeDestroy() {\n    window.removeEventListener(\"beforeunload\", this.onBeforeUnload)\n  },\n\n  watch: {\n    event() {\n      if (this.event) {\n        this.resetWeekOffset()\n        this.$nextTick(() => {\n          this.scheduleOverlapComponent = this.$refs.scheduleOverlap\n        })\n        document.title = `${this.event.name} - Schej`\n      }\n    },\n    scheduleOverlapComponent() {\n      if (!this.scheduleOverlapComponentLoaded) {\n        this.scheduleOverlapComponentLoaded = true\n\n        // Put into editing mode if just signed in\n        if ((this.fromSignIn || this.editingMode) && !this.isGroup) {\n          this.scheduleOverlapComponent.startEditing()\n        }\n\n        if (this.isGroup && !this.userHasResponded) {\n          this.invitationDialog = true\n        }\n      }\n    },\n    weekOffset() {\n      this.refreshCalendar()\n    },\n    [`authUser.calendarAccounts`]() {\n      this.fetchAuthUserCalendarEvents()\n    },\n  },\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}