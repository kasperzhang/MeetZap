{"ast":null,"code":"import { mapState, mapActions, mapMutations } from \"vuex\";\nimport { authTypes, calendarTypes } from \"@/constants\";\nimport { get, post, _delete, signInGoogle, signInOutlook, getCalendarAccountKey } from \"@/utils\";\nimport CalendarAccount from \"@/components/settings/CalendarAccount.vue\";\nimport CalendarTypeSelector from \"@/components/settings/CalendarTypeSelector.vue\";\nexport default {\n  name: \"CalendarAccounts\",\n  props: {\n    toggleState: {\n      type: Boolean,\n      default: false\n    },\n    // Whether to allow user to toggle calendar accounts\n    eventId: {\n      type: String,\n      default: \"\"\n    },\n    calendarEventsMap: {\n      type: Object,\n      default: () => {}\n    },\n    // Object of different users' calendar events\n    syncWithBackend: {\n      type: Boolean,\n      default: true\n    },\n    // Whether toggling calendar accounts also updates the backend\n    allowAddCalendarAccount: {\n      type: Boolean,\n      default: true\n    },\n    // Whether to allow user to add a new calendar account\n    initialCalendarAccountsData: {\n      type: Object,\n      default: () => {}\n    },\n    // Initial data to display for enabled calendar accounts\n    fillSpace: {\n      type: Boolean,\n      default: false\n    } // Whether to fill the available space up\n  },\n  data: () => ({\n    removeDialog: false,\n    removePayload: {},\n    addCalendarAccountDialog: false,\n    calendarAccounts: {},\n    showCalendars: localStorage[\"showCalendars\"] == undefined ? true : localStorage[\"showCalendars\"] == \"true\",\n    calendarEventsMapCopy: {}\n  }),\n  computed: {\n    ...mapState([\"authUser\"])\n  },\n  mounted() {\n    this.calendarAccounts = !this.initialCalendarAccountsData ? this.authUser.calendarAccounts : this.initialCalendarAccountsData;\n  },\n  methods: {\n    ...mapActions([\"showError\", \"showInfo\", \"refreshAuthUser\"]),\n    ...mapMutations([\"setAuthUser\"]),\n    addGoogleCalendar() {\n      signInGoogle({\n        state: {\n          type: this.toggleState ? authTypes.ADD_CALENDAR_ACCOUNT_FROM_EDIT : authTypes.ADD_CALENDAR_ACCOUNT,\n          eventId: this.eventId,\n          calendarType: calendarTypes.GOOGLE\n        },\n        requestCalendarPermission: true,\n        selectAccount: true\n      });\n    },\n    addedAppleCalendar() {\n      this.addCalendarAccountDialog = false;\n      this.calendarAccounts = this.authUser.calendarAccounts;\n    },\n    addOutlookCalendar() {\n      signInOutlook({\n        state: {\n          type: this.toggleState ? authTypes.ADD_CALENDAR_ACCOUNT_FROM_EDIT : authTypes.ADD_CALENDAR_ACCOUNT,\n          eventId: this.eventId,\n          calendarType: calendarTypes.OUTLOOK\n        },\n        requestCalendarPermission: true\n      });\n    },\n    openRemoveDialog(payload) {\n      this.removeDialog = true;\n      this.removePayload = payload;\n    },\n    removeAccount() {\n      _delete(`/user/remove-calendar-account`, this.removePayload).then(async () => {\n        // Remove calendar account locally\n        const calendarAccountKey = getCalendarAccountKey(this.removePayload.email, this.removePayload.calendarType);\n        delete this.authUser.calendarAccounts[calendarAccountKey];\n        this.setAuthUser(this.authUser);\n        this.removeDialog = false;\n      }).catch(err => {\n        console.error(err);\n        this.showError(\"There was a problem removing this account! Please try again later.\");\n      });\n    },\n    toggleShowCalendars() {\n      this.showCalendars = !this.showCalendars;\n      localStorage[\"showCalendars\"] = this.showCalendars;\n    }\n  },\n  components: {\n    CalendarAccount,\n    CalendarTypeSelector\n  },\n  watch: {\n    calendarEventsMap: {\n      immediate: true,\n      async handler() {\n        // Do a test request to calendarevents route to check if calendar access is allowed for each account\n        if (!this.calendarEventsMap || Object.keys(this.calendarEventsMap).length === 0) {\n          const timeMin = new Date();\n          const timeMax = new Date();\n          try {\n            this.calendarEventsMapCopy = await get(`/user/calendars?timeMin=${timeMin.toISOString()}&timeMax=${timeMax.toISOString()}`);\n          } catch (err) {\n            console.error(err);\n          }\n        } else {\n          this.calendarEventsMapCopy = this.calendarEventsMap;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","mapMutations","authTypes","calendarTypes","get","post","_delete","signInGoogle","signInOutlook","getCalendarAccountKey","CalendarAccount","CalendarTypeSelector","name","props","toggleState","type","Boolean","default","eventId","String","calendarEventsMap","Object","syncWithBackend","allowAddCalendarAccount","initialCalendarAccountsData","fillSpace","data","removeDialog","removePayload","addCalendarAccountDialog","calendarAccounts","showCalendars","localStorage","undefined","calendarEventsMapCopy","computed","mounted","authUser","methods","addGoogleCalendar","state","ADD_CALENDAR_ACCOUNT_FROM_EDIT","ADD_CALENDAR_ACCOUNT","calendarType","GOOGLE","requestCalendarPermission","selectAccount","addedAppleCalendar","addOutlookCalendar","OUTLOOK","openRemoveDialog","payload","removeAccount","then","calendarAccountKey","email","setAuthUser","catch","err","console","error","showError","toggleShowCalendars","components","watch","immediate","handler","keys","length","timeMin","Date","timeMax","toISOString"],"sources":["src/components/settings/CalendarAccounts.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"toggleState ? '' : 'tw-w-fit tw-min-w-[288px] tw-drop-shadow'\"\n    class=\"tw-flex tw-flex-col tw-rounded-lg tw-bg-white tw-text-black tw-transition-all\"\n  >\n    <v-btn\n      v-if=\"toggleState\"\n      class=\"-tw-ml-2 tw-w-[calc(100%+1rem)] tw-justify-between tw-px-2\"\n      block\n      text\n      @click=\"toggleShowCalendars\"\n    >\n      <span class=\"tw-mr-1 tw-text-base tw-font-medium\">My calendars</span>\n      <v-icon :class=\"`tw-rotate-${showCalendars ? '180' : '0'}`\"\n        >mdi-chevron-down</v-icon\n      ></v-btn\n    >\n    <div\n      v-else\n      class=\"tw-border-b tw-border-off-white tw-px-4 tw-py-3 tw-font-medium\"\n    >\n      My calendars\n    </div>\n    <v-expand-transition>\n      <span v-if=\"showCalendars || !toggleState\">\n        <div :class=\"toggleState ? '' : 'tw-px-4 tw-py-2'\">\n          <CalendarAccount\n            v-for=\"(account, key) in calendarAccounts\"\n            :key=\"key\"\n            :syncWithBackend=\"syncWithBackend\"\n            :toggleState=\"toggleState\"\n            :account=\"account\"\n            :eventId=\"eventId\"\n            :calendarEventsMap=\"calendarEventsMapCopy\"\n            :removeDialog=\"removeDialog\"\n            :selectedRemoveEmail=\"removePayload.email\"\n            :fillSpace=\"fillSpace\"\n            @toggleCalendarAccount=\"\n              (payload) => $emit('toggleCalendarAccount', payload)\n            \"\n            @toggleSubCalendarAccount=\"\n              (payload) => $emit('toggleSubCalendarAccount', payload)\n            \"\n            @openRemoveDialog=\"openRemoveDialog\"\n          ></CalendarAccount>\n        </div>\n        <v-dialog\n          v-if=\"allowAddCalendarAccount\"\n          v-model=\"addCalendarAccountDialog\"\n          width=\"400\"\n          content-class=\"tw-m-0\"\n        >\n          <template v-slot:activator=\"{ on, attrs }\">\n            <v-btn\n              text\n              color=\"primary\"\n              :class=\"\n                toggleState ? '-tw-ml-2 tw-mt-0 tw-w-min tw-px-2' : 'tw-w-full'\n              \"\n              v-bind=\"attrs\"\n              v-on=\"on\"\n              >+ Add calendar</v-btn\n            >\n          </template>\n          <CalendarTypeSelector\n            @addGoogleCalendar=\"addGoogleCalendar\"\n            @addedAppleCalendar=\"addedAppleCalendar\"\n            @addOutlookCalendar=\"addOutlookCalendar\"\n          />\n        </v-dialog>\n      </span>\n    </v-expand-transition>\n    <v-dialog v-model=\"removeDialog\" width=\"500\" persistent>\n      <v-card>\n        <v-card-title>Are you sure?</v-card-title>\n        <v-card-text class=\"tw-text-sm tw-text-dark-gray\"\n          >Are you sure you want to remove\n          {{ removePayload.email }}?</v-card-text\n        >\n        <v-card-actions>\n          <v-spacer />\n          <v-btn text @click=\"removeDialog = false\">Cancel</v-btn>\n          <v-btn text color=\"error\" @click=\"removeAccount\">Remove</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions, mapMutations } from \"vuex\"\nimport { authTypes, calendarTypes } from \"@/constants\"\nimport {\n  get,\n  post,\n  _delete,\n  signInGoogle,\n  signInOutlook,\n  getCalendarAccountKey,\n} from \"@/utils\"\nimport CalendarAccount from \"@/components/settings/CalendarAccount.vue\"\nimport CalendarTypeSelector from \"@/components/settings/CalendarTypeSelector.vue\"\n\nexport default {\n  name: \"CalendarAccounts\",\n\n  props: {\n    toggleState: { type: Boolean, default: false }, // Whether to allow user to toggle calendar accounts\n    eventId: { type: String, default: \"\" },\n    calendarEventsMap: { type: Object, default: () => {} }, // Object of different users' calendar events\n    syncWithBackend: { type: Boolean, default: true }, // Whether toggling calendar accounts also updates the backend\n    allowAddCalendarAccount: { type: Boolean, default: true }, // Whether to allow user to add a new calendar account\n    initialCalendarAccountsData: { type: Object, default: () => {} }, // Initial data to display for enabled calendar accounts\n    fillSpace: { type: Boolean, default: false }, // Whether to fill the available space up\n  },\n\n  data: () => ({\n    removeDialog: false,\n    removePayload: {},\n\n    addCalendarAccountDialog: false,\n\n    calendarAccounts: {},\n    showCalendars:\n      localStorage[\"showCalendars\"] == undefined\n        ? true\n        : localStorage[\"showCalendars\"] == \"true\",\n\n    calendarEventsMapCopy: {},\n  }),\n\n  computed: {\n    ...mapState([\"authUser\"]),\n  },\n\n  mounted() {\n    this.calendarAccounts = !this.initialCalendarAccountsData\n      ? this.authUser.calendarAccounts\n      : this.initialCalendarAccountsData\n  },\n\n  methods: {\n    ...mapActions([\"showError\", \"showInfo\", \"refreshAuthUser\"]),\n    ...mapMutations([\"setAuthUser\"]),\n    addGoogleCalendar() {\n      signInGoogle({\n        state: {\n          type: this.toggleState\n            ? authTypes.ADD_CALENDAR_ACCOUNT_FROM_EDIT\n            : authTypes.ADD_CALENDAR_ACCOUNT,\n          eventId: this.eventId,\n          calendarType: calendarTypes.GOOGLE,\n        },\n        requestCalendarPermission: true,\n        selectAccount: true,\n      })\n    },\n    addedAppleCalendar() {\n      this.addCalendarAccountDialog = false\n      this.calendarAccounts = this.authUser.calendarAccounts\n    },\n    addOutlookCalendar() {\n      signInOutlook({\n        state: {\n          type: this.toggleState\n            ? authTypes.ADD_CALENDAR_ACCOUNT_FROM_EDIT\n            : authTypes.ADD_CALENDAR_ACCOUNT,\n          eventId: this.eventId,\n          calendarType: calendarTypes.OUTLOOK,\n        },\n        requestCalendarPermission: true,\n      })\n    },\n    openRemoveDialog(payload) {\n      this.removeDialog = true\n      this.removePayload = payload\n    },\n    removeAccount() {\n      _delete(`/user/remove-calendar-account`, this.removePayload)\n        .then(async () => {\n          // Remove calendar account locally\n          const calendarAccountKey = getCalendarAccountKey(\n            this.removePayload.email,\n            this.removePayload.calendarType\n          )\n          delete this.authUser.calendarAccounts[calendarAccountKey]\n          this.setAuthUser(this.authUser)\n\n          this.removeDialog = false\n        })\n        .catch((err) => {\n          console.error(err)\n          this.showError(\n            \"There was a problem removing this account! Please try again later.\"\n          )\n        })\n    },\n    toggleShowCalendars() {\n      this.showCalendars = !this.showCalendars\n      localStorage[\"showCalendars\"] = this.showCalendars\n    },\n  },\n\n  components: {\n    CalendarAccount,\n    CalendarTypeSelector,\n  },\n\n  watch: {\n    calendarEventsMap: {\n      immediate: true,\n      async handler() {\n        // Do a test request to calendarevents route to check if calendar access is allowed for each account\n        if (\n          !this.calendarEventsMap ||\n          Object.keys(this.calendarEventsMap).length === 0\n        ) {\n          const timeMin = new Date()\n          const timeMax = new Date()\n          try {\n            this.calendarEventsMapCopy = await get(\n              `/user/calendars?timeMin=${timeMin.toISOString()}&timeMax=${timeMax.toISOString()}`\n            )\n          } catch (err) {\n            console.error(err)\n          }\n        } else {\n          this.calendarEventsMapCopy = this.calendarEventsMap\n        }\n      },\n    },\n  },\n}\n</script>\n"],"mappings":"AA0FA,SAAAA,QAAA,EAAAC,UAAA,EAAAC,YAAA;AACA,SAAAC,SAAA,EAAAC,aAAA;AACA,SACAC,GAAA,EACAC,IAAA,EACAC,OAAA,EACAC,YAAA,EACAC,aAAA,EACAC,qBAAA,QACA;AACA,OAAAC,eAAA;AACA,OAAAC,oBAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACAC,WAAA;MAAAC,IAAA,EAAAC,OAAA;MAAAC,OAAA;IAAA;IAAA;IACAC,OAAA;MAAAH,IAAA,EAAAI,MAAA;MAAAF,OAAA;IAAA;IACAG,iBAAA;MAAAL,IAAA,EAAAM,MAAA;MAAAJ,OAAA,EAAAA,CAAA;IAAA;IAAA;IACAK,eAAA;MAAAP,IAAA,EAAAC,OAAA;MAAAC,OAAA;IAAA;IAAA;IACAM,uBAAA;MAAAR,IAAA,EAAAC,OAAA;MAAAC,OAAA;IAAA;IAAA;IACAO,2BAAA;MAAAT,IAAA,EAAAM,MAAA;MAAAJ,OAAA,EAAAA,CAAA;IAAA;IAAA;IACAQ,SAAA;MAAAV,IAAA,EAAAC,OAAA;MAAAC,OAAA;IAAA;EACA;EAEAS,IAAA,EAAAA,CAAA;IACAC,YAAA;IACAC,aAAA;IAEAC,wBAAA;IAEAC,gBAAA;IACAC,aAAA,EACAC,YAAA,qBAAAC,SAAA,GACA,OACAD,YAAA;IAEAE,qBAAA;EACA;EAEAC,QAAA;IACA,GAAApC,QAAA;EACA;EAEAqC,QAAA;IACA,KAAAN,gBAAA,SAAAN,2BAAA,GACA,KAAAa,QAAA,CAAAP,gBAAA,GACA,KAAAN,2BAAA;EACA;EAEAc,OAAA;IACA,GAAAtC,UAAA;IACA,GAAAC,YAAA;IACAsC,kBAAA;MACAhC,YAAA;QACAiC,KAAA;UACAzB,IAAA,OAAAD,WAAA,GACAZ,SAAA,CAAAuC,8BAAA,GACAvC,SAAA,CAAAwC,oBAAA;UACAxB,OAAA,OAAAA,OAAA;UACAyB,YAAA,EAAAxC,aAAA,CAAAyC;QACA;QACAC,yBAAA;QACAC,aAAA;MACA;IACA;IACAC,mBAAA;MACA,KAAAlB,wBAAA;MACA,KAAAC,gBAAA,QAAAO,QAAA,CAAAP,gBAAA;IACA;IACAkB,mBAAA;MACAxC,aAAA;QACAgC,KAAA;UACAzB,IAAA,OAAAD,WAAA,GACAZ,SAAA,CAAAuC,8BAAA,GACAvC,SAAA,CAAAwC,oBAAA;UACAxB,OAAA,OAAAA,OAAA;UACAyB,YAAA,EAAAxC,aAAA,CAAA8C;QACA;QACAJ,yBAAA;MACA;IACA;IACAK,iBAAAC,OAAA;MACA,KAAAxB,YAAA;MACA,KAAAC,aAAA,GAAAuB,OAAA;IACA;IACAC,cAAA;MACA9C,OAAA,uCAAAsB,aAAA,EACAyB,IAAA;QACA;QACA,MAAAC,kBAAA,GAAA7C,qBAAA,CACA,KAAAmB,aAAA,CAAA2B,KAAA,EACA,KAAA3B,aAAA,CAAAe,YACA;QACA,YAAAN,QAAA,CAAAP,gBAAA,CAAAwB,kBAAA;QACA,KAAAE,WAAA,MAAAnB,QAAA;QAEA,KAAAV,YAAA;MACA,GACA8B,KAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,KAAA,CAAAF,GAAA;QACA,KAAAG,SAAA,CACA,oEACA;MACA;IACA;IACAC,oBAAA;MACA,KAAA/B,aAAA,SAAAA,aAAA;MACAC,YAAA,yBAAAD,aAAA;IACA;EACA;EAEAgC,UAAA;IACArD,eAAA;IACAC;EACA;EAEAqD,KAAA;IACA5C,iBAAA;MACA6C,SAAA;MACA,MAAAC,QAAA;QACA;QACA,IACA,MAAA9C,iBAAA,IACAC,MAAA,CAAA8C,IAAA,MAAA/C,iBAAA,EAAAgD,MAAA,QACA;UACA,MAAAC,OAAA,OAAAC,IAAA;UACA,MAAAC,OAAA,OAAAD,IAAA;UACA;YACA,KAAApC,qBAAA,SAAA9B,GAAA,CACA,2BAAAiE,OAAA,CAAAG,WAAA,cAAAD,OAAA,CAAAC,WAAA,IACA;UACA,SAAAd,GAAA;YACAC,OAAA,CAAAC,KAAA,CAAAF,GAAA;UACA;QACA;UACA,KAAAxB,qBAAA,QAAAd,iBAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}