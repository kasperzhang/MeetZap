{"ast":null,"code":"export default {\n  name: \"Tooltip\",\n  props: {\n    content: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      position: {\n        x: 0,\n        y: 0\n      },\n      isVisible: false,\n      showTimeout: null\n    };\n  },\n  watch: {\n    content: {\n      handler(newContent) {\n        // Clear any existing timeout\n        if (this.showTimeout) {\n          clearTimeout(this.showTimeout);\n        }\n\n        // Hide tooltip immediately when content changes\n        this.isVisible = false;\n\n        // If there's new content, set a timeout to show it\n        if (newContent) {\n          this.showTimeout = setTimeout(() => {\n            this.isVisible = true;\n          }, 700);\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    handleMouseMove(e) {\n      this.position = {\n        x: e.clientX,\n        y: e.clientY - 30\n      };\n    },\n    handleMouseEnter() {\n      if (this.content) {\n        this.isVisible = true;\n      }\n    },\n    handleMouseLeave() {\n      this.isVisible = false;\n    }\n  },\n  mounted() {\n    if (this.$refs.tooltipTrigger) {\n      this.$refs.tooltipTrigger.addEventListener(\"mousemove\", this.handleMouseMove);\n      this.$refs.tooltipTrigger.addEventListener(\"mouseenter\", this.handleMouseEnter);\n      this.$refs.tooltipTrigger.addEventListener(\"mouseleave\", this.handleMouseLeave);\n    }\n  },\n  beforeDestroy() {\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout);\n    }\n    if (this.$refs.tooltipTrigger) {\n      this.$refs.tooltipTrigger.removeEventListener(\"mousemove\", this.handleMouseMove);\n      this.$refs.tooltipTrigger.removeEventListener(\"mouseenter\", this.handleMouseEnter);\n      this.$refs.tooltipTrigger.removeEventListener(\"mouseleave\", this.handleMouseLeave);\n    }\n  }\n};","map":{"version":3,"names":["name","props","content","type","String","default","data","position","x","y","isVisible","showTimeout","watch","handler","newContent","clearTimeout","setTimeout","immediate","methods","handleMouseMove","e","clientX","clientY","handleMouseEnter","handleMouseLeave","mounted","$refs","tooltipTrigger","addEventListener","beforeDestroy","removeEventListener"],"sources":["src/components/Tooltip.vue"],"sourcesContent":["<template>\n  <div class=\"tw-relative\" ref=\"tooltipTrigger\">\n    <slot></slot>\n    <div\n      v-if=\"isVisible && content\"\n      class=\"tw-pointer-events-none tw-fixed tw-z-50 tw-rounded-lg tw-bg-dark-gray tw-px-1.5 tw-py-1 tw-text-xs tw-text-white tw-shadow-lg tw-transition-opacity tw-duration-200\"\n      :style=\"{\n        left: `${position.x}px`,\n        top: `${position.y}px`,\n        transform: 'translate(-50%, -50%)',\n      }\"\n    >\n      {{ content }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Tooltip\",\n  props: {\n    content: {\n      type: String,\n      default: \"\",\n    },\n  },\n  data() {\n    return {\n      position: { x: 0, y: 0 },\n      isVisible: false,\n      showTimeout: null,\n    }\n  },\n  watch: {\n    content: {\n      handler(newContent) {\n        // Clear any existing timeout\n        if (this.showTimeout) {\n          clearTimeout(this.showTimeout)\n        }\n\n        // Hide tooltip immediately when content changes\n        this.isVisible = false\n\n        // If there's new content, set a timeout to show it\n        if (newContent) {\n          this.showTimeout = setTimeout(() => {\n            this.isVisible = true\n          }, 700)\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    handleMouseMove(e) {\n      this.position = {\n        x: e.clientX,\n        y: e.clientY - 30,\n      }\n    },\n    handleMouseEnter() {\n      if (this.content) {\n        this.isVisible = true\n      }\n    },\n    handleMouseLeave() {\n      this.isVisible = false\n    },\n  },\n  mounted() {\n    if (this.$refs.tooltipTrigger) {\n      this.$refs.tooltipTrigger.addEventListener(\n        \"mousemove\",\n        this.handleMouseMove\n      )\n      this.$refs.tooltipTrigger.addEventListener(\n        \"mouseenter\",\n        this.handleMouseEnter\n      )\n      this.$refs.tooltipTrigger.addEventListener(\n        \"mouseleave\",\n        this.handleMouseLeave\n      )\n    }\n  },\n  beforeDestroy() {\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout)\n    }\n    if (this.$refs.tooltipTrigger) {\n      this.$refs.tooltipTrigger.removeEventListener(\n        \"mousemove\",\n        this.handleMouseMove\n      )\n      this.$refs.tooltipTrigger.removeEventListener(\n        \"mouseenter\",\n        this.handleMouseEnter\n      )\n      this.$refs.tooltipTrigger.removeEventListener(\n        \"mouseleave\",\n        this.handleMouseLeave\n      )\n    }\n  },\n}\n</script>\n"],"mappings":"AAkBA;EACAA,IAAA;EACAC,KAAA;IACAC,OAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,QAAA;QAAAC,CAAA;QAAAC,CAAA;MAAA;MACAC,SAAA;MACAC,WAAA;IACA;EACA;EACAC,KAAA;IACAV,OAAA;MACAW,QAAAC,UAAA;QACA;QACA,SAAAH,WAAA;UACAI,YAAA,MAAAJ,WAAA;QACA;;QAEA;QACA,KAAAD,SAAA;;QAEA;QACA,IAAAI,UAAA;UACA,KAAAH,WAAA,GAAAK,UAAA;YACA,KAAAN,SAAA;UACA;QACA;MACA;MACAO,SAAA;IACA;EACA;EACAC,OAAA;IACAC,gBAAAC,CAAA;MACA,KAAAb,QAAA;QACAC,CAAA,EAAAY,CAAA,CAAAC,OAAA;QACAZ,CAAA,EAAAW,CAAA,CAAAE,OAAA;MACA;IACA;IACAC,iBAAA;MACA,SAAArB,OAAA;QACA,KAAAQ,SAAA;MACA;IACA;IACAc,iBAAA;MACA,KAAAd,SAAA;IACA;EACA;EACAe,QAAA;IACA,SAAAC,KAAA,CAAAC,cAAA;MACA,KAAAD,KAAA,CAAAC,cAAA,CAAAC,gBAAA,CACA,aACA,KAAAT,eACA;MACA,KAAAO,KAAA,CAAAC,cAAA,CAAAC,gBAAA,CACA,cACA,KAAAL,gBACA;MACA,KAAAG,KAAA,CAAAC,cAAA,CAAAC,gBAAA,CACA,cACA,KAAAJ,gBACA;IACA;EACA;EACAK,cAAA;IACA,SAAAlB,WAAA;MACAI,YAAA,MAAAJ,WAAA;IACA;IACA,SAAAe,KAAA,CAAAC,cAAA;MACA,KAAAD,KAAA,CAAAC,cAAA,CAAAG,mBAAA,CACA,aACA,KAAAX,eACA;MACA,KAAAO,KAAA,CAAAC,cAAA,CAAAG,mBAAA,CACA,cACA,KAAAP,gBACA;MACA,KAAAG,KAAA,CAAAC,cAAA,CAAAG,mBAAA,CACA,cACA,KAAAN,gBACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}