{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { eventTypes, dayIndexToDayString, authTypes } from \"@/constants\";\nimport { post, put, timeNumToTimeString, dateToTimeNum, getISODateString, isPhone, signInGoogle, getDateWithTimezone, getTimeOptions, addEventToCreatedList } from \"@/utils\";\nimport { mapActions, mapState } from \"vuex\";\nimport TimezoneSelector from \"./schedule_overlap/TimezoneSelector.vue\";\nimport HelpDialog from \"./HelpDialog.vue\";\nimport EmailInput from \"./event/EmailInput.vue\";\nimport DatePicker from \"@/components/DatePicker.vue\";\nimport SlideToggle from \"./SlideToggle.vue\";\nimport AlertText from \"@/components/AlertText.vue\";\nimport OverflowGradient from \"@/components/OverflowGradient.vue\";\nimport { guestUserId } from \"@/constants\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport utcPlugin from \"dayjs/plugin/utc\";\nimport timezonePlugin from \"dayjs/plugin/timezone\";\nimport ExpandableSection from \"./ExpandableSection.vue\";\ndayjs.extend(utcPlugin);\ndayjs.extend(timezonePlugin);\nexport default {\n  name: \"NewEvent\",\n  emits: [\"input\"],\n  props: {\n    event: {\n      type: Object\n    },\n    edit: {\n      type: Boolean,\n      default: false\n    },\n    dialog: {\n      type: Boolean,\n      default: true\n    },\n    contactsPayload: {\n      type: Object,\n      default: () => ({})\n    },\n    showHelp: {\n      type: Boolean,\n      default: false\n    },\n    folderId: {\n      type: String,\n      default: null\n    }\n  },\n  components: {\n    TimezoneSelector,\n    HelpDialog,\n    EmailInput,\n    DatePicker,\n    SlideToggle,\n    ExpandableSection,\n    AlertText,\n    OverflowGradient\n  },\n  data: () => ({\n    formValid: true,\n    name: \"\",\n    startTime: 9,\n    endTime: 17,\n    // Deleted specificTimesEnabled (feature removed, only one time range is supported)\n    loading: false,\n    selectedDays: [],\n    // Deleted selectedDaysOfWeek, startOnMonday (feature removed, only 'Dates and times' is supported)\n    notificationsEnabled: true,\n    // Deleted daysOnly, daysOnlyOptions, dateOptions, selectedDateOption (feature removed, only 'Dates and times' is supported)\n\n    // Email reminders\n    showEmailReminders: false,\n    emails: [],\n    // For email reminders\n\n    // Advanced options\n    showAdvancedOptions: false,\n    timeIncrement: 15,\n    collectEmails: false,\n    blindAvailabilityEnabled: false,\n    timezone: {},\n    sendEmailAfterXResponsesEnabled: false,\n    sendEmailAfterXResponses: 3,\n    helpDialog: false,\n    // Unsaved changes\n    initialEventData: {},\n    hasMounted: false\n  }),\n  mounted() {\n    if (Object.keys(this.contactsPayload).length > 0) {\n      this.toggleEmailReminders(true);\n\n      /** Get previously filled out data after enabling contacts  */\n      this.name = this.contactsPayload.name;\n      this.startTime = this.contactsPayload.startTime;\n      this.endTime = this.contactsPayload.endTime;\n      // Deleted daysOnly, selectedDateOption, selectedDaysOfWeek (feature removed)\n      this.selectedDays = this.contactsPayload.selectedDays;\n      this.notificationsEnabled = this.contactsPayload.notificationsEnabled;\n      this.timezone = this.contactsPayload.timezone;\n      // Deleted specificTimesEnabled (feature removed)\n\n      this.$refs.form.resetValidation();\n    }\n    this.$nextTick(() => {\n      this.hasMounted = true;\n    });\n  },\n  computed: {\n    ...mapState([\"authUser\"]),\n    // Deleted daysOnlyEnabled (feature removed)\n    nameRules() {\n      return [v => !!v || \"事件名称是必需填写的噢\"];\n    },\n    selectedDaysRules() {\n      return [selectedDays => selectedDays.length > 0 || \"请至少选择一个日期\"];\n    },\n    addedEmails() {\n      if (Object.keys(this.contactsPayload).length > 0) return this.contactsPayload.emails;\n      return this.event && this.event.remindees ? this.event.remindees.map(r => r.email) : [];\n    },\n    times() {\n      return getTimeOptions();\n    },\n    minCalendarDate() {\n      if (this.edit) {\n        return \"\";\n      }\n      let today = new Date();\n      let dd = String(today.getDate()).padStart(2, \"0\");\n      let mm = String(today.getMonth() + 1).padStart(2, \"0\");\n      let yyyy = today.getFullYear();\n      return yyyy + \"-\" + mm + \"-\" + dd;\n    },\n    isPhone() {\n      return isPhone(this.$vuetify);\n    },\n    guestEvent() {\n      return this.event && this.event.ownerId == guestUserId;\n    },\n    timeIncrementItems() {\n      return [{\n        text: \"15 min\",\n        value: 15\n      }, {\n        text: \"30 min\",\n        value: 30\n      }, {\n        text: \"60 min\",\n        value: 60\n      }];\n    }\n  },\n  methods: {\n    ...mapActions([\"showError\", \"setEventFolder\"]),\n    blurNameField() {\n      this.$refs[\"name-field\"].blur();\n    },\n    reset() {\n      this.name = \"\";\n      this.startTime = 9;\n      this.endTime = 17;\n      this.specificTimesEnabled = false;\n      this.selectedDays = [];\n      this.selectedDaysOfWeek = [];\n      this.notificationsEnabled = true;\n      this.daysOnly = false;\n      this.selectedDateOption = \"Specific dates\";\n      this.emails = [];\n      this.showAdvancedOptions = false;\n      this.blindAvailabilityEnabled = false;\n      this.sendEmailAfterXResponsesEnabled = false;\n      this.sendEmailAfterXResponses = 3;\n      this.collectEmails = false;\n      this.$refs.form.resetValidation();\n    },\n    submit() {\n      if (!this.$refs.form.validate()) return;\n      this.selectedDays.sort();\n\n      // Get duration of event\n      let duration = this.endTime - this.startTime;\n      if (duration <= 0) duration += 24;\n\n      // Get date objects for each selected day\n      let dates = [];\n      let type = eventTypes.SPECIFIC_DATES;\n      const startTimeString = timeNumToTimeString(this.startTime);\n      for (const day of this.selectedDays) {\n        const date = dayjs.tz(`${day} ${startTimeString}`, this.timezone.value);\n        dates.push(date.toDate());\n      }\n      this.loading = true;\n      const payload = {\n        name: this.name,\n        duration: duration,\n        dates: dates,\n        hasSpecificTimes: this.specificTimesEnabled,\n        notificationsEnabled: !this.authUser ? false : this.notificationsEnabled,\n        blindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        remindees: this.emails,\n        type: type,\n        sendEmailAfterXResponses: this.sendEmailAfterXResponsesEnabled ? parseInt(this.sendEmailAfterXResponses) : -1,\n        collectEmails: this.collectEmails,\n        timeIncrement: this.timeIncrement,\n        creatorPosthogId: this.$posthog?.get_distinct_id()\n      };\n      const posthogPayload = {\n        eventName: this.name,\n        eventDuration: duration,\n        eventDates: JSON.stringify(dates),\n        eventHasSpecificTimes: this.specificTimesEnabled,\n        eventNotificationsEnabled: !this.authUser ? false : this.notificationsEnabled,\n        eventBlindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        eventRemindees: this.emails,\n        eventType: type,\n        eventSendEmailAfterXResponses: this.sendEmailAfterXResponsesEnabled ? parseInt(this.sendEmailAfterXResponses) : -1,\n        eventCollectEmails: this.collectEmails,\n        eventTimeIncrement: this.timeIncrement\n      };\n      if (!this.edit) {\n        // Create new event on backend\n        post(\"/events\", payload).then(async ({\n          eventId,\n          shortId\n        }) => {\n          await this.setEventFolder({\n            eventId,\n            folderId: this.folderId\n          });\n          this.$router.push({\n            name: \"event\",\n            params: {\n              eventId: shortId ?? eventId,\n              initialTimezone: this.timezone\n            }\n          });\n          this.$emit(\"input\", false);\n          this.reset();\n          posthogPayload.eventId = eventId;\n          this.$posthog?.capture(\"Event created\", posthogPayload);\n          if (!this.authUser) {\n            // Add eventId to localStorage, so the user can claim it later\n            addEventToCreatedList(eventId);\n          }\n        }).catch(err => {\n          this.showError(\"There was a problem creating that event! Please try again later.\");\n          console.error(err);\n        }).finally(() => {\n          this.loading = false;\n        });\n      } else {\n        // Edit event on backend\n        if (this.event) {\n          put(`/events/${this.event._id}`, payload).then(() => {\n            posthogPayload.eventId = this.event._id;\n            this.$posthog?.capture(\"Event edited\", posthogPayload);\n\n            // this.$emit(\"input\", false)\n            // this.reset()\n            localStorage.setItem(`from-edit-event-${this.event._id}`, \"true\");\n            window.location.reload();\n          }).catch(err => {\n            this.showError(\"There was a problem editing this event! Please try again later.\");\n            console.log(err);\n          }).finally(() => {\n            this.loading = false;\n          });\n        }\n      }\n    },\n    toggleEmailReminders(delayed = false) {\n      if (delayed) {\n        setTimeout(() => this.showEmailReminders = !this.showEmailReminders, 300);\n      } else {\n        this.showEmailReminders = !this.showEmailReminders;\n      }\n    },\n    /** Redirects user to oauth page requesting access to the user's contacts */\n    requestContactsAccess({\n      emails\n    }) {\n      const payload = {\n        emails,\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        selectedDays: this.selectedDays,\n        notificationsEnabled: this.notificationsEnabled,\n        timezone: this.timezone\n      };\n      signInGoogle({\n        state: {\n          type: authTypes.EVENT_CONTACTS,\n          eventId: this.event ? this.event.shortId ?? this.event._id : \"\",\n          openNewGroup: false,\n          payload\n        },\n        requestContactsPermission: true\n      });\n    },\n    /** Update state based on the contactsPayload after granting contacts access */\n    contactsAccessGranted({\n      curScheduledEvent,\n      ...data\n    }) {\n      this.curScheduledEvent = curScheduledEvent;\n      this.$refs.confirmDetailsDialog?.setData(data);\n      this.confirmDetailsDialog = true;\n    },\n    /** Populates the form fields based on this.event */\n    updateFieldsFromEvent() {\n      if (this.event) {\n        this.name = this.event.name;\n\n        // Set start time, accounting for the timezone\n        this.startTime = Math.floor(dateToTimeNum(getDateWithTimezone(this.event.dates[0]), true));\n        this.startTime %= 24;\n        this.endTime = (this.startTime + this.event.duration) % 24;\n        this.notificationsEnabled = this.event.notificationsEnabled;\n        this.blindAvailabilityEnabled = this.event.blindAvailabilityEnabled;\n        // Deleted specificTimesEnabled (feature removed)\n\n        if (this.event.dates && this.event.dates.length > 0) {\n          // Only support SPECIFIC_DATES\n          this.selectedDays = this.event.dates.map(date => getISODateString(getDateWithTimezone(date)));\n        }\n      }\n    },\n    resetToEventData() {\n      this.updateFieldsFromEvent();\n      this.$refs.emailInput.reset();\n    },\n    setInitialEventData() {\n      this.initialEventData = {\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        // Deleted specificTimesEnabled (feature removed)\n        selectedDays: this.selectedDays,\n        notificationsEnabled: this.notificationsEnabled,\n        emails: [...this.emails],\n        blindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        sendEmailAfterXResponsesEnabled: this.sendEmailAfterXResponsesEnabled,\n        sendEmailAfterXResponses: this.sendEmailAfterXResponses,\n        timeIncrement: this.timeIncrement\n      };\n    },\n    hasEventBeenEdited() {\n      return this.name !== this.initialEventData.name || this.startTime !== this.initialEventData.startTime || this.endTime !== this.initialEventData.endTime ||\n      // Deleted specificTimesEnabled comparison (feature removed)\n      JSON.stringify(this.selectedDays) !== JSON.stringify(this.initialEventData.selectedDays) || this.notificationsEnabled !== this.initialEventData.notificationsEnabled || JSON.stringify(this.emails) !== JSON.stringify(this.initialEventData.emails) || this.blindAvailabilityEnabled !== this.initialEventData.blindAvailabilityEnabled || this.sendEmailAfterXResponsesEnabled !== this.initialEventData.sendEmailAfterXResponsesEnabled || this.sendEmailAfterXResponses !== this.initialEventData.sendEmailAfterXResponses;\n    },\n    trackTimezoneChange(newTimezone) {\n      this.$posthog?.capture(\"timezone_selected_in_new_event_dialog\", {\n        timezone: newTimezone?.value\n      });\n    }\n  },\n  watch: {\n    event: {\n      immediate: true,\n      handler() {\n        this.updateFieldsFromEvent();\n        this.setInitialEventData();\n      }\n    }\n  }\n};","map":{"version":3,"names":["eventTypes","dayIndexToDayString","authTypes","post","put","timeNumToTimeString","dateToTimeNum","getISODateString","isPhone","signInGoogle","getDateWithTimezone","getTimeOptions","addEventToCreatedList","mapActions","mapState","TimezoneSelector","HelpDialog","EmailInput","DatePicker","SlideToggle","AlertText","OverflowGradient","guestUserId","moment","dayjs","utcPlugin","timezonePlugin","ExpandableSection","extend","name","emits","props","event","type","Object","edit","Boolean","default","dialog","contactsPayload","showHelp","folderId","String","components","data","formValid","startTime","endTime","loading","selectedDays","notificationsEnabled","showEmailReminders","emails","showAdvancedOptions","timeIncrement","collectEmails","blindAvailabilityEnabled","timezone","sendEmailAfterXResponsesEnabled","sendEmailAfterXResponses","helpDialog","initialEventData","hasMounted","mounted","keys","length","toggleEmailReminders","$refs","form","resetValidation","$nextTick","computed","nameRules","v","selectedDaysRules","addedEmails","remindees","map","r","email","times","minCalendarDate","today","Date","dd","getDate","padStart","mm","getMonth","yyyy","getFullYear","$vuetify","guestEvent","ownerId","timeIncrementItems","text","value","methods","blurNameField","blur","reset","specificTimesEnabled","selectedDaysOfWeek","daysOnly","selectedDateOption","submit","validate","sort","duration","dates","SPECIFIC_DATES","startTimeString","day","date","tz","push","toDate","payload","hasSpecificTimes","authUser","parseInt","creatorPosthogId","$posthog","get_distinct_id","posthogPayload","eventName","eventDuration","eventDates","JSON","stringify","eventHasSpecificTimes","eventNotificationsEnabled","eventBlindAvailabilityEnabled","eventRemindees","eventType","eventSendEmailAfterXResponses","eventCollectEmails","eventTimeIncrement","then","eventId","shortId","setEventFolder","$router","params","initialTimezone","$emit","capture","catch","err","showError","console","error","finally","_id","localStorage","setItem","window","location","reload","log","delayed","setTimeout","requestContactsAccess","state","EVENT_CONTACTS","openNewGroup","requestContactsPermission","contactsAccessGranted","curScheduledEvent","confirmDetailsDialog","setData","updateFieldsFromEvent","Math","floor","resetToEventData","emailInput","setInitialEventData","hasEventBeenEdited","trackTimezoneChange","newTimezone","watch","immediate","handler"],"sources":["src/components/NewEvent.vue"],"sourcesContent":["<template>\n  <v-card\n    :flat=\"dialog\"\n    :class=\"{ 'tw-py-4': !dialog, 'tw-flex-1': dialog }\"\n    class=\"tw-relative tw-flex tw-max-w-[28rem] tw-flex-col tw-overflow-hidden tw-rounded-lg tw-transition-all\"\n  >\n    <v-card-title class=\"tw-mb-2 tw-flex tw-gap-2 tw-px-4 sm:tw-px-8\">\n      <div>\n        <div class=\"tw-mb-1\">\n          {{ edit ? \"Edit event\" : \"创建事件\" }}\n        </div>\n        <div\n          v-if=\"dialog && showHelp\"\n          class=\"tw-text-xs tw-font-normal tw-italic tw-text-dark-gray\"\n        >\n          Ideal for one-time / recurring meetings\n        </div>\n      </div>\n      <v-spacer />\n      <template v-if=\"dialog\">\n        <v-btn v-if=\"showHelp\" icon @click=\"helpDialog = true\">\n          <v-icon>mdi-information-outline</v-icon>\n        </v-btn>\n        <v-btn v-else @click=\"$emit('input', false)\" icon>\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n        <HelpDialog v-model=\"helpDialog\">\n          <template v-slot:header>Events</template>\n          <div class=\"tw-mb-4\">\n            Use events to collect people's availabilities and compare them\n            across certain days.\n          </div>\n        </HelpDialog>\n      </template>\n    </v-card-title>\n    <v-card-text\n      ref=\"cardText\"\n      class=\"tw-relative tw-flex-1 tw-overflow-auto tw-px-4 tw-py-1 sm:tw-px-8\"\n    >\n      <AlertText v-if=\"edit && event?.ownerId == 0\" class=\"tw-mb-4\">\n        Anybody can edit this event because it was created while not signed in\n      </AlertText>\n      <v-form\n        ref=\"form\"\n        v-model=\"formValid\"\n        lazy-validation\n        class=\"tw-flex tw-flex-col tw-gap-y-6\"\n        :disabled=\"loading\"\n      >\n        <v-text-field\n          ref=\"name-field\"\n          v-model=\"name\"\n          placeholder=\"事件名称...\"\n          hide-details=\"auto\"\n          solo\n          @keyup.enter=\"blurNameField\"\n          :rules=\"nameRules\"\n          autofocus\n          required\n        />\n\n        <!-- Deleted SlideToggle for 'Date Only'/'Dates and times' selection (feature removed) -->\n\n        <div>\n          <v-expand-transition>\n            <div v-if=\"!daysOnly\">\n              <div class=\"tw-mb-2 tw-text-lg tw-text-black\">\n                会议可能的时间\n              </div>\n              <v-expand-transition>\n                <div v-if=\"!specificTimesEnabled\">\n                  <div\n                    class=\"tw-mb-2 tw-flex tw-items-baseline tw-justify-center tw-space-x-2\"\n                  >\n                    <v-select\n                      :value=\"startTime\"\n                      @input=\"(t) => (startTime = t.time)\"\n                      menu-props=\"auto\"\n                      :items=\"times\"\n                      return-object\n                      hide-details\n                      solo\n                    ></v-select>\n                    <div>to</div>\n                    <v-select\n                      :value=\"endTime\"\n                      @input=\"(t) => (endTime = t.time)\"\n                      menu-props=\"auto\"\n                      :items=\"times\"\n                      return-object\n                      hide-details\n                      solo\n                    ></v-select>\n                  </div>\n                </div>\n              </v-expand-transition>\n              <div class=\"tw-mb-2\">\n                <!-- Deleted v-checkbox and all UI for 'Set specific times per day' (feature removed) -->\n              </div>\n            </div>\n          </v-expand-transition>\n\n          <div class=\"tw-mb-2 tw-text-lg tw-text-black\">\n            请选择日期\n          </div>\n          <!-- Deleted v-select for dateOptions (feature removed, only 'Dates and times' is allowed) -->\n\n          <v-expand-transition>\n            <div>\n              <div class=\"tw-mb-2 tw-text-xs tw-text-dark-gray\">\n                Drag to select multiple dates\n              </div>\n              <v-input\n                v-model=\"selectedDays\"\n                hide-details=\"auto\"\n                :rules=\"selectedDaysRules\"\n                key=\"date-picker\"\n              >\n                <DatePicker\n                  v-model=\"selectedDays\"\n                  :minCalendarDate=\"minCalendarDate\"\n                />\n              </v-input>\n            </div>\n            <!-- Deleted 'Days of the week' selection (feature removed, only specific dates allowed) -->\n          </v-expand-transition>\n        </div>\n\n        <!-- Deleted all UI for 'Email me each time someone joins my event' notification feature (feature removed) -->\n\n        <div class=\"tw-flex tw-flex-col tw-gap-2\">\n          <ExpandableSection\n            v-if=\"authUser && !guestEvent\"\n            label=\"Email reminders\"\n            v-model=\"showEmailReminders\"\n            :auto-scroll=\"dialog\"\n          >\n            <div class=\"tw-flex tw-flex-col tw-gap-5 tw-pt-2\">\n              <EmailInput\n                v-show=\"authUser\"\n                ref=\"emailInput\"\n                @requestContactsAccess=\"requestContactsAccess\"\n                labelColor=\"tw-text-very-dark-gray\"\n                :addedEmails=\"addedEmails\"\n                @update:emails=\"(newEmails) => (emails = newEmails)\"\n              >\n                <template v-slot:header>\n                  <div class=\"tw-flex tw-gap-1\">\n                    <div class=\"tw-text-very-dark-gray\">\n                      Remind people to fill out the event\n                    </div>\n\n                    <v-tooltip\n                      top\n                      content-class=\"tw-bg-very-dark-gray tw-shadow-lg tw-opacity-100 tw-py-4\"\n                    >\n                      <template v-slot:activator=\"{ on, attrs }\">\n                        <v-icon small v-bind=\"attrs\" v-on=\"on\"\n                          >mdi-information-outline\n                        </v-icon>\n                      </template>\n                      <div>\n                        Reminder emails will be sent the day of event\n                        creation,<br />one day after, and three days after. You\n                        will also receive <br />an email when everybody has\n                        filled out the event.\n                      </div>\n                    </v-tooltip>\n                  </div>\n                </template>\n              </EmailInput>\n            </div>\n          </ExpandableSection>\n\n          <ExpandableSection\n            v-model=\"showAdvancedOptions\"\n            label=\"Advanced options\"\n            :auto-scroll=\"dialog\"\n          >\n            <div class=\"tw-flex tw-flex-col tw-gap-5 tw-pt-2\">\n              <div v-if=\"!edit\" class=\"tw-flex tw-items-center tw-gap-x-2\">\n                <div class=\"tw-text-sm tw-text-black\">Time increment:</div>\n                <v-select\n                  v-model=\"timeIncrement\"\n                  dense\n                  class=\"-tw-mt-[2px] tw-w-24 tw-grow-0 tw-text-sm\"\n                  menu-props=\"auto\"\n                  hide-details\n                  :items=\"timeIncrementItems\"\n                ></v-select>\n              </div>\n              <v-checkbox\n                v-if=\"authUser && !guestEvent\"\n                v-model=\"collectEmails\"\n                hide-details\n              >\n                <template v-slot:label>\n                  <span class=\"tw-text-sm tw-text-black\">\n                    Collect respondents' email addresses\n                  </span>\n                </template>\n                <template v-slot:message=\"{ key, message }\">\n                  <div\n                    class=\"-tw-mt-1 tw-ml-[32px] tw-text-xs tw-text-dark-gray\"\n                  >\n                    {{ message }}\n                  </div>\n                </template>\n              </v-checkbox>\n              <v-checkbox\n                v-else-if=\"!guestEvent\"\n                disabled\n                messages=\"test\"\n                off-icon=\"mdi-checkbox-blank-off-outline\"\n              >\n                <template v-slot:label>\n                  <span class=\"tw-text-sm\"\n                    >Collect respondents' email addresses</span\n                  >\n                </template>\n                <template v-slot:message=\"{ key, message }\">\n                  <div\n                    class=\"tw-pointer-events-auto -tw-mt-1 tw-ml-[32px] tw-text-xs tw-text-dark-gray\"\n                  >\n                    <span class=\"tw-font-medium tw-text-very-dark-gray\"\n                      ><a @click=\"$emit('signIn')\">Sign in</a>\n                      to use this feature\n                    </span>\n                  </div>\n                </template>\n              </v-checkbox>\n              <v-checkbox\n                v-if=\"authUser && !guestEvent\"\n                v-model=\"blindAvailabilityEnabled\"\n                messages=\"Only show responses to event creator\"\n              >\n                <template v-slot:label>\n                  <span class=\"tw-text-sm tw-text-black\">\n                    Hide responses from respondents\n                  </span>\n                </template>\n                <template v-slot:message=\"{ key, message }\">\n                  <div\n                    class=\"-tw-mt-1 tw-ml-[32px] tw-text-xs tw-text-dark-gray\"\n                  >\n                    {{ message }}\n                  </div>\n                </template>\n              </v-checkbox>\n              <v-checkbox\n                v-else-if=\"!guestEvent\"\n                disabled\n                messages=\"Only show responses to event creator. \"\n                off-icon=\"mdi-checkbox-blank-off-outline\"\n              >\n                <template v-slot:label>\n                  <span class=\"tw-text-sm\"\n                    >Hide responses from respondents</span\n                  >\n                </template>\n                <template v-slot:message=\"{ key, message }\">\n                  <div\n                    class=\"tw-pointer-events-auto -tw-mt-1 tw-ml-[32px] tw-text-xs tw-text-dark-gray\"\n                  >\n                    {{ message }}\n                    <span class=\"tw-font-medium tw-text-very-dark-gray\"\n                      ><a @click=\"$emit('signIn')\">Sign in</a>\n                      to use this feature\n                    </span>\n                  </div>\n                </template>\n              </v-checkbox>\n              <v-checkbox\n                v-if=\"authUser && !guestEvent\"\n                v-model=\"sendEmailAfterXResponsesEnabled\"\n                hide-details\n              >\n                <template v-slot:label>\n                  <div\n                    :class=\"!sendEmailAfterXResponsesEnabled && 'tw-opacity-50'\"\n                    class=\"tw-flex tw-items-center tw-gap-x-2 tw-text-sm tw-text-very-dark-gray\"\n                  >\n                    <div>Email me after</div>\n                    <v-text-field\n                      v-model=\"sendEmailAfterXResponses\"\n                      @click=\"\n                        (e) => {\n                          e.preventDefault()\n                          e.stopPropagation()\n                        }\n                      \"\n                      :disabled=\"!sendEmailAfterXResponsesEnabled\"\n                      dense\n                      class=\"email-me-after-text-field -tw-mt-[2px] tw-w-10\"\n                      menu-props=\"auto\"\n                      hide-details\n                      type=\"number\"\n                      min=\"1\"\n                    ></v-text-field>\n                    <div>responses</div>\n                  </div>\n                </template>\n              </v-checkbox>\n              <TimezoneSelector\n                v-model=\"timezone\"\n                label=\"Timezone\"\n                @input=\"trackTimezoneChange\"\n              />\n            </div>\n          </ExpandableSection>\n        </div>\n      </v-form>\n    </v-card-text>\n    <v-card-actions class=\"tw-relative tw-px-4 sm:tw-px-8\">\n      <div class=\"tw-relative tw-w-full\">\n        <v-btn\n          :disabled=\"!formValid\"\n          block\n          :loading=\"loading\"\n          color=\"primary\"\n          class=\"tw-mt-4 tw-bg-green\"\n          @click=\"submit\"\n        >\n          {{\n            specificTimesEnabled ? \"Next\" : edit ? \"Save edits\" : \"Create event\"\n          }}\n        </v-btn>\n        <div\n          :class=\"formValid ? 'tw-invisible' : 'tw-visible'\"\n          class=\"tw-mt-1 tw-text-xs tw-text-red\"\n        >\n          Please fix form errors before continuing\n        </div>\n      </div>\n    </v-card-actions>\n\n    <OverflowGradient\n      v-if=\"hasMounted\"\n      :scrollContainer=\"$refs.cardText\"\n      class=\"tw-bottom-[90px]\"\n    />\n  </v-card>\n</template>\n\n<style>\n.email-me-after-text-field input {\n  padding: 0px !important;\n}\n</style>\n\n<script>\nimport { eventTypes, dayIndexToDayString, authTypes } from \"@/constants\"\nimport {\n  post,\n  put,\n  timeNumToTimeString,\n  dateToTimeNum,\n  getISODateString,\n  isPhone,\n  signInGoogle,\n  getDateWithTimezone,\n  getTimeOptions,\n  addEventToCreatedList,\n} from \"@/utils\"\nimport { mapActions, mapState } from \"vuex\"\nimport TimezoneSelector from \"./schedule_overlap/TimezoneSelector.vue\"\nimport HelpDialog from \"./HelpDialog.vue\"\nimport EmailInput from \"./event/EmailInput.vue\"\nimport DatePicker from \"@/components/DatePicker.vue\"\nimport SlideToggle from \"./SlideToggle.vue\"\nimport AlertText from \"@/components/AlertText.vue\"\nimport OverflowGradient from \"@/components/OverflowGradient.vue\"\nimport { guestUserId } from \"@/constants\"\nimport moment from \"moment\"\n\nimport dayjs from \"dayjs\"\nimport utcPlugin from \"dayjs/plugin/utc\"\nimport timezonePlugin from \"dayjs/plugin/timezone\"\nimport ExpandableSection from \"./ExpandableSection.vue\"\ndayjs.extend(utcPlugin)\ndayjs.extend(timezonePlugin)\n\nexport default {\n  name: \"NewEvent\",\n\n  emits: [\"input\"],\n\n  props: {\n    event: { type: Object },\n    edit: { type: Boolean, default: false },\n    dialog: { type: Boolean, default: true },\n    contactsPayload: { type: Object, default: () => ({}) },\n    showHelp: { type: Boolean, default: false },\n    folderId: { type: String, default: null },\n  },\n\n  components: {\n    TimezoneSelector,\n    HelpDialog,\n    EmailInput,\n    DatePicker,\n    SlideToggle,\n    ExpandableSection,\n    AlertText,\n    OverflowGradient,\n  },\n\n  data: () => ({\n    formValid: true,\n    name: \"\",\n    startTime: 9,\n    endTime: 17,\n    // Deleted specificTimesEnabled (feature removed, only one time range is supported)\n    loading: false,\n    selectedDays: [],\n    // Deleted selectedDaysOfWeek, startOnMonday (feature removed, only 'Dates and times' is supported)\n    notificationsEnabled: true,\n\n    // Deleted daysOnly, daysOnlyOptions, dateOptions, selectedDateOption (feature removed, only 'Dates and times' is supported)\n\n    // Email reminders\n    showEmailReminders: false,\n    emails: [], // For email reminders\n\n    // Advanced options\n    showAdvancedOptions: false,\n    timeIncrement: 15,\n    collectEmails: false,\n    blindAvailabilityEnabled: false,\n    timezone: {},\n    sendEmailAfterXResponsesEnabled: false,\n    sendEmailAfterXResponses: 3,\n\n    helpDialog: false,\n\n    // Unsaved changes\n    initialEventData: {},\n\n    hasMounted: false,\n  }),\n\n  mounted() {\n    if (Object.keys(this.contactsPayload).length > 0) {\n      this.toggleEmailReminders(true)\n\n      /** Get previously filled out data after enabling contacts  */\n      this.name = this.contactsPayload.name\n      this.startTime = this.contactsPayload.startTime\n      this.endTime = this.contactsPayload.endTime\n      // Deleted daysOnly, selectedDateOption, selectedDaysOfWeek (feature removed)\n      this.selectedDays = this.contactsPayload.selectedDays\n      this.notificationsEnabled = this.contactsPayload.notificationsEnabled\n      this.timezone = this.contactsPayload.timezone\n      // Deleted specificTimesEnabled (feature removed)\n\n      this.$refs.form.resetValidation()\n    }\n\n    this.$nextTick(() => {\n      this.hasMounted = true\n    })\n  },\n\n  computed: {\n    ...mapState([\"authUser\"]), // Deleted daysOnlyEnabled (feature removed)\n    nameRules() {\n      return [(v) => !!v || \"事件名称是必需填写的噢\"]\n    },\n    selectedDaysRules() {\n      return [\n        (selectedDays) =>\n          selectedDays.length > 0 || \"请至少选择一个日期\",\n      ]\n    },\n    addedEmails() {\n      if (Object.keys(this.contactsPayload).length > 0)\n        return this.contactsPayload.emails\n      return this.event && this.event.remindees\n        ? this.event.remindees.map((r) => r.email)\n        : []\n    },\n    times() {\n      return getTimeOptions()\n    },\n    minCalendarDate() {\n      if (this.edit) {\n        return \"\"\n      }\n\n      let today = new Date()\n      let dd = String(today.getDate()).padStart(2, \"0\")\n      let mm = String(today.getMonth() + 1).padStart(2, \"0\")\n      let yyyy = today.getFullYear()\n\n      return yyyy + \"-\" + mm + \"-\" + dd\n    },\n    isPhone() {\n      return isPhone(this.$vuetify)\n    },\n    guestEvent() {\n      return this.event && this.event.ownerId == guestUserId\n    },\n    timeIncrementItems() {\n      return [\n        { text: \"15 min\", value: 15 },\n        { text: \"30 min\", value: 30 },\n        { text: \"60 min\", value: 60 },\n      ]\n    },\n  },\n\n  methods: {\n    ...mapActions([\"showError\", \"setEventFolder\"]),\n    blurNameField() {\n      this.$refs[\"name-field\"].blur()\n    },\n    reset() {\n      this.name = \"\"\n      this.startTime = 9\n      this.endTime = 17\n      this.specificTimesEnabled = false\n      this.selectedDays = []\n      this.selectedDaysOfWeek = []\n      this.notificationsEnabled = true\n      this.daysOnly = false\n      this.selectedDateOption = \"Specific dates\"\n      this.emails = []\n      this.showAdvancedOptions = false\n      this.blindAvailabilityEnabled = false\n      this.sendEmailAfterXResponsesEnabled = false\n      this.sendEmailAfterXResponses = 3\n      this.collectEmails = false\n\n      this.$refs.form.resetValidation()\n    },\n    submit() {\n      if (!this.$refs.form.validate()) return\n\n      this.selectedDays.sort()\n\n      // Get duration of event\n      let duration = this.endTime - this.startTime\n      if (duration <= 0) duration += 24\n\n      // Get date objects for each selected day\n      let dates = []\n      let type = eventTypes.SPECIFIC_DATES\n      const startTimeString = timeNumToTimeString(this.startTime)\n      for (const day of this.selectedDays) {\n        const date = dayjs.tz(\n          `${day} ${startTimeString}`,\n          this.timezone.value\n        )\n        dates.push(date.toDate())\n      }\n\n      this.loading = true\n\n      const payload = {\n        name: this.name,\n        duration: duration,\n        dates: dates,\n        hasSpecificTimes: this.specificTimesEnabled,\n        notificationsEnabled: !this.authUser\n          ? false\n          : this.notificationsEnabled,\n        blindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        remindees: this.emails,\n        type: type,\n        sendEmailAfterXResponses: this.sendEmailAfterXResponsesEnabled\n          ? parseInt(this.sendEmailAfterXResponses)\n          : -1,\n        collectEmails: this.collectEmails,\n        timeIncrement: this.timeIncrement,\n        creatorPosthogId: this.$posthog?.get_distinct_id(),\n      }\n\n      const posthogPayload = {\n        eventName: this.name,\n        eventDuration: duration,\n        eventDates: JSON.stringify(dates),\n        eventHasSpecificTimes: this.specificTimesEnabled,\n        eventNotificationsEnabled: !this.authUser\n          ? false\n          : this.notificationsEnabled,\n        eventBlindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        eventRemindees: this.emails,\n        eventType: type,\n        eventSendEmailAfterXResponses: this.sendEmailAfterXResponsesEnabled\n          ? parseInt(this.sendEmailAfterXResponses)\n          : -1,\n        eventCollectEmails: this.collectEmails,\n        eventTimeIncrement: this.timeIncrement,\n      }\n\n      if (!this.edit) {\n        // Create new event on backend\n        post(\"/events\", payload)\n          .then(async ({ eventId, shortId }) => {\n            await this.setEventFolder({ eventId, folderId: this.folderId })\n            this.$router.push({\n              name: \"event\",\n              params: {\n                eventId: shortId ?? eventId,\n                initialTimezone: this.timezone,\n              },\n            })\n\n            this.$emit(\"input\", false)\n            this.reset()\n\n            posthogPayload.eventId = eventId\n            this.$posthog?.capture(\"Event created\", posthogPayload)\n\n            if (!this.authUser) {\n              // Add eventId to localStorage, so the user can claim it later\n              addEventToCreatedList(eventId)\n            }\n          })\n          .catch((err) => {\n            this.showError(\n              \"There was a problem creating that event! Please try again later.\"\n            )\n            console.error(err)\n          })\n          .finally(() => {\n            this.loading = false\n          })\n      } else {\n        // Edit event on backend\n        if (this.event) {\n          put(`/events/${this.event._id}`, payload)\n            .then(() => {\n              posthogPayload.eventId = this.event._id\n              this.$posthog?.capture(\"Event edited\", posthogPayload)\n\n              // this.$emit(\"input\", false)\n              // this.reset()\n              localStorage.setItem(`from-edit-event-${this.event._id}`, \"true\")\n              window.location.reload()\n            })\n            .catch((err) => {\n              this.showError(\n                \"There was a problem editing this event! Please try again later.\"\n              )\n              console.log(err)\n            })\n            .finally(() => {\n              this.loading = false\n            })\n        }\n      }\n    },\n\n    toggleEmailReminders(delayed = false) {\n      if (delayed) {\n        setTimeout(\n          () => (this.showEmailReminders = !this.showEmailReminders),\n          300\n        )\n      } else {\n        this.showEmailReminders = !this.showEmailReminders\n      }\n    },\n\n    /** Redirects user to oauth page requesting access to the user's contacts */\n    requestContactsAccess({ emails }) {\n      const payload = {\n        emails,\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        selectedDays: this.selectedDays,\n        notificationsEnabled: this.notificationsEnabled,\n        timezone: this.timezone,\n      }\n      signInGoogle({\n        state: {\n          type: authTypes.EVENT_CONTACTS,\n          eventId: this.event ? this.event.shortId ?? this.event._id : \"\",\n          openNewGroup: false,\n          payload,\n        },\n        requestContactsPermission: true,\n      })\n    },\n    /** Update state based on the contactsPayload after granting contacts access */\n    contactsAccessGranted({ curScheduledEvent, ...data }) {\n      this.curScheduledEvent = curScheduledEvent\n      this.$refs.confirmDetailsDialog?.setData(data)\n      this.confirmDetailsDialog = true\n    },\n\n    /** Populates the form fields based on this.event */\n    updateFieldsFromEvent() {\n      if (this.event) {\n        this.name = this.event.name\n\n        // Set start time, accounting for the timezone\n        this.startTime = Math.floor(\n          dateToTimeNum(getDateWithTimezone(this.event.dates[0]), true)\n        )\n        this.startTime %= 24\n\n        this.endTime = (this.startTime + this.event.duration) % 24\n        this.notificationsEnabled = this.event.notificationsEnabled\n        this.blindAvailabilityEnabled = this.event.blindAvailabilityEnabled\n        // Deleted specificTimesEnabled (feature removed)\n\n        if (this.event.dates && this.event.dates.length > 0) {\n          // Only support SPECIFIC_DATES\n          this.selectedDays = this.event.dates.map((date) =>\n            getISODateString(getDateWithTimezone(date))\n          )\n        }\n      }\n    },\n    resetToEventData() {\n      this.updateFieldsFromEvent()\n      this.$refs.emailInput.reset()\n    },\n    setInitialEventData() {\n      this.initialEventData = {\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        // Deleted specificTimesEnabled (feature removed)\n        selectedDays: this.selectedDays,\n        notificationsEnabled: this.notificationsEnabled,\n        emails: [...this.emails],\n        blindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        sendEmailAfterXResponsesEnabled: this.sendEmailAfterXResponsesEnabled,\n        sendEmailAfterXResponses: this.sendEmailAfterXResponses,\n        timeIncrement: this.timeIncrement,\n      }\n    },\n    hasEventBeenEdited() {\n      return (\n        this.name !== this.initialEventData.name ||\n        this.startTime !== this.initialEventData.startTime ||\n        this.endTime !== this.initialEventData.endTime ||\n        // Deleted specificTimesEnabled comparison (feature removed)\n        JSON.stringify(this.selectedDays) !==\n          JSON.stringify(this.initialEventData.selectedDays) ||\n        this.notificationsEnabled !==\n          this.initialEventData.notificationsEnabled ||\n        JSON.stringify(this.emails) !==\n          JSON.stringify(this.initialEventData.emails) ||\n        this.blindAvailabilityEnabled !==\n          this.initialEventData.blindAvailabilityEnabled ||\n        this.sendEmailAfterXResponsesEnabled !==\n          this.initialEventData.sendEmailAfterXResponsesEnabled ||\n        this.sendEmailAfterXResponses !==\n          this.initialEventData.sendEmailAfterXResponses\n      )\n    },\n    trackTimezoneChange(newTimezone) {\n      this.$posthog?.capture(\"timezone_selected_in_new_event_dialog\", {\n        timezone: newTimezone?.value,\n      })\n    },\n  },\n\n  watch: {\n    event: {\n      immediate: true,\n      handler() {\n        this.updateFieldsFromEvent()\n        this.setInitialEventData()\n      },\n    },\n  },\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}