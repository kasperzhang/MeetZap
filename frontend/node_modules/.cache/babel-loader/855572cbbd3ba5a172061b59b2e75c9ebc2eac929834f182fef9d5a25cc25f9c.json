{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapActions, mapGetters } from \"vuex\";\nimport draggable from \"vuedraggable\";\nimport { eventTypes, folderColors, numFreeEvents, upgradeDialogTypes } from \"@/constants\";\nimport EventItem from \"@/components/EventItem.vue\";\nimport ObjectID from \"bson-objectid\";\nexport default {\n  name: \"Dashboard\",\n  components: {\n    EventItem,\n    draggable\n  },\n  data() {\n    return {\n      deleteDialog: false,\n      folderToDelete: {},\n      createFolderDialog: false,\n      newFolderName: \"\",\n      newFolderColor: folderColors[3],\n      isEditingFolder: false,\n      folderToEdit: null,\n      folderOpenState: {\n        \"no-folder\": true\n      }\n    };\n  },\n  computed: {\n    ...mapGetters([\"isPremiumUser\"]),\n    ...mapState([\"authUser\", \"events\", \"groupsEnabled\", \"folders\"]),\n    orderedFolders() {\n      return this.folders.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n    },\n    numFreeEvents() {\n      return numFreeEvents;\n    },\n    folderColors() {\n      return folderColors;\n    },\n    allEvents() {\n      return this.events;\n    },\n    allEventsMap() {\n      return this.allEvents.reduce((acc, event) => {\n        acc[event._id] = event;\n        return acc;\n      }, {});\n    },\n    eventsByFolder() {\n      const eventsByFolder = {};\n      const allEventIds = new Set(this.allEvents.map(e => e._id));\n      this.folders.forEach(folder => {\n        eventsByFolder[folder._id] = {\n          groups: [],\n          events: []\n        };\n        for (const eventId of folder.eventIds) {\n          const event = this.allEventsMap[eventId];\n          if (event) {\n            if (event.type === eventTypes.GROUP) {\n              eventsByFolder[folder._id].groups.push(event);\n            } else {\n              eventsByFolder[folder._id].events.push(event);\n            }\n            allEventIds.delete(eventId);\n          }\n        }\n        eventsByFolder[folder._id].groups.sort(this.sortEvents);\n        eventsByFolder[folder._id].events.sort(this.sortEvents);\n      });\n      eventsByFolder[\"no-folder\"] = {\n        groups: [],\n        events: []\n      };\n      for (const eventId of allEventIds) {\n        const event = this.allEventsMap[eventId];\n        if (event) {\n          if (event.type === eventTypes.GROUP) {\n            eventsByFolder[\"no-folder\"].groups.push(event);\n          } else {\n            eventsByFolder[\"no-folder\"].events.push(event);\n          }\n        }\n      }\n      eventsByFolder[\"no-folder\"].groups.sort(this.sortEvents);\n      eventsByFolder[\"no-folder\"].events.sort(this.sortEvents);\n      return eventsByFolder;\n    },\n    eventsWithoutFolder() {\n      return this.eventsByFolder[\"no-folder\"];\n    },\n    folderDialogTitle() {\n      return this.isEditingFolder ? \"Edit folder\" : \"New folder\";\n    },\n    folderDialogConfirmText() {\n      return this.isEditingFolder ? \"Save\" : \"Create\";\n    }\n  },\n  methods: {\n    ...mapActions([\"createFolder\", \"showUpgradeDialog\", \"deleteFolder\", \"setEventFolder\", \"updateFolder\", \"createNew\"]),\n    sortEvents(a, b) {\n      if (ObjectID.isValid(a._id) && ObjectID.isValid(b._id)) {\n        return ObjectID(b._id).getTimestamp() - ObjectID(a._id).getTimestamp();\n      }\n      return 0;\n    },\n    onEnd(evt) {\n      const eventId = evt.item.id;\n      let newFolderId = evt.to.dataset.folderId;\n      if (newFolderId === \"null\" || newFolderId === undefined) {\n        newFolderId = null;\n      }\n      const fromFolderId = evt.from.dataset.folderId;\n\n      // if moving within the same folder, do nothing.\n      if (fromFolderId === newFolderId) {\n        // Here you might want to handle re-ordering within the same folder\n        // For now, we do nothing.\n        return;\n      }\n      const event = this.allEvents.find(e => e._id === eventId);\n      if (event) {\n        this.setEventFolder({\n          eventId: event._id,\n          folderId: newFolderId\n        });\n      }\n    },\n    confirmFolderDialog() {\n      if (!this.newFolderName.trim()) {\n        this.closeFolderDialog();\n        return;\n      }\n      if (this.isEditingFolder) {\n        this.updateFolder({\n          folderId: this.folderToEdit._id,\n          name: this.newFolderName.trim(),\n          color: this.newFolderColor\n        });\n      } else {\n        this.$posthog?.capture(\"folder_created\", {\n          folderName: this.newFolderName.trim(),\n          folderColor: this.newFolderColor\n        });\n        this.createFolder({\n          name: this.newFolderName.trim(),\n          color: this.newFolderColor\n        });\n      }\n      this.closeFolderDialog();\n    },\n    closeFolderDialog() {\n      this.createFolderDialog = false;\n      this.isEditingFolder = false;\n      this.folderToEdit = null;\n      this.newFolderName = \"\";\n      this.newFolderColor = folderColors[3];\n    },\n    openCreateFolderDialog() {\n      this.isEditingFolder = false;\n      this.folderToEdit = null;\n      this.newFolderName = \"\";\n      this.newFolderColor = folderColors[3];\n      this.createFolderDialog = true;\n    },\n    openEditFolderDialog(folder) {\n      this.isEditingFolder = true;\n      this.folderToEdit = folder;\n      this.newFolderName = folder.name;\n      this.newFolderColor = folder.color || folderColors[3];\n      this.createFolderDialog = true;\n    },\n    toggleFolder(folderId) {\n      this.$set(this.folderOpenState, folderId, !this.folderOpenState[folderId]);\n    },\n    createEventInFolder(folderId) {\n      this.createNew({\n        eventOnly: false,\n        folderId: folderId\n      });\n    },\n    openDeleteDialog(folder) {\n      this.folderToDelete = folder;\n      this.deleteDialog = true;\n    },\n    confirmDelete() {\n      this.$store.dispatch(\"deleteFolder\", this.folderToDelete._id);\n      this.deleteDialog = false;\n    },\n    openUpgradeDialog() {\n      this.showUpgradeDialog({\n        type: upgradeDialogTypes.UPGRADE_MANUALLY\n      });\n    }\n  },\n  created() {\n    try {\n      const storedState = localStorage.getItem(\"folderOpenState\");\n      if (storedState) {\n        this.folderOpenState = JSON.parse(storedState);\n      }\n    } catch (e) {\n      console.error(\"Error reading folderOpenState from localStorage\", e);\n      // If corrupted, remove it\n      localStorage.removeItem(\"folderOpenState\");\n    }\n  },\n  watch: {\n    folderOpenState: {\n      handler(newState) {\n        try {\n          localStorage.setItem(\"folderOpenState\", JSON.stringify(newState));\n        } catch (e) {\n          console.error(\"Error saving folderOpenState to localStorage\", e);\n        }\n      },\n      deep: true\n    },\n    folders: {\n      handler(newFolders) {\n        if (newFolders) {\n          newFolders.forEach(folder => {\n            if (this.folderOpenState[folder._id] === undefined) {\n              this.$set(this.folderOpenState, folder._id, true); // default to open\n            }\n          });\n        }\n      },\n      immediate: true\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","mapGetters","draggable","eventTypes","folderColors","numFreeEvents","upgradeDialogTypes","EventItem","ObjectID","name","components","data","deleteDialog","folderToDelete","createFolderDialog","newFolderName","newFolderColor","isEditingFolder","folderToEdit","folderOpenState","computed","orderedFolders","folders","sort","a","b","localeCompare","allEvents","events","allEventsMap","reduce","acc","event","_id","eventsByFolder","allEventIds","Set","map","e","forEach","folder","groups","eventId","eventIds","type","GROUP","push","delete","sortEvents","eventsWithoutFolder","folderDialogTitle","folderDialogConfirmText","methods","isValid","getTimestamp","onEnd","evt","item","id","newFolderId","to","dataset","folderId","undefined","fromFolderId","from","find","setEventFolder","confirmFolderDialog","trim","closeFolderDialog","updateFolder","color","$posthog","capture","folderName","folderColor","createFolder","openCreateFolderDialog","openEditFolderDialog","toggleFolder","$set","createEventInFolder","createNew","eventOnly","openDeleteDialog","confirmDelete","$store","dispatch","openUpgradeDialog","showUpgradeDialog","UPGRADE_MANUALLY","created","storedState","localStorage","getItem","JSON","parse","console","error","removeItem","watch","handler","newState","setItem","stringify","deep","newFolders","immediate"],"sources":["src/components/home/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"tw-rounded-md tw-px-6 tw-py-4 sm:tw-mx-4 sm:tw-bg-[#f3f3f366]\">\n    <div class=\"tw-mb-3 tw-flex tw-items-center tw-justify-between\">\n      <div class=\"tw-flex tw-flex-col\">\n        <div\n          class=\"tw-text-xl tw-font-medium tw-text-dark-green sm:tw-text-2xl\"\n        >\n          Dashboard\n        </div>\n        <div\n          v-if=\"!isPremiumUser\"\n          class=\"tw-flex tw-items-baseline tw-gap-2 tw-text-sm tw-font-normal tw-text-very-dark-gray\"\n        >\n          <div>\n            {{ authUser?.numEventsCreated }} / {{ numFreeEvents }} free events\n            created this month\n          </div>\n          <div\n            class=\"tw-cursor-pointer tw-select-none tw-text-xs tw-font-medium tw-text-green tw-underline\"\n            @click=\"openUpgradeDialog\"\n          >\n            Upgrade\n          </div>\n        </div>\n      </div>\n      <v-btn\n        text\n        @click=\"openCreateFolderDialog\"\n        class=\"tw-hidden tw-text-very-dark-gray sm:tw-block\"\n      >\n        <v-icon class=\"tw-mr-2 tw-text-lg\">mdi-folder-plus</v-icon>\n        New folder\n      </v-btn>\n    </div>\n\n    <div>\n      <div\n        v-for=\"folder in orderedFolders\"\n        :key=\"folder._id\"\n        class=\"tw-group tw-mb-2\"\n      >\n        <div class=\"tw-flex tw-items-center\">\n          <v-btn icon small @click=\"toggleFolder(folder._id)\">\n            <v-icon>{{\n              folderOpenState[folder._id] ? \"mdi-menu-down\" : \"mdi-menu-right\"\n            }}</v-icon>\n          </v-btn>\n          <v-chip\n            :color=\"folder.color || '#D3D3D3'\"\n            small\n            class=\"tw-mr-2 tw-cursor-pointer tw-rounded tw-border tw-border-light-gray-stroke tw-px-2 tw-text-sm tw-font-medium\"\n            @click=\"openEditFolderDialog(folder)\"\n          >\n            {{ folder.name }}\n          </v-chip>\n          <div\n            class=\"tw-invisible tw-flex tw-items-center group-hover:tw-visible\"\n          >\n            <v-menu offset-y>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn icon small v-bind=\"attrs\" v-on=\"on\" @click.stop.prevent>\n                  <v-icon small>mdi-dots-horizontal</v-icon>\n                </v-btn>\n              </template>\n              <v-list dense class=\"tw-py-1\">\n                <v-list-item @click.stop.prevent=\"openEditFolderDialog(folder)\">\n                  <v-list-item-title>Edit</v-list-item-title>\n                </v-list-item>\n                <v-list-item @click.stop.prevent=\"openDeleteDialog(folder)\">\n                  <v-list-item-title class=\"tw-text-red\"\n                    >Delete</v-list-item-title\n                  >\n                </v-list-item>\n              </v-list>\n            </v-menu>\n            <v-btn\n              icon\n              small\n              @click.stop.prevent=\"createEventInFolder(folder._id)\"\n            >\n              <v-icon small>mdi-plus</v-icon>\n            </v-btn>\n          </div>\n        </div>\n        <div v-show=\"folderOpenState[folder._id]\">\n          <draggable\n            :list=\"[\n              ...eventsByFolder[folder._id].groups,\n              ...eventsByFolder[folder._id].events,\n            ]\"\n            group=\"events\"\n            @end=\"onEnd\"\n            :data-folder-id=\"folder._id\"\n            draggable=\".item\"\n            class=\"tw-relative tw-grid tw-min-h-[52px] tw-grid-cols-1 tw-gap-4 tw-py-4 sm:tw-grid-cols-2\"\n          >\n            <template v-slot:header>\n              <div\n                v-if=\"\n                  eventsByFolder[folder._id].groups.length === 0 &&\n                  eventsByFolder[folder._id].events.length === 0\n                \"\n                class=\"tw-absolute tw-left-0 tw-ml-8 tw-py-4 tw-text-sm tw-text-very-dark-gray\"\n              >\n                No events in this folder\n              </div>\n            </template>\n            <template v-if=\"eventsByFolder[folder._id].groups.length > 0\">\n              <EventItem\n                v-for=\"event in eventsByFolder[folder._id].groups\"\n                :key=\"event._id\"\n                :id=\"event._id\"\n                :event=\"event\"\n                :folder-id=\"folder._id\"\n                class=\"item\"\n              />\n              <div class=\"tw-col-span-full\"></div>\n            </template>\n            <EventItem\n              v-for=\"event in eventsByFolder[folder._id].events\"\n              :key=\"event._id\"\n              :id=\"event._id\"\n              :event=\"event\"\n              :folder-id=\"folder._id\"\n              class=\"item\"\n            />\n          </draggable>\n        </div>\n      </div>\n\n      <div v-if=\"allEvents.length > 0\">\n        <div class=\"tw-flex tw-items-center\">\n          <v-btn icon small @click=\"toggleFolder('no-folder')\">\n            <v-icon>{{\n              folderOpenState[\"no-folder\"] ? \"mdi-menu-down\" : \"mdi-menu-right\"\n            }}</v-icon>\n          </v-btn>\n          <span class=\"tw-text-sm tw-font-medium\">No folder</span>\n        </div>\n        <div v-show=\"folderOpenState['no-folder']\">\n          <draggable\n            :list=\"[\n              ...eventsWithoutFolder.groups,\n              ...eventsWithoutFolder.events,\n            ]\"\n            group=\"events\"\n            @end=\"onEnd\"\n            data-folder-id=\"null\"\n            draggable=\".item\"\n            class=\"tw-relative tw-grid tw-min-h-[52px] tw-grid-cols-1 tw-gap-4 tw-py-4 sm:tw-grid-cols-2\"\n          >\n            <template v-slot:header>\n              <div\n                v-if=\"\n                  eventsWithoutFolder.groups.length === 0 &&\n                  eventsWithoutFolder.events.length === 0\n                \"\n                class=\"tw-absolute tw-left-0 tw-ml-7 tw-py-4 tw-text-sm tw-text-very-dark-gray\"\n              >\n                No events\n              </div>\n            </template>\n            <template v-if=\"eventsWithoutFolder.groups.length > 0\">\n              <EventItem\n                v-for=\"event in eventsWithoutFolder.groups\"\n                :key=\"event._id\"\n                :id=\"event._id\"\n                :event=\"event\"\n                :folder-id=\"null\"\n                class=\"item\"\n              />\n              <div class=\"tw-col-span-full\"></div>\n            </template>\n            <EventItem\n              v-for=\"event in eventsWithoutFolder.events\"\n              :key=\"event._id\"\n              :id=\"event._id\"\n              :event=\"event\"\n              :folder-id=\"null\"\n              class=\"item\"\n            />\n          </draggable>\n        </div>\n      </div>\n      <div v-else>\n        <div class=\"tw-py-4 tw-text-sm tw-text-very-dark-gray\">\n          No events yet! Create one to get started.\n        </div>\n      </div>\n    </div>\n    <v-dialog v-model=\"deleteDialog\" max-width=\"400\">\n      <v-card>\n        <v-card-title>Delete \"{{ folderToDelete.name }}\"?</v-card-title>\n        <v-card-text\n          >Are you sure you want to delete this folder? All events you own in\n          this folder will be deleted as well.</v-card-text\n        >\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn text @click=\"deleteDialog = false\">Cancel</v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"confirmDelete\">Delete</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    <v-dialog v-model=\"createFolderDialog\" max-width=\"400\">\n      <v-card>\n        <v-card-title>{{ folderDialogTitle }}</v-card-title>\n        <v-card-text>\n          <v-text-field\n            v-model=\"newFolderName\"\n            label=\"Folder name\"\n            placeholder=\"Untitled folder\"\n            autofocus\n            @keydown.enter=\"confirmFolderDialog\"\n            hide-details\n          ></v-text-field>\n          <div class=\"tw-mt-4\">\n            <span class=\"tw-text-gray-500 tw-text-sm\">Color</span>\n            <div class=\"tw-mt-2 tw-flex tw-gap-x-3\">\n              <div\n                v-for=\"color in folderColors\"\n                :key=\"color\"\n                class=\"tw-h-6 tw-w-6 tw-cursor-pointer tw-rounded-full tw-border tw-border-light-gray-stroke\"\n                :style=\"{ backgroundColor: color }\"\n                :class=\"{\n                  'tw-ring-2 tw-ring-gray tw-ring-offset-2':\n                    newFolderColor === color,\n                }\"\n                @click=\"newFolderColor = color\"\n              ></div>\n            </div>\n          </div>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn text @click=\"closeFolderDialog\">Cancel</v-btn>\n          <v-btn color=\"primary\" text @click=\"confirmFolderDialog\">{{\n            folderDialogConfirmText\n          }}</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions, mapGetters } from \"vuex\"\nimport draggable from \"vuedraggable\"\nimport {\n  eventTypes,\n  folderColors,\n  numFreeEvents,\n  upgradeDialogTypes,\n} from \"@/constants\"\nimport EventItem from \"@/components/EventItem.vue\"\nimport ObjectID from \"bson-objectid\"\n\nexport default {\n  name: \"Dashboard\",\n  components: {\n    EventItem,\n    draggable,\n  },\n  data() {\n    return {\n      deleteDialog: false,\n      folderToDelete: {},\n      createFolderDialog: false,\n      newFolderName: \"\",\n      newFolderColor: folderColors[3],\n      isEditingFolder: false,\n      folderToEdit: null,\n      folderOpenState: {\n        \"no-folder\": true,\n      },\n    }\n  },\n  computed: {\n    ...mapGetters([\"isPremiumUser\"]),\n    ...mapState([\"authUser\", \"events\", \"groupsEnabled\", \"folders\"]),\n    orderedFolders() {\n      return this.folders.sort((a, b) => {\n        return a.name.localeCompare(b.name)\n      })\n    },\n    numFreeEvents() {\n      return numFreeEvents\n    },\n    folderColors() {\n      return folderColors\n    },\n    allEvents() {\n      return this.events\n    },\n    allEventsMap() {\n      return this.allEvents.reduce((acc, event) => {\n        acc[event._id] = event\n        return acc\n      }, {})\n    },\n    eventsByFolder() {\n      const eventsByFolder = {}\n      const allEventIds = new Set(this.allEvents.map((e) => e._id))\n      this.folders.forEach((folder) => {\n        eventsByFolder[folder._id] = { groups: [], events: [] }\n        for (const eventId of folder.eventIds) {\n          const event = this.allEventsMap[eventId]\n          if (event) {\n            if (event.type === eventTypes.GROUP) {\n              eventsByFolder[folder._id].groups.push(event)\n            } else {\n              eventsByFolder[folder._id].events.push(event)\n            }\n            allEventIds.delete(eventId)\n          }\n        }\n        eventsByFolder[folder._id].groups.sort(this.sortEvents)\n        eventsByFolder[folder._id].events.sort(this.sortEvents)\n      })\n      eventsByFolder[\"no-folder\"] = { groups: [], events: [] }\n      for (const eventId of allEventIds) {\n        const event = this.allEventsMap[eventId]\n        if (event) {\n          if (event.type === eventTypes.GROUP) {\n            eventsByFolder[\"no-folder\"].groups.push(event)\n          } else {\n            eventsByFolder[\"no-folder\"].events.push(event)\n          }\n        }\n      }\n      eventsByFolder[\"no-folder\"].groups.sort(this.sortEvents)\n      eventsByFolder[\"no-folder\"].events.sort(this.sortEvents)\n      return eventsByFolder\n    },\n    eventsWithoutFolder() {\n      return this.eventsByFolder[\"no-folder\"]\n    },\n    folderDialogTitle() {\n      return this.isEditingFolder ? \"Edit folder\" : \"New folder\"\n    },\n    folderDialogConfirmText() {\n      return this.isEditingFolder ? \"Save\" : \"Create\"\n    },\n  },\n\n  methods: {\n    ...mapActions([\n      \"createFolder\",\n      \"showUpgradeDialog\",\n      \"deleteFolder\",\n      \"setEventFolder\",\n      \"updateFolder\",\n      \"createNew\",\n    ]),\n    sortEvents(a, b) {\n      if (ObjectID.isValid(a._id) && ObjectID.isValid(b._id)) {\n        return ObjectID(b._id).getTimestamp() - ObjectID(a._id).getTimestamp()\n      }\n      return 0\n    },\n    onEnd(evt) {\n      const eventId = evt.item.id\n      let newFolderId = evt.to.dataset.folderId\n      if (newFolderId === \"null\" || newFolderId === undefined) {\n        newFolderId = null\n      }\n\n      const fromFolderId = evt.from.dataset.folderId\n\n      // if moving within the same folder, do nothing.\n      if (fromFolderId === newFolderId) {\n        // Here you might want to handle re-ordering within the same folder\n        // For now, we do nothing.\n        return\n      }\n\n      const event = this.allEvents.find((e) => e._id === eventId)\n\n      if (event) {\n        this.setEventFolder({\n          eventId: event._id,\n          folderId: newFolderId,\n        })\n      }\n    },\n    confirmFolderDialog() {\n      if (!this.newFolderName.trim()) {\n        this.closeFolderDialog()\n        return\n      }\n      if (this.isEditingFolder) {\n        this.updateFolder({\n          folderId: this.folderToEdit._id,\n          name: this.newFolderName.trim(),\n          color: this.newFolderColor,\n        })\n      } else {\n        this.$posthog?.capture(\"folder_created\", {\n          folderName: this.newFolderName.trim(),\n          folderColor: this.newFolderColor,\n        })\n        this.createFolder({\n          name: this.newFolderName.trim(),\n          color: this.newFolderColor,\n        })\n      }\n      this.closeFolderDialog()\n    },\n    closeFolderDialog() {\n      this.createFolderDialog = false\n      this.isEditingFolder = false\n      this.folderToEdit = null\n      this.newFolderName = \"\"\n      this.newFolderColor = folderColors[3]\n    },\n    openCreateFolderDialog() {\n      this.isEditingFolder = false\n      this.folderToEdit = null\n      this.newFolderName = \"\"\n      this.newFolderColor = folderColors[3]\n      this.createFolderDialog = true\n    },\n    openEditFolderDialog(folder) {\n      this.isEditingFolder = true\n      this.folderToEdit = folder\n      this.newFolderName = folder.name\n      this.newFolderColor = folder.color || folderColors[3]\n      this.createFolderDialog = true\n    },\n    toggleFolder(folderId) {\n      this.$set(this.folderOpenState, folderId, !this.folderOpenState[folderId])\n    },\n    createEventInFolder(folderId) {\n      this.createNew({\n        eventOnly: false,\n        folderId: folderId,\n      })\n    },\n    openDeleteDialog(folder) {\n      this.folderToDelete = folder\n      this.deleteDialog = true\n    },\n    confirmDelete() {\n      this.$store.dispatch(\"deleteFolder\", this.folderToDelete._id)\n      this.deleteDialog = false\n    },\n    openUpgradeDialog() {\n      this.showUpgradeDialog({\n        type: upgradeDialogTypes.UPGRADE_MANUALLY,\n      })\n    },\n  },\n  created() {\n    try {\n      const storedState = localStorage.getItem(\"folderOpenState\")\n      if (storedState) {\n        this.folderOpenState = JSON.parse(storedState)\n      }\n    } catch (e) {\n      console.error(\"Error reading folderOpenState from localStorage\", e)\n      // If corrupted, remove it\n      localStorage.removeItem(\"folderOpenState\")\n    }\n  },\n  watch: {\n    folderOpenState: {\n      handler(newState) {\n        try {\n          localStorage.setItem(\"folderOpenState\", JSON.stringify(newState))\n        } catch (e) {\n          console.error(\"Error saving folderOpenState to localStorage\", e)\n        }\n      },\n      deep: true,\n    },\n    folders: {\n      handler(newFolders) {\n        if (newFolders) {\n          newFolders.forEach((folder) => {\n            if (this.folderOpenState[folder._id] === undefined) {\n              this.$set(this.folderOpenState, folder._id, true) // default to open\n            }\n          })\n        }\n      },\n      immediate: true,\n    },\n  },\n}\n</script>\n\n<style>\n.v-expansion-panel-header {\n  padding: 16px 4px !important;\n}\n</style>\n"],"mappings":";AAsPA,SAAAA,QAAA,EAAAC,UAAA,EAAAC,UAAA;AACA,OAAAC,SAAA;AACA,SACAC,UAAA,EACAC,YAAA,EACAC,aAAA,EACAC,kBAAA,QACA;AACA,OAAAC,SAAA;AACA,OAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,SAAA;IACAL;EACA;EACAS,KAAA;IACA;MACAC,YAAA;MACAC,cAAA;MACAC,kBAAA;MACAC,aAAA;MACAC,cAAA,EAAAZ,YAAA;MACAa,eAAA;MACAC,YAAA;MACAC,eAAA;QACA;MACA;IACA;EACA;EACAC,QAAA;IACA,GAAAnB,UAAA;IACA,GAAAF,QAAA;IACAsB,eAAA;MACA,YAAAC,OAAA,CAAAC,IAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,OAAAD,CAAA,CAAAf,IAAA,CAAAiB,aAAA,CAAAD,CAAA,CAAAhB,IAAA;MACA;IACA;IACAJ,cAAA;MACA,OAAAA,aAAA;IACA;IACAD,aAAA;MACA,OAAAA,YAAA;IACA;IACAuB,UAAA;MACA,YAAAC,MAAA;IACA;IACAC,aAAA;MACA,YAAAF,SAAA,CAAAG,MAAA,EAAAC,GAAA,EAAAC,KAAA;QACAD,GAAA,CAAAC,KAAA,CAAAC,GAAA,IAAAD,KAAA;QACA,OAAAD,GAAA;MACA;IACA;IACAG,eAAA;MACA,MAAAA,cAAA;MACA,MAAAC,WAAA,OAAAC,GAAA,MAAAT,SAAA,CAAAU,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAL,GAAA;MACA,KAAAX,OAAA,CAAAiB,OAAA,CAAAC,MAAA;QACAN,cAAA,CAAAM,MAAA,CAAAP,GAAA;UAAAQ,MAAA;UAAAb,MAAA;QAAA;QACA,WAAAc,OAAA,IAAAF,MAAA,CAAAG,QAAA;UACA,MAAAX,KAAA,QAAAH,YAAA,CAAAa,OAAA;UACA,IAAAV,KAAA;YACA,IAAAA,KAAA,CAAAY,IAAA,KAAAzC,UAAA,CAAA0C,KAAA;cACAX,cAAA,CAAAM,MAAA,CAAAP,GAAA,EAAAQ,MAAA,CAAAK,IAAA,CAAAd,KAAA;YACA;cACAE,cAAA,CAAAM,MAAA,CAAAP,GAAA,EAAAL,MAAA,CAAAkB,IAAA,CAAAd,KAAA;YACA;YACAG,WAAA,CAAAY,MAAA,CAAAL,OAAA;UACA;QACA;QACAR,cAAA,CAAAM,MAAA,CAAAP,GAAA,EAAAQ,MAAA,CAAAlB,IAAA,MAAAyB,UAAA;QACAd,cAAA,CAAAM,MAAA,CAAAP,GAAA,EAAAL,MAAA,CAAAL,IAAA,MAAAyB,UAAA;MACA;MACAd,cAAA;QAAAO,MAAA;QAAAb,MAAA;MAAA;MACA,WAAAc,OAAA,IAAAP,WAAA;QACA,MAAAH,KAAA,QAAAH,YAAA,CAAAa,OAAA;QACA,IAAAV,KAAA;UACA,IAAAA,KAAA,CAAAY,IAAA,KAAAzC,UAAA,CAAA0C,KAAA;YACAX,cAAA,cAAAO,MAAA,CAAAK,IAAA,CAAAd,KAAA;UACA;YACAE,cAAA,cAAAN,MAAA,CAAAkB,IAAA,CAAAd,KAAA;UACA;QACA;MACA;MACAE,cAAA,cAAAO,MAAA,CAAAlB,IAAA,MAAAyB,UAAA;MACAd,cAAA,cAAAN,MAAA,CAAAL,IAAA,MAAAyB,UAAA;MACA,OAAAd,cAAA;IACA;IACAe,oBAAA;MACA,YAAAf,cAAA;IACA;IACAgB,kBAAA;MACA,YAAAjC,eAAA;IACA;IACAkC,wBAAA;MACA,YAAAlC,eAAA;IACA;EACA;EAEAmC,OAAA;IACA,GAAApD,UAAA,EACA,gBACA,qBACA,gBACA,kBACA,gBACA,YACA;IACAgD,WAAAxB,CAAA,EAAAC,CAAA;MACA,IAAAjB,QAAA,CAAA6C,OAAA,CAAA7B,CAAA,CAAAS,GAAA,KAAAzB,QAAA,CAAA6C,OAAA,CAAA5B,CAAA,CAAAQ,GAAA;QACA,OAAAzB,QAAA,CAAAiB,CAAA,CAAAQ,GAAA,EAAAqB,YAAA,KAAA9C,QAAA,CAAAgB,CAAA,CAAAS,GAAA,EAAAqB,YAAA;MACA;MACA;IACA;IACAC,MAAAC,GAAA;MACA,MAAAd,OAAA,GAAAc,GAAA,CAAAC,IAAA,CAAAC,EAAA;MACA,IAAAC,WAAA,GAAAH,GAAA,CAAAI,EAAA,CAAAC,OAAA,CAAAC,QAAA;MACA,IAAAH,WAAA,eAAAA,WAAA,KAAAI,SAAA;QACAJ,WAAA;MACA;MAEA,MAAAK,YAAA,GAAAR,GAAA,CAAAS,IAAA,CAAAJ,OAAA,CAAAC,QAAA;;MAEA;MACA,IAAAE,YAAA,KAAAL,WAAA;QACA;QACA;QACA;MACA;MAEA,MAAA3B,KAAA,QAAAL,SAAA,CAAAuC,IAAA,CAAA5B,CAAA,IAAAA,CAAA,CAAAL,GAAA,KAAAS,OAAA;MAEA,IAAAV,KAAA;QACA,KAAAmC,cAAA;UACAzB,OAAA,EAAAV,KAAA,CAAAC,GAAA;UACA6B,QAAA,EAAAH;QACA;MACA;IACA;IACAS,oBAAA;MACA,UAAArD,aAAA,CAAAsD,IAAA;QACA,KAAAC,iBAAA;QACA;MACA;MACA,SAAArD,eAAA;QACA,KAAAsD,YAAA;UACAT,QAAA,OAAA5C,YAAA,CAAAe,GAAA;UACAxB,IAAA,OAAAM,aAAA,CAAAsD,IAAA;UACAG,KAAA,OAAAxD;QACA;MACA;QACA,KAAAyD,QAAA,EAAAC,OAAA;UACAC,UAAA,OAAA5D,aAAA,CAAAsD,IAAA;UACAO,WAAA,OAAA5D;QACA;QACA,KAAA6D,YAAA;UACApE,IAAA,OAAAM,aAAA,CAAAsD,IAAA;UACAG,KAAA,OAAAxD;QACA;MACA;MACA,KAAAsD,iBAAA;IACA;IACAA,kBAAA;MACA,KAAAxD,kBAAA;MACA,KAAAG,eAAA;MACA,KAAAC,YAAA;MACA,KAAAH,aAAA;MACA,KAAAC,cAAA,GAAAZ,YAAA;IACA;IACA0E,uBAAA;MACA,KAAA7D,eAAA;MACA,KAAAC,YAAA;MACA,KAAAH,aAAA;MACA,KAAAC,cAAA,GAAAZ,YAAA;MACA,KAAAU,kBAAA;IACA;IACAiE,qBAAAvC,MAAA;MACA,KAAAvB,eAAA;MACA,KAAAC,YAAA,GAAAsB,MAAA;MACA,KAAAzB,aAAA,GAAAyB,MAAA,CAAA/B,IAAA;MACA,KAAAO,cAAA,GAAAwB,MAAA,CAAAgC,KAAA,IAAApE,YAAA;MACA,KAAAU,kBAAA;IACA;IACAkE,aAAAlB,QAAA;MACA,KAAAmB,IAAA,MAAA9D,eAAA,EAAA2C,QAAA,QAAA3C,eAAA,CAAA2C,QAAA;IACA;IACAoB,oBAAApB,QAAA;MACA,KAAAqB,SAAA;QACAC,SAAA;QACAtB,QAAA,EAAAA;MACA;IACA;IACAuB,iBAAA7C,MAAA;MACA,KAAA3B,cAAA,GAAA2B,MAAA;MACA,KAAA5B,YAAA;IACA;IACA0E,cAAA;MACA,KAAAC,MAAA,CAAAC,QAAA,sBAAA3E,cAAA,CAAAoB,GAAA;MACA,KAAArB,YAAA;IACA;IACA6E,kBAAA;MACA,KAAAC,iBAAA;QACA9C,IAAA,EAAAtC,kBAAA,CAAAqF;MACA;IACA;EACA;EACAC,QAAA;IACA;MACA,MAAAC,WAAA,GAAAC,YAAA,CAAAC,OAAA;MACA,IAAAF,WAAA;QACA,KAAA1E,eAAA,GAAA6E,IAAA,CAAAC,KAAA,CAAAJ,WAAA;MACA;IACA,SAAAvD,CAAA;MACA4D,OAAA,CAAAC,KAAA,oDAAA7D,CAAA;MACA;MACAwD,YAAA,CAAAM,UAAA;IACA;EACA;EACAC,KAAA;IACAlF,eAAA;MACAmF,QAAAC,QAAA;QACA;UACAT,YAAA,CAAAU,OAAA,oBAAAR,IAAA,CAAAS,SAAA,CAAAF,QAAA;QACA,SAAAjE,CAAA;UACA4D,OAAA,CAAAC,KAAA,iDAAA7D,CAAA;QACA;MACA;MACAoE,IAAA;IACA;IACApF,OAAA;MACAgF,QAAAK,UAAA;QACA,IAAAA,UAAA;UACAA,UAAA,CAAApE,OAAA,CAAAC,MAAA;YACA,SAAArB,eAAA,CAAAqB,MAAA,CAAAP,GAAA,MAAA8B,SAAA;cACA,KAAAkB,IAAA,MAAA9D,eAAA,EAAAqB,MAAA,CAAAP,GAAA;YACA;UACA;QACA;MACA;MACA2E,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}