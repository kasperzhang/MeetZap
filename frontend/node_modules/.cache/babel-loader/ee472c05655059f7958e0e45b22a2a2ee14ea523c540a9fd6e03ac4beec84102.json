{"ast":null,"code":"import { get, post, getEventsCreated, deleteEventsCreated } from \"@/utils\";\nimport { mapMutations } from \"vuex\";\nimport { authTypes, calendarTypes } from \"@/constants\";\nexport default {\n  name: \"Auth\",\n  methods: {\n    ...mapMutations([\"setAuthUser\"])\n  },\n  async created() {\n    let {\n      error,\n      code,\n      scope,\n      state\n    } = this.$route.query;\n    if (error) this.$router.replace({\n      name: \"home\"\n    });\n    if (state) state = JSON.parse(decodeURIComponent(state));\n\n    // Sign in and set auth user\n    try {\n      if (state?.type === authTypes.ADD_CALENDAR_ACCOUNT || state?.type === authTypes.ADD_CALENDAR_ACCOUNT_FROM_EDIT) {\n        if (state.calendarType === calendarTypes.GOOGLE) {\n          await post(\"/user/add-google-calendar-account\", {\n            code,\n            scope\n          });\n        } else if (state.calendarType === calendarTypes.OUTLOOK) {\n          await post(\"/user/add-outlook-calendar-account\", {\n            code,\n            scope: state.scope\n          });\n        } else {\n          throw new Error(\"Invalid calendar type\");\n        }\n      } else {\n        const user = await post(\"/auth/sign-in\", {\n          code,\n          scope: scope ?? state.scope,\n          calendarType: state.calendarType,\n          timezoneOffset: new Date().getTimezoneOffset(),\n          eventsToLink: getEventsCreated()\n        });\n        deleteEventsCreated();\n        this.setAuthUser(user);\n        this.$posthog?.identify(user._id, {\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName\n        });\n      }\n\n      // Redirect to the correct place based on \"state\", otherwise, just redirect to home\n      if (state) {\n        let authUser;\n        switch (state.type) {\n          case authTypes.EVENT_ADD_AVAILABILITY:\n            this.$router.replace({\n              name: \"event\",\n              params: {\n                eventId: state.eventId,\n                fromSignIn: true\n              }\n            });\n            break;\n          case authTypes.EVENT_SIGN_IN:\n            this.$router.replace({\n              name: \"event\",\n              params: {\n                eventId: state.eventId\n              }\n            });\n            break;\n          case authTypes.EVENT_SIGN_IN_LINK_APPLE:\n            this.$router.replace({\n              name: \"event\",\n              params: {\n                eventId: state.eventId,\n                linkApple: true\n              }\n            });\n            break;\n          case authTypes.GROUP_CREATE:\n            this.$router.replace({\n              name: \"home\",\n              params: {\n                openNewGroup: true\n              }\n            });\n            break;\n          case authTypes.GROUP_SIGN_IN:\n            this.$router.replace({\n              name: \"group\",\n              params: {\n                groupId: state.groupId\n              }\n            });\n            break;\n          case authTypes.GROUP_ADD_AVAILABILITY:\n            this.$router.replace({\n              name: \"group\",\n              params: {\n                groupId: state.eventId,\n                fromSignIn: true\n              }\n            });\n            authUser = await get(\"/user/profile\");\n            this.setAuthUser(authUser);\n            break;\n          case authTypes.ADD_CALENDAR_ACCOUNT:\n            this.$router.replace({\n              name: \"settings\"\n            });\n            authUser = await get(\"/user/profile\");\n            this.setAuthUser(authUser);\n            break;\n          case authTypes.ADD_CALENDAR_ACCOUNT_FROM_EDIT:\n            this.$router.replace({\n              name: \"event\",\n              params: {\n                eventId: state.eventId,\n                fromSignIn: true\n              }\n            });\n            authUser = await get(\"/user/profile\");\n            this.setAuthUser(authUser);\n            break;\n          case authTypes.EVENT_CONTACTS:\n            if (state.eventId == \"\") {\n              this.$router.replace({\n                name: \"home\",\n                params: {\n                  contactsPayload: state.payload,\n                  openNewGroup: state.openNewGroup\n                }\n              });\n            } else {\n              this.$router.replace({\n                name: \"event\",\n                params: {\n                  eventId: state.eventId,\n                  contactsPayload: state.payload\n                }\n              });\n            }\n            break;\n          default:\n            this.$router.replace({\n              name: \"home\"\n            });\n        }\n      } else {\n        this.$router.replace({\n          name: \"home\"\n        });\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n};","map":{"version":3,"names":["get","post","getEventsCreated","deleteEventsCreated","mapMutations","authTypes","calendarTypes","name","methods","created","error","code","scope","state","$route","query","$router","replace","JSON","parse","decodeURIComponent","type","ADD_CALENDAR_ACCOUNT","ADD_CALENDAR_ACCOUNT_FROM_EDIT","calendarType","GOOGLE","OUTLOOK","Error","user","timezoneOffset","Date","getTimezoneOffset","eventsToLink","setAuthUser","$posthog","identify","_id","email","firstName","lastName","authUser","EVENT_ADD_AVAILABILITY","params","eventId","fromSignIn","EVENT_SIGN_IN","EVENT_SIGN_IN_LINK_APPLE","linkApple","GROUP_CREATE","openNewGroup","GROUP_SIGN_IN","groupId","GROUP_ADD_AVAILABILITY","EVENT_CONTACTS","contactsPayload","payload","err","console"],"sources":["src/views/Auth.vue"],"sourcesContent":["<template></template>\n\n<script>\nimport { get, post, getEventsCreated, deleteEventsCreated } from \"@/utils\"\nimport { mapMutations } from \"vuex\"\nimport { authTypes, calendarTypes } from \"@/constants\"\n\nexport default {\n  name: \"Auth\",\n\n  methods: {\n    ...mapMutations([\"setAuthUser\"]),\n  },\n\n  async created() {\n    let { error, code, scope, state } = this.$route.query\n    if (error) this.$router.replace({ name: \"home\" })\n\n    if (state) state = JSON.parse(decodeURIComponent(state))\n\n    // Sign in and set auth user\n    try {\n      if (\n        state?.type === authTypes.ADD_CALENDAR_ACCOUNT ||\n        state?.type === authTypes.ADD_CALENDAR_ACCOUNT_FROM_EDIT\n      ) {\n        if (state.calendarType === calendarTypes.GOOGLE) {\n          await post(\"/user/add-google-calendar-account\", { code, scope })\n        } else if (state.calendarType === calendarTypes.OUTLOOK) {\n          await post(\"/user/add-outlook-calendar-account\", {\n            code,\n            scope: state.scope,\n          })\n        } else {\n          throw new Error(\"Invalid calendar type\")\n        }\n      } else {\n        const user = await post(\"/auth/sign-in\", {\n          code,\n          scope: scope ?? state.scope,\n          calendarType: state.calendarType,\n          timezoneOffset: new Date().getTimezoneOffset(),\n          eventsToLink: getEventsCreated(),\n        })\n        deleteEventsCreated()\n\n        this.setAuthUser(user)\n\n        this.$posthog?.identify(user._id, {\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n        })\n      }\n\n      // Redirect to the correct place based on \"state\", otherwise, just redirect to home\n      if (state) {\n        let authUser\n        switch (state.type) {\n          case authTypes.EVENT_ADD_AVAILABILITY:\n            this.$router.replace({\n              name: \"event\",\n              params: { eventId: state.eventId, fromSignIn: true },\n            })\n            break\n          case authTypes.EVENT_SIGN_IN:\n            this.$router.replace({\n              name: \"event\",\n              params: { eventId: state.eventId },\n            })\n            break\n          case authTypes.EVENT_SIGN_IN_LINK_APPLE:\n            this.$router.replace({\n              name: \"event\",\n              params: { eventId: state.eventId, linkApple: true },\n            })\n            break\n          case authTypes.GROUP_CREATE:\n            this.$router.replace({\n              name: \"home\",\n              params: {\n                openNewGroup: true,\n              },\n            })\n            break\n          case authTypes.GROUP_SIGN_IN:\n            this.$router.replace({\n              name: \"group\",\n              params: { groupId: state.groupId },\n            })\n            break\n          case authTypes.GROUP_ADD_AVAILABILITY:\n            this.$router.replace({\n              name: \"group\",\n              params: { groupId: state.eventId, fromSignIn: true },\n            })\n            authUser = await get(\"/user/profile\")\n            this.setAuthUser(authUser)\n            break\n          case authTypes.ADD_CALENDAR_ACCOUNT:\n            this.$router.replace({\n              name: \"settings\",\n            })\n            authUser = await get(\"/user/profile\")\n            this.setAuthUser(authUser)\n            break\n          case authTypes.ADD_CALENDAR_ACCOUNT_FROM_EDIT:\n            this.$router.replace({\n              name: \"event\",\n              params: { eventId: state.eventId, fromSignIn: true },\n            })\n            authUser = await get(\"/user/profile\")\n            this.setAuthUser(authUser)\n            break\n          case authTypes.EVENT_CONTACTS:\n            if (state.eventId == \"\") {\n              this.$router.replace({\n                name: \"home\",\n                params: {\n                  contactsPayload: state.payload,\n                  openNewGroup: state.openNewGroup,\n                },\n              })\n            } else {\n              this.$router.replace({\n                name: \"event\",\n                params: {\n                  eventId: state.eventId,\n                  contactsPayload: state.payload,\n                },\n              })\n            }\n            break\n          default:\n            this.$router.replace({ name: \"home\" })\n        }\n      } else {\n        this.$router.replace({ name: \"home\" })\n      }\n    } catch (err) {\n      console.error(err)\n    }\n  },\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}