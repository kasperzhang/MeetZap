{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { eventTypes, dayIndexToDayString, authTypes } from \"@/constants\";\nimport { post, put, timeNumToTimeString, dateToTimeNum, getISODateString, isPhone, signInGoogle, getDateWithTimezone, getTimeOptions } from \"@/utils\";\nimport { mapActions, mapState } from \"vuex\";\nimport TimezoneSelector from \"./schedule_overlap/TimezoneSelector.vue\";\nimport HelpDialog from \"./HelpDialog.vue\";\nimport EmailInput from \"./event/EmailInput.vue\";\nimport DatePicker from \"@/components/DatePicker.vue\";\nimport SlideToggle from \"./SlideToggle.vue\";\nimport AlertText from \"@/components/AlertText.vue\";\nimport OverflowGradient from \"@/components/OverflowGradient.vue\";\nimport dayjs from \"dayjs\";\nimport utcPlugin from \"dayjs/plugin/utc\";\nimport timezonePlugin from \"dayjs/plugin/timezone\";\nimport ExpandableSection from \"./ExpandableSection.vue\";\ndayjs.extend(utcPlugin);\ndayjs.extend(timezonePlugin);\nexport default {\n  name: \"NewSignUp\",\n  emits: [\"input\"],\n  props: {\n    event: {\n      type: Object\n    },\n    edit: {\n      type: Boolean,\n      default: false\n    },\n    dialog: {\n      type: Boolean,\n      default: true\n    },\n    contactsPayload: {\n      type: Object,\n      default: () => ({})\n    },\n    showHelp: {\n      type: Boolean,\n      default: false\n    }\n  },\n  components: {\n    TimezoneSelector,\n    HelpDialog,\n    EmailInput,\n    DatePicker,\n    SlideToggle,\n    ExpandableSection,\n    AlertText,\n    OverflowGradient\n  },\n  data: () => ({\n    formValid: true,\n    name: \"\",\n    startTime: 9,\n    endTime: 17,\n    loading: false,\n    selectedDays: [],\n    selectedDaysOfWeek: [],\n    startOnMonday: false,\n    notificationsEnabled: false,\n    daysOnly: false,\n    daysOnlyOptions: Object.freeze([{\n      text: \"Dates and times\",\n      value: false\n    }, {\n      text: \"Dates only\",\n      value: true\n    }]),\n    // Date options\n    dateOptions: Object.freeze({\n      SPECIFIC: \"Specific dates\",\n      DOW: \"Days of the week\"\n    }),\n    selectedDateOption: \"Specific dates\",\n    // Email reminders\n    showEmailReminders: false,\n    emails: [],\n    // For email reminders\n\n    // Advanced options\n    showAdvancedOptions: false,\n    collectEmails: false,\n    blindAvailabilityEnabled: false,\n    timezone: {},\n    sendEmailAfterXResponsesEnabled: false,\n    sendEmailAfterXResponses: 3,\n    helpDialog: false,\n    // Unsaved changes\n    initialEventData: {},\n    hasMounted: false\n  }),\n  mounted() {\n    if (Object.keys(this.contactsPayload).length > 0) {\n      this.toggleEmailReminders(true);\n\n      /** Get previously filled out data after enabling contacts  */\n      this.name = this.contactsPayload.name;\n      this.startTime = this.contactsPayload.startTime;\n      this.endTime = this.contactsPayload.endTime;\n      this.daysOnly = this.contactsPayload.daysOnly;\n      this.selectedDateOption = this.contactsPayload.selectedDateOption;\n      this.selectedDaysOfWeek = this.contactsPayload.selectedDaysOfWeek;\n      this.selectedDays = this.contactsPayload.selectedDays;\n      this.notificationsEnabled = this.contactsPayload.notificationsEnabled;\n      this.timezone = this.contactsPayload.timezone;\n      this.$refs.form.resetValidation();\n    }\n    this.$nextTick(() => {\n      this.hasMounted = true;\n    });\n  },\n  computed: {\n    ...mapState([\"authUser\", \"daysOnlyEnabled\"]),\n    nameRules() {\n      return [v => !!v || \"Event name is required\"];\n    },\n    selectedDaysRules() {\n      return [selectedDays => selectedDays.length > 0 || \"Please select at least one day\"];\n    },\n    addedEmails() {\n      if (Object.keys(this.contactsPayload).length > 0) return this.contactsPayload.emails;\n      return this.event && this.event.remindees ? this.event.remindees.map(r => r.email) : [];\n    },\n    times() {\n      return getTimeOptions();\n    },\n    minCalendarDate() {\n      if (this.edit) {\n        return \"\";\n      }\n      let today = new Date();\n      let dd = String(today.getDate()).padStart(2, \"0\");\n      let mm = String(today.getMonth() + 1).padStart(2, \"0\");\n      let yyyy = today.getFullYear();\n      return yyyy + \"-\" + mm + \"-\" + dd;\n    },\n    isPhone() {\n      return isPhone(this.$vuetify);\n    }\n  },\n  methods: {\n    ...mapActions([\"showError\"]),\n    blurNameField() {\n      this.$refs[\"name-field\"].blur();\n    },\n    reset() {\n      this.name = \"\";\n      this.startTime = 9;\n      this.endTime = 17;\n      this.selectedDays = [];\n      this.selectedDaysOfWeek = [];\n      this.notificationsEnabled = false;\n      this.daysOnly = false;\n      this.selectedDateOption = \"Specific dates\";\n      this.emails = [];\n      this.showAdvancedOptions = false;\n      this.blindAvailabilityEnabled = false;\n      this.sendEmailAfterXResponsesEnabled = false;\n      this.sendEmailAfterXResponses = 3;\n      this.collectEmails = false;\n      this.$refs.form.resetValidation();\n    },\n    submit() {\n      if (!this.$refs.form.validate()) return;\n      this.selectedDays.sort();\n\n      // Get duration of event\n      let duration = this.endTime - this.startTime;\n      if (duration <= 0) duration += 24;\n\n      // Get date objects for each selected day\n      let dates = [];\n      let type = \"\";\n      if (this.daysOnly) {\n        duration = 0;\n        type = eventTypes.SIGNUP;\n        for (const day of this.selectedDays) {\n          const date = new Date(`${day} 00:00:00Z`);\n          dates.push(date);\n        }\n      } else {\n        const startTimeString = timeNumToTimeString(this.startTime);\n        if (this.selectedDateOption === this.dateOptions.SPECIFIC) {\n          type = eventTypes.SPECIFIC_DATES;\n          for (const day of this.selectedDays) {\n            const date = dayjs.tz(`${day} ${startTimeString}`, this.timezone.value);\n            dates.push(date.toDate());\n          }\n        } else if (this.selectedDateOption === this.dateOptions.DOW) {\n          type = eventTypes.DOW;\n          this.selectedDaysOfWeek.sort((a, b) => a - b);\n          this.selectedDaysOfWeek = this.selectedDaysOfWeek.filter(dayIndex => {\n            return this.startOnMonday ? dayIndex !== 0 : dayIndex !== 7;\n          });\n          for (const dayIndex of this.selectedDaysOfWeek) {\n            const day = dayIndexToDayString[dayIndex];\n            const date = dayjs.tz(`${day} ${startTimeString}`, this.timezone.value);\n            dates.push(date.toDate());\n          }\n        }\n      }\n      this.loading = true;\n      const payload = {\n        name: this.name,\n        duration: duration,\n        dates: dates,\n        notificationsEnabled: this.notificationsEnabled,\n        blindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        daysOnly: this.daysOnly,\n        remindees: this.emails,\n        type: type,\n        isSignUpForm: true,\n        sendEmailAfterXResponses: this.sendEmailAfterXResponsesEnabled ? parseInt(this.sendEmailAfterXResponses) : -1,\n        collectEmails: this.collectEmails,\n        startOnMonday: this.startOnMonday,\n        creatorPosthogId: this.$posthog?.get_distinct_id()\n      };\n      const posthogPayload = {\n        eventName: this.name,\n        eventDuration: duration,\n        eventDates: JSON.stringify(dates),\n        eventNotificationsEnabled: this.notificationsEnabled,\n        eventBlindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        eventDaysOnly: this.daysOnly,\n        eventRemindees: this.emails,\n        eventType: type,\n        eventIsSignUpForm: true,\n        eventSendEmailAfterXResponses: this.sendEmailAfterXResponsesEnabled ? parseInt(this.sendEmailAfterXResponses) : -1,\n        eventCollectEmails: this.collectEmails,\n        eventStartOnMonday: this.startOnMonday\n      };\n      if (!this.edit) {\n        // Create new event on backend\n        post(\"/events\", payload).then(({\n          eventId,\n          shortId\n        }) => {\n          this.$router.push({\n            name: \"signUp\",\n            params: {\n              signUpId: shortId ?? eventId,\n              initialTimezone: this.timezone,\n              editingMode: true\n            }\n          });\n          this.$emit(\"input\", false);\n          this.reset();\n          posthogPayload.eventId = eventId;\n          this.$posthog?.capture(\"Sign up form created\", posthogPayload);\n        }).catch(err => {\n          this.showError(\"There was a problem creating that event! Please try again later.\");\n        }).finally(() => {\n          this.loading = false;\n        });\n      } else {\n        // Edit event on backend\n        if (this.event) {\n          put(`/events/${this.event._id}`, payload).then(() => {\n            posthogPayload.eventId = this.event._id;\n            this.$posthog?.capture(\"Sign up form edited\", posthogPayload);\n            this.$emit(\"input\", false);\n            this.reset();\n            window.location.reload();\n          }).catch(err => {\n            this.showError(\"There was a problem editing this event! Please try again later.\");\n          }).finally(() => {\n            this.loading = false;\n          });\n        }\n      }\n    },\n    toggleEmailReminders(delayed = false) {\n      if (delayed) {\n        setTimeout(() => this.showEmailReminders = !this.showEmailReminders, 300);\n      } else {\n        this.showEmailReminders = !this.showEmailReminders;\n      }\n    },\n    /** Redirects user to oauth page requesting access to the user's contacts */\n    requestContactsAccess({\n      emails\n    }) {\n      const payload = {\n        emails,\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        daysOnly: this.daysOnly,\n        selectedDays: this.selectedDays,\n        selectedDaysOfWeek: this.selectedDaysOfWeek,\n        selectedDateOption: this.selectedDateOption,\n        notificationsEnabled: this.notificationsEnabled,\n        timezone: this.timezone\n      };\n      signInGoogle({\n        state: {\n          type: authTypes.EVENT_CONTACTS,\n          eventId: this.event ? this.event.shortId ?? this.event._id : \"\",\n          openNewGroup: false,\n          payload\n        },\n        requestContactsPermission: true\n      });\n    },\n    /** Update state based on the contactsPayload after granting contacts access */\n    contactsAccessGranted({\n      curScheduledEvent,\n      ...data\n    }) {\n      this.curScheduledEvent = curScheduledEvent;\n      this.$refs.confirmDetailsDialog?.setData(data);\n      this.confirmDetailsDialog = true;\n    },\n    /** Populates the form fields based on this.event */\n    updateFieldsFromEvent() {\n      if (this.event) {\n        this.name = this.event.name;\n\n        // Set start time, accounting for the timezone\n        this.startTime = Math.floor(dateToTimeNum(getDateWithTimezone(this.event.dates[0]), true));\n        this.startTime %= 24;\n        this.endTime = (this.startTime + this.event.duration) % 24;\n        this.notificationsEnabled = this.event.notificationsEnabled;\n        this.blindAvailabilityEnabled = this.event.blindAvailabilityEnabled;\n        this.daysOnly = this.event.daysOnly;\n        if (this.event.sendEmailAfterXResponses !== null && this.event.sendEmailAfterXResponses > 0) {\n          this.sendEmailAfterXResponsesEnabled = true;\n          this.sendEmailAfterXResponses = this.event.sendEmailAfterXResponses;\n        }\n        if (this.event.daysOnly) {\n          this.selectedDateOption = this.dateOptions.SPECIFIC;\n          const selectedDays = [];\n          for (let date of this.event.dates) {\n            selectedDays.push(getISODateString(date, true));\n          }\n          this.selectedDays = selectedDays;\n        } else {\n          if (this.event.type === eventTypes.SPECIFIC_DATES) {\n            this.selectedDateOption = this.dateOptions.SPECIFIC;\n            const selectedDays = [];\n            for (let date of this.event.dates) {\n              date = getDateWithTimezone(date);\n              selectedDays.push(getISODateString(date, true));\n            }\n            this.selectedDays = selectedDays;\n          } else if (this.event.type === eventTypes.DOW) {\n            this.selectedDateOption = this.dateOptions.DOW;\n            const selectedDaysOfWeek = [];\n            for (let date of this.event.dates) {\n              date = getDateWithTimezone(date);\n              if (this.event.startOnMonday && date.getUTCDay() === 0) {\n                selectedDaysOfWeek.push(7);\n              } else {\n                selectedDaysOfWeek.push(date.getUTCDay());\n              }\n            }\n            this.selectedDaysOfWeek = selectedDaysOfWeek;\n            if (this.event.startOnMonday) {\n              this.startOnMonday = true;\n            }\n          }\n        }\n      }\n    },\n    resetToEventData() {\n      this.updateFieldsFromEvent();\n      // this.$refs.emailInput.reset()\n    },\n    setInitialEventData() {\n      this.initialEventData = {\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        daysOnly: this.daysOnly,\n        selectedDays: this.selectedDays,\n        selectedDaysOfWeek: this.selectedDaysOfWeek,\n        selectedDateOption: this.selectedDateOption,\n        notificationsEnabled: this.notificationsEnabled,\n        emails: [...this.emails],\n        blindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        sendEmailAfterXResponsesEnabled: this.sendEmailAfterXResponsesEnabled,\n        sendEmailAfterXResponses: this.sendEmailAfterXResponses\n      };\n    },\n    hasEventBeenEdited() {\n      return this.name !== this.initialEventData.name || this.startTime !== this.initialEventData.startTime || this.endTime !== this.initialEventData.endTime || this.selectedDateOption !== this.initialEventData.selectedDateOption || JSON.stringify(this.selectedDays) !== JSON.stringify(this.initialEventData.selectedDays) || JSON.stringify(this.selectedDaysOfWeek) !== JSON.stringify(this.initialEventData.selectedDaysOfWeek) || this.daysOnly !== this.initialEventData.daysOnly || this.notificationsEnabled !== this.initialEventData.notificationsEnabled || JSON.stringify(this.emails) !== JSON.stringify(this.initialEventData.emails) || this.blindAvailabilityEnabled !== this.initialEventData.blindAvailabilityEnabled || this.sendEmailAfterXResponsesEnabled !== this.initialEventData.sendEmailAfterXResponsesEnabled || this.sendEmailAfterXResponses !== this.initialEventData.sendEmailAfterXResponses;\n    }\n  },\n  watch: {\n    event: {\n      immediate: true,\n      handler() {\n        this.updateFieldsFromEvent();\n        this.setInitialEventData();\n      }\n    },\n    selectedDateOption() {\n      // Reset the other date / day selection when date option is changed\n      if (this.selectedDateOption === this.dateOptions.SPECIFIC) {\n        this.selectedDaysOfWeek = [];\n      } else if (this.selectedDateOption === this.dateOptions.DOW) {\n        this.selectedDays = [];\n      }\n    }\n  }\n};","map":{"version":3,"names":["eventTypes","dayIndexToDayString","authTypes","post","put","timeNumToTimeString","dateToTimeNum","getISODateString","isPhone","signInGoogle","getDateWithTimezone","getTimeOptions","mapActions","mapState","TimezoneSelector","HelpDialog","EmailInput","DatePicker","SlideToggle","AlertText","OverflowGradient","dayjs","utcPlugin","timezonePlugin","ExpandableSection","extend","name","emits","props","event","type","Object","edit","Boolean","default","dialog","contactsPayload","showHelp","components","data","formValid","startTime","endTime","loading","selectedDays","selectedDaysOfWeek","startOnMonday","notificationsEnabled","daysOnly","daysOnlyOptions","freeze","text","value","dateOptions","SPECIFIC","DOW","selectedDateOption","showEmailReminders","emails","showAdvancedOptions","collectEmails","blindAvailabilityEnabled","timezone","sendEmailAfterXResponsesEnabled","sendEmailAfterXResponses","helpDialog","initialEventData","hasMounted","mounted","keys","length","toggleEmailReminders","$refs","form","resetValidation","$nextTick","computed","nameRules","v","selectedDaysRules","addedEmails","remindees","map","r","email","times","minCalendarDate","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","$vuetify","methods","blurNameField","blur","reset","submit","validate","sort","duration","dates","SIGNUP","day","date","push","startTimeString","SPECIFIC_DATES","tz","toDate","a","b","filter","dayIndex","payload","isSignUpForm","parseInt","creatorPosthogId","$posthog","get_distinct_id","posthogPayload","eventName","eventDuration","eventDates","JSON","stringify","eventNotificationsEnabled","eventBlindAvailabilityEnabled","eventDaysOnly","eventRemindees","eventType","eventIsSignUpForm","eventSendEmailAfterXResponses","eventCollectEmails","eventStartOnMonday","then","eventId","shortId","$router","params","signUpId","initialTimezone","editingMode","$emit","capture","catch","err","showError","finally","_id","window","location","reload","delayed","setTimeout","requestContactsAccess","state","EVENT_CONTACTS","openNewGroup","requestContactsPermission","contactsAccessGranted","curScheduledEvent","confirmDetailsDialog","setData","updateFieldsFromEvent","Math","floor","getUTCDay","resetToEventData","setInitialEventData","hasEventBeenEdited","watch","immediate","handler"],"sources":["src/components/NewSignUp.vue"],"sourcesContent":["<template>\n  <v-card\n    :flat=\"dialog\"\n    :class=\"{ 'tw-py-4': !dialog, 'tw-flex-1': dialog }\"\n    class=\"tw-relative tw-flex tw-max-w-[28rem] tw-flex-col tw-overflow-hidden tw-rounded-lg tw-transition-all\"\n  >\n    <v-card-title class=\"tw-mb-2 tw-flex tw-gap-2 tw-px-4 sm:tw-px-8\">\n      <div>\n        <div class=\"tw-mb-1\">\n          {{ edit ? \"Edit sign up\" : \"New sign up\" }}\n        </div>\n        <div\n          v-if=\"dialog && showHelp\"\n          class=\"tw-text-xs tw-font-normal tw-italic tw-text-dark-gray\"\n        >\n          Ideal for events with sign up slots\n        </div>\n      </div>\n      <v-spacer />\n      <template v-if=\"dialog\">\n        <v-btn v-if=\"showHelp\" icon @click=\"helpDialog = true\">\n          <v-icon>mdi-information-outline</v-icon>\n        </v-btn>\n        <v-btn v-else @click=\"$emit('input', false)\" icon>\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n        <HelpDialog v-model=\"helpDialog\">\n          <template v-slot:header>Events</template>\n          <div class=\"tw-mb-4\">\n            Use events to collect people's availabilities and compare them\n            across certain days.\n          </div>\n        </HelpDialog>\n      </template>\n    </v-card-title>\n    <v-card-text\n      ref=\"cardText\"\n      class=\"tw-relative tw-flex-1 tw-overflow-auto tw-px-4 tw-py-1 sm:tw-px-8\"\n    >\n      <v-form\n        ref=\"form\"\n        v-model=\"formValid\"\n        lazy-validation\n        class=\"tw-flex tw-flex-col tw-gap-y-6\"\n        :disabled=\"loading\"\n      >\n        <v-text-field\n          ref=\"name-field\"\n          v-model=\"name\"\n          placeholder=\"Name your event...\"\n          hide-details=\"auto\"\n          solo\n          @keyup.enter=\"blurNameField\"\n          :rules=\"nameRules\"\n          required\n        />\n\n        <!-- <SlideToggle\n          v-if=\"daysOnlyEnabled && !edit\"\n          class=\"tw-w-full\"\n          v-model=\"daysOnly\"\n          :options=\"daysOnlyOptions\"\n        /> -->\n\n        <div>\n          <v-expand-transition>\n            <div v-if=\"!daysOnly\">\n              <div class=\"tw-mb-2 tw-text-lg tw-text-black\">\n                What times might work?\n              </div>\n              <div\n                class=\"tw-mb-6 tw-flex tw-items-baseline tw-justify-center tw-space-x-2\"\n              >\n                <v-select\n                  :value=\"startTime\"\n                  @input=\"(t) => (startTime = t.time)\"\n                  menu-props=\"auto\"\n                  :items=\"times\"\n                  return-object\n                  hide-details\n                  solo\n                ></v-select>\n                <div>to</div>\n                <v-select\n                  :value=\"endTime\"\n                  @input=\"(t) => (endTime = t.time)\"\n                  menu-props=\"auto\"\n                  :items=\"times\"\n                  return-object\n                  hide-details\n                  solo\n                ></v-select>\n              </div>\n            </div>\n          </v-expand-transition>\n\n          <div class=\"tw-mb-2 tw-text-lg tw-text-black\">\n            What\n            {{ selectedDateOption === dateOptions.SPECIFIC ? \"dates\" : \"days\" }}\n            might work?\n          </div>\n          <v-select\n            v-if=\"!edit && !daysOnly\"\n            v-model=\"selectedDateOption\"\n            :items=\"Object.values(dateOptions)\"\n            solo\n            hide-details\n            class=\"tw-mb-4\"\n          />\n\n          <v-expand-transition>\n            <div v-if=\"selectedDateOption === dateOptions.SPECIFIC || daysOnly\">\n              <div class=\"tw-mb-2 tw-text-xs tw-text-dark-gray\">\n                Drag to select multiple dates\n              </div>\n              <v-input\n                v-model=\"selectedDays\"\n                hide-details=\"auto\"\n                :rules=\"selectedDaysRules\"\n                key=\"date-picker\"\n              >\n                <DatePicker\n                  v-model=\"selectedDays\"\n                  :minCalendarDate=\"minCalendarDate\"\n                />\n              </v-input>\n            </div>\n            <div v-else-if=\"selectedDateOption === dateOptions.DOW\">\n              <v-input\n                v-model=\"selectedDaysOfWeek\"\n                hide-details=\"auto\"\n                :rules=\"selectedDaysRules\"\n                key=\"days-of-week\"\n                class=\"tw-w-fit\"\n              >\n                <v-btn-toggle\n                  v-model=\"selectedDaysOfWeek\"\n                  multiple\n                  solo\n                  color=\"primary\"\n                >\n                  <v-btn depressed v-show=\"!startOnMonday\"> Sun </v-btn>\n                  <v-btn depressed> Mon </v-btn>\n                  <v-btn depressed> Tue </v-btn>\n                  <v-btn depressed> Wed </v-btn>\n                  <v-btn depressed> Thu </v-btn>\n                  <v-btn depressed> Fri </v-btn>\n                  <v-btn depressed> Sat </v-btn>\n                  <v-btn depressed v-show=\"startOnMonday\"> Sun </v-btn>\n                </v-btn-toggle>\n              </v-input>\n              <v-checkbox class=\"tw-mt-2\" v-model=\"startOnMonday\" hide-details>\n                <template v-slot:label>\n                  <span class=\"tw-text-sm tw-text-very-dark-gray\">\n                    Start on Monday\n                  </span>\n                </template>\n              </v-checkbox>\n            </div>\n          </v-expand-transition>\n        </div>\n\n        <v-checkbox v-model=\"notificationsEnabled\" hide-details class=\"tw-mt-2\">\n          <template v-slot:label>\n            <span class=\"tw-text-sm tw-text-very-dark-gray\"\n              >Email me each time someone signs up</span\n            >\n          </template>\n        </v-checkbox>\n\n        <v-checkbox v-model=\"collectEmails\">\n          <template v-slot:label>\n            <span class=\"tw-text-sm tw-text-very-dark-gray\">\n              Collect email address on sign up\n            </span>\n          </template>\n        </v-checkbox>\n\n        <div class=\"tw-flex tw-flex-col tw-gap-2\">\n          <!-- <ExpandableSection\n            v-if=\"authUser\"\n            label=\"Email reminders\"\n            v-model=\"showEmailReminders\"\n            :auto-scroll=\"dialog\"\n          >\n            <div class=\"tw-flex tw-flex-col tw-gap-5 tw-pt-2\">\n              <EmailInput\n                v-show=\"authUser\"\n                ref=\"emailInput\"\n                @requestContactsAccess=\"requestContactsAccess\"\n                labelColor=\"tw-text-very-dark-gray\"\n                :addedEmails=\"addedEmails\"\n                @update:emails=\"(newEmails) => (emails = newEmails)\"\n              >\n                <template v-slot:header>\n                  <div class=\"tw-flex tw-gap-1\">\n                    <div class=\"tw-text-very-dark-gray\">\n                      Remind people to fill out the event\n                    </div>\n\n                    <v-tooltip\n                      top\n                      content-class=\"tw-bg-very-dark-gray tw-shadow-lg tw-opacity-100 tw-py-4\"\n                    >\n                      <template v-slot:activator=\"{ on, attrs }\">\n                        <v-icon small v-bind=\"attrs\" v-on=\"on\"\n                          >mdi-information-outline\n                        </v-icon>\n                      </template>\n                      <div>\n                        Reminder emails will be sent the day of event\n                        creation,<br />one day after, and three days after. You\n                        will also receive <br />an email when everybody has\n                        filled out the event.\n                      </div>\n                    </v-tooltip>\n                  </div>\n                </template>\n              </EmailInput>\n            </div>\n          </ExpandableSection> -->\n\n          <ExpandableSection\n            v-model=\"showAdvancedOptions\"\n            label=\"Advanced options\"\n            :auto-scroll=\"dialog\"\n          >\n            <div class=\"tw-flex tw-flex-col tw-gap-5 tw-pt-2\">\n              <v-checkbox\n                v-if=\"authUser\"\n                v-model=\"blindAvailabilityEnabled\"\n                messages=\"Only show attendees to sign up creator\"\n              >\n                <template v-slot:label>\n                  <span class=\"tw-text-sm tw-text-black\">\n                    Hide attendees from each other\n                  </span>\n                </template>\n                <template v-slot:message=\"{ key, message }\">\n                  <div\n                    class=\"-tw-mt-1 tw-ml-[32px] tw-text-xs tw-text-dark-gray\"\n                  >\n                    {{ message }}\n                  </div>\n                </template>\n              </v-checkbox>\n              <v-checkbox\n                v-else\n                disabled\n                messages=\"Only show responses to event creator. \"\n                off-icon=\"mdi-checkbox-blank-off-outline\"\n              >\n                <template v-slot:label>\n                  <span class=\"tw-text-sm\"\n                    >Hide responses from respondents</span\n                  >\n                </template>\n                <template v-slot:message=\"{ key, message }\">\n                  <div\n                    class=\"tw-pointer-events-auto -tw-mt-1 tw-ml-[32px] tw-text-xs tw-text-dark-gray\"\n                  >\n                    {{ message }}\n                    <span class=\"tw-font-medium tw-text-very-dark-gray\"\n                      ><a @click=\"$emit('signIn')\">Sign in</a>\n                      to use this feature\n                    </span>\n                  </div>\n                </template>\n              </v-checkbox>\n              <!-- <v-checkbox\n                v-if=\"authUser\"\n                v-model=\"sendEmailAfterXResponsesEnabled\"\n                hide-details\n              >\n                <template v-slot:label>\n                  <div\n                    :class=\"!sendEmailAfterXResponsesEnabled && 'tw-opacity-50'\"\n                    class=\"tw-flex tw-items-center tw-gap-x-2 tw-text-sm tw-text-very-dark-gray\"\n                  >\n                    <div>Email me after</div>\n                    <v-text-field\n                      v-model=\"sendEmailAfterXResponses\"\n                      @click=\"\n                        (e) => {\n                          e.preventDefault()\n                          e.stopPropagation()\n                        }\n                      \"\n                      :disabled=\"!sendEmailAfterXResponsesEnabled\"\n                      dense\n                      class=\"email-me-after-text-field -tw-mt-[2px] tw-w-10\"\n                      menu-props=\"auto\"\n                      hide-details\n                      type=\"number\"\n                      min=\"1\"\n                    ></v-text-field>\n                    <div>responses</div>\n                  </div>\n                </template>\n              </v-checkbox> -->\n              <TimezoneSelector v-model=\"timezone\" label=\"Timezone\" />\n            </div>\n          </ExpandableSection>\n        </div>\n      </v-form>\n    </v-card-text>\n    <v-card-actions class=\"tw-relative tw-px-4 sm:tw-px-8\">\n      <div class=\"tw-relative tw-w-full\">\n        <v-btn\n          :disabled=\"!formValid\"\n          block\n          :loading=\"loading\"\n          color=\"primary\"\n          class=\"tw-mt-4 tw-bg-green\"\n          @click=\"submit\"\n        >\n          {{ edit ? \"Save edits\" : \"Create event\" }}\n        </v-btn>\n        <div\n          :class=\"formValid ? 'tw-invisible' : 'tw-visible'\"\n          class=\"tw-mt-1 tw-text-xs tw-text-red\"\n        >\n          Please fix form errors before continuing\n        </div>\n      </div>\n    </v-card-actions>\n\n    <OverflowGradient\n      v-if=\"hasMounted\"\n      :scrollContainer=\"$refs.cardText\"\n      class=\"tw-bottom-[90px]\"\n    />\n  </v-card>\n</template>\n\n<style>\n.email-me-after-text-field input {\n  padding: 0px !important;\n}\n</style>\n\n<script>\nimport { eventTypes, dayIndexToDayString, authTypes } from \"@/constants\"\nimport {\n  post,\n  put,\n  timeNumToTimeString,\n  dateToTimeNum,\n  getISODateString,\n  isPhone,\n  signInGoogle,\n  getDateWithTimezone,\n  getTimeOptions,\n} from \"@/utils\"\nimport { mapActions, mapState } from \"vuex\"\nimport TimezoneSelector from \"./schedule_overlap/TimezoneSelector.vue\"\nimport HelpDialog from \"./HelpDialog.vue\"\nimport EmailInput from \"./event/EmailInput.vue\"\nimport DatePicker from \"@/components/DatePicker.vue\"\nimport SlideToggle from \"./SlideToggle.vue\"\nimport AlertText from \"@/components/AlertText.vue\"\nimport OverflowGradient from \"@/components/OverflowGradient.vue\"\n\nimport dayjs from \"dayjs\"\nimport utcPlugin from \"dayjs/plugin/utc\"\nimport timezonePlugin from \"dayjs/plugin/timezone\"\nimport ExpandableSection from \"./ExpandableSection.vue\"\ndayjs.extend(utcPlugin)\ndayjs.extend(timezonePlugin)\n\nexport default {\n  name: \"NewSignUp\",\n\n  emits: [\"input\"],\n\n  props: {\n    event: { type: Object },\n    edit: { type: Boolean, default: false },\n    dialog: { type: Boolean, default: true },\n    contactsPayload: { type: Object, default: () => ({}) },\n    showHelp: { type: Boolean, default: false },\n  },\n\n  components: {\n    TimezoneSelector,\n    HelpDialog,\n    EmailInput,\n    DatePicker,\n    SlideToggle,\n    ExpandableSection,\n    AlertText,\n    OverflowGradient,\n  },\n\n  data: () => ({\n    formValid: true,\n    name: \"\",\n    startTime: 9,\n    endTime: 17,\n    loading: false,\n    selectedDays: [],\n    selectedDaysOfWeek: [],\n    startOnMonday: false,\n    notificationsEnabled: false,\n\n    daysOnly: false,\n    daysOnlyOptions: Object.freeze([\n      { text: \"Dates and times\", value: false },\n      { text: \"Dates only\", value: true },\n    ]),\n\n    // Date options\n    dateOptions: Object.freeze({\n      SPECIFIC: \"Specific dates\",\n      DOW: \"Days of the week\",\n    }),\n    selectedDateOption: \"Specific dates\",\n\n    // Email reminders\n    showEmailReminders: false,\n    emails: [], // For email reminders\n\n    // Advanced options\n    showAdvancedOptions: false,\n    collectEmails: false,\n    blindAvailabilityEnabled: false,\n    timezone: {},\n    sendEmailAfterXResponsesEnabled: false,\n    sendEmailAfterXResponses: 3,\n\n    helpDialog: false,\n\n    // Unsaved changes\n    initialEventData: {},\n\n    hasMounted: false,\n  }),\n\n  mounted() {\n    if (Object.keys(this.contactsPayload).length > 0) {\n      this.toggleEmailReminders(true)\n\n      /** Get previously filled out data after enabling contacts  */\n      this.name = this.contactsPayload.name\n      this.startTime = this.contactsPayload.startTime\n      this.endTime = this.contactsPayload.endTime\n      this.daysOnly = this.contactsPayload.daysOnly\n      this.selectedDateOption = this.contactsPayload.selectedDateOption\n      this.selectedDaysOfWeek = this.contactsPayload.selectedDaysOfWeek\n      this.selectedDays = this.contactsPayload.selectedDays\n      this.notificationsEnabled = this.contactsPayload.notificationsEnabled\n      this.timezone = this.contactsPayload.timezone\n\n      this.$refs.form.resetValidation()\n    }\n\n    this.$nextTick(() => {\n      this.hasMounted = true\n    })\n  },\n\n  computed: {\n    ...mapState([\"authUser\", \"daysOnlyEnabled\"]),\n    nameRules() {\n      return [(v) => !!v || \"Event name is required\"]\n    },\n    selectedDaysRules() {\n      return [\n        (selectedDays) =>\n          selectedDays.length > 0 || \"Please select at least one day\",\n      ]\n    },\n    addedEmails() {\n      if (Object.keys(this.contactsPayload).length > 0)\n        return this.contactsPayload.emails\n      return this.event && this.event.remindees\n        ? this.event.remindees.map((r) => r.email)\n        : []\n    },\n    times() {\n      return getTimeOptions()\n    },\n    minCalendarDate() {\n      if (this.edit) {\n        return \"\"\n      }\n\n      let today = new Date()\n      let dd = String(today.getDate()).padStart(2, \"0\")\n      let mm = String(today.getMonth() + 1).padStart(2, \"0\")\n      let yyyy = today.getFullYear()\n\n      return yyyy + \"-\" + mm + \"-\" + dd\n    },\n    isPhone() {\n      return isPhone(this.$vuetify)\n    },\n  },\n\n  methods: {\n    ...mapActions([\"showError\"]),\n    blurNameField() {\n      this.$refs[\"name-field\"].blur()\n    },\n    reset() {\n      this.name = \"\"\n      this.startTime = 9\n      this.endTime = 17\n      this.selectedDays = []\n      this.selectedDaysOfWeek = []\n      this.notificationsEnabled = false\n      this.daysOnly = false\n      this.selectedDateOption = \"Specific dates\"\n      this.emails = []\n      this.showAdvancedOptions = false\n      this.blindAvailabilityEnabled = false\n      this.sendEmailAfterXResponsesEnabled = false\n      this.sendEmailAfterXResponses = 3\n      this.collectEmails = false\n\n      this.$refs.form.resetValidation()\n    },\n    submit() {\n      if (!this.$refs.form.validate()) return\n\n      this.selectedDays.sort()\n\n      // Get duration of event\n      let duration = this.endTime - this.startTime\n      if (duration <= 0) duration += 24\n\n      // Get date objects for each selected day\n      let dates = []\n      let type = \"\"\n      if (this.daysOnly) {\n        duration = 0\n        type = eventTypes.SIGNUP\n\n        for (const day of this.selectedDays) {\n          const date = new Date(`${day} 00:00:00Z`)\n          dates.push(date)\n        }\n      } else {\n        const startTimeString = timeNumToTimeString(this.startTime)\n        if (this.selectedDateOption === this.dateOptions.SPECIFIC) {\n          type = eventTypes.SPECIFIC_DATES\n\n          for (const day of this.selectedDays) {\n            const date = dayjs.tz(\n              `${day} ${startTimeString}`,\n              this.timezone.value\n            )\n            dates.push(date.toDate())\n          }\n        } else if (this.selectedDateOption === this.dateOptions.DOW) {\n          type = eventTypes.DOW\n\n          this.selectedDaysOfWeek.sort((a, b) => a - b)\n          this.selectedDaysOfWeek = this.selectedDaysOfWeek.filter(\n            (dayIndex) => {\n              return this.startOnMonday ? dayIndex !== 0 : dayIndex !== 7\n            }\n          )\n          for (const dayIndex of this.selectedDaysOfWeek) {\n            const day = dayIndexToDayString[dayIndex]\n            const date = dayjs.tz(\n              `${day} ${startTimeString}`,\n              this.timezone.value\n            )\n            dates.push(date.toDate())\n          }\n        }\n      }\n\n      this.loading = true\n\n      const payload = {\n        name: this.name,\n        duration: duration,\n        dates: dates,\n        notificationsEnabled: this.notificationsEnabled,\n        blindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        daysOnly: this.daysOnly,\n        remindees: this.emails,\n        type: type,\n        isSignUpForm: true,\n        sendEmailAfterXResponses: this.sendEmailAfterXResponsesEnabled\n          ? parseInt(this.sendEmailAfterXResponses)\n          : -1,\n        collectEmails: this.collectEmails,\n        startOnMonday: this.startOnMonday,\n        creatorPosthogId: this.$posthog?.get_distinct_id(),\n      }\n      const posthogPayload = {\n        eventName: this.name,\n        eventDuration: duration,\n        eventDates: JSON.stringify(dates),\n        eventNotificationsEnabled: this.notificationsEnabled,\n        eventBlindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        eventDaysOnly: this.daysOnly,\n        eventRemindees: this.emails,\n        eventType: type,\n        eventIsSignUpForm: true,\n        eventSendEmailAfterXResponses: this.sendEmailAfterXResponsesEnabled\n          ? parseInt(this.sendEmailAfterXResponses)\n          : -1,\n        eventCollectEmails: this.collectEmails,\n        eventStartOnMonday: this.startOnMonday,\n      }\n\n      if (!this.edit) {\n        // Create new event on backend\n        post(\"/events\", payload)\n          .then(({ eventId, shortId }) => {\n            this.$router.push({\n              name: \"signUp\",\n              params: {\n                signUpId: shortId ?? eventId,\n                initialTimezone: this.timezone,\n                editingMode: true,\n              },\n            })\n\n            this.$emit(\"input\", false)\n            this.reset()\n\n            posthogPayload.eventId = eventId\n            this.$posthog?.capture(\"Sign up form created\", posthogPayload)\n          })\n          .catch((err) => {\n            this.showError(\n              \"There was a problem creating that event! Please try again later.\"\n            )\n          })\n          .finally(() => {\n            this.loading = false\n          })\n      } else {\n        // Edit event on backend\n        if (this.event) {\n          put(`/events/${this.event._id}`, payload)\n            .then(() => {\n              posthogPayload.eventId = this.event._id\n              this.$posthog?.capture(\"Sign up form edited\", posthogPayload)\n\n              this.$emit(\"input\", false)\n              this.reset()\n              window.location.reload()\n            })\n            .catch((err) => {\n              this.showError(\n                \"There was a problem editing this event! Please try again later.\"\n              )\n            })\n            .finally(() => {\n              this.loading = false\n            })\n        }\n      }\n    },\n\n    toggleEmailReminders(delayed = false) {\n      if (delayed) {\n        setTimeout(\n          () => (this.showEmailReminders = !this.showEmailReminders),\n          300\n        )\n      } else {\n        this.showEmailReminders = !this.showEmailReminders\n      }\n    },\n\n    /** Redirects user to oauth page requesting access to the user's contacts */\n    requestContactsAccess({ emails }) {\n      const payload = {\n        emails,\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        daysOnly: this.daysOnly,\n        selectedDays: this.selectedDays,\n        selectedDaysOfWeek: this.selectedDaysOfWeek,\n        selectedDateOption: this.selectedDateOption,\n        notificationsEnabled: this.notificationsEnabled,\n        timezone: this.timezone,\n      }\n      signInGoogle({\n        state: {\n          type: authTypes.EVENT_CONTACTS,\n          eventId: this.event ? this.event.shortId ?? this.event._id : \"\",\n          openNewGroup: false,\n          payload,\n        },\n        requestContactsPermission: true,\n      })\n    },\n    /** Update state based on the contactsPayload after granting contacts access */\n    contactsAccessGranted({ curScheduledEvent, ...data }) {\n      this.curScheduledEvent = curScheduledEvent\n      this.$refs.confirmDetailsDialog?.setData(data)\n      this.confirmDetailsDialog = true\n    },\n\n    /** Populates the form fields based on this.event */\n    updateFieldsFromEvent() {\n      if (this.event) {\n        this.name = this.event.name\n\n        // Set start time, accounting for the timezone\n        this.startTime = Math.floor(\n          dateToTimeNum(getDateWithTimezone(this.event.dates[0]), true)\n        )\n        this.startTime %= 24\n\n        this.endTime = (this.startTime + this.event.duration) % 24\n        this.notificationsEnabled = this.event.notificationsEnabled\n        this.blindAvailabilityEnabled = this.event.blindAvailabilityEnabled\n        this.daysOnly = this.event.daysOnly\n\n        if (\n          this.event.sendEmailAfterXResponses !== null &&\n          this.event.sendEmailAfterXResponses > 0\n        ) {\n          this.sendEmailAfterXResponsesEnabled = true\n          this.sendEmailAfterXResponses = this.event.sendEmailAfterXResponses\n        }\n\n        if (this.event.daysOnly) {\n          this.selectedDateOption = this.dateOptions.SPECIFIC\n          const selectedDays = []\n          for (let date of this.event.dates) {\n            selectedDays.push(getISODateString(date, true))\n          }\n          this.selectedDays = selectedDays\n        } else {\n          if (this.event.type === eventTypes.SPECIFIC_DATES) {\n            this.selectedDateOption = this.dateOptions.SPECIFIC\n            const selectedDays = []\n            for (let date of this.event.dates) {\n              date = getDateWithTimezone(date)\n\n              selectedDays.push(getISODateString(date, true))\n            }\n            this.selectedDays = selectedDays\n          } else if (this.event.type === eventTypes.DOW) {\n            this.selectedDateOption = this.dateOptions.DOW\n            const selectedDaysOfWeek = []\n            for (let date of this.event.dates) {\n              date = getDateWithTimezone(date)\n\n              if (this.event.startOnMonday && date.getUTCDay() === 0) {\n                selectedDaysOfWeek.push(7)\n              } else {\n                selectedDaysOfWeek.push(date.getUTCDay())\n              }\n            }\n            this.selectedDaysOfWeek = selectedDaysOfWeek\n            if (this.event.startOnMonday) {\n              this.startOnMonday = true\n            }\n          }\n        }\n      }\n    },\n    resetToEventData() {\n      this.updateFieldsFromEvent()\n      // this.$refs.emailInput.reset()\n    },\n    setInitialEventData() {\n      this.initialEventData = {\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        daysOnly: this.daysOnly,\n        selectedDays: this.selectedDays,\n        selectedDaysOfWeek: this.selectedDaysOfWeek,\n        selectedDateOption: this.selectedDateOption,\n        notificationsEnabled: this.notificationsEnabled,\n        emails: [...this.emails],\n        blindAvailabilityEnabled: this.blindAvailabilityEnabled,\n        sendEmailAfterXResponsesEnabled: this.sendEmailAfterXResponsesEnabled,\n        sendEmailAfterXResponses: this.sendEmailAfterXResponses,\n      }\n    },\n    hasEventBeenEdited() {\n      return (\n        this.name !== this.initialEventData.name ||\n        this.startTime !== this.initialEventData.startTime ||\n        this.endTime !== this.initialEventData.endTime ||\n        this.selectedDateOption !== this.initialEventData.selectedDateOption ||\n        JSON.stringify(this.selectedDays) !==\n          JSON.stringify(this.initialEventData.selectedDays) ||\n        JSON.stringify(this.selectedDaysOfWeek) !==\n          JSON.stringify(this.initialEventData.selectedDaysOfWeek) ||\n        this.daysOnly !== this.initialEventData.daysOnly ||\n        this.notificationsEnabled !==\n          this.initialEventData.notificationsEnabled ||\n        JSON.stringify(this.emails) !==\n          JSON.stringify(this.initialEventData.emails) ||\n        this.blindAvailabilityEnabled !==\n          this.initialEventData.blindAvailabilityEnabled ||\n        this.sendEmailAfterXResponsesEnabled !==\n          this.initialEventData.sendEmailAfterXResponsesEnabled ||\n        this.sendEmailAfterXResponses !==\n          this.initialEventData.sendEmailAfterXResponses\n      )\n    },\n  },\n\n  watch: {\n    event: {\n      immediate: true,\n      handler() {\n        this.updateFieldsFromEvent()\n        this.setInitialEventData()\n      },\n    },\n    selectedDateOption() {\n      // Reset the other date / day selection when date option is changed\n      if (this.selectedDateOption === this.dateOptions.SPECIFIC) {\n        this.selectedDaysOfWeek = []\n      } else if (this.selectedDateOption === this.dateOptions.DOW) {\n        this.selectedDays = []\n      }\n    },\n  },\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}