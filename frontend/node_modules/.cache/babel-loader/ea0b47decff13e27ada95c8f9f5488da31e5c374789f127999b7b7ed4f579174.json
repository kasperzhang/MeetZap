{"ast":null,"code":"import { getDateRangeStringForEvent, _delete, isPhone, post } from \"@/utils\";\nimport { mapActions, mapState } from \"vuex\";\nimport { eventTypes } from \"@/constants\";\nexport default {\n  name: \"EventItem\",\n  props: {\n    event: {\n      type: Object,\n      required: true\n    },\n    folderId: {\n      type: String,\n      default: null\n    }\n  },\n  data: () => ({\n    showMenu: false,\n    duplicateDialog: false,\n    duplicateDialogOptions: {\n      name: \"\",\n      copyAvailability: false,\n      loading: false\n    },\n    removeDialog: false\n  }),\n  computed: {\n    ...mapState([\"authUser\", \"folders\"]),\n    dateString() {\n      return getDateRangeStringForEvent(this.event);\n    },\n    isOwner() {\n      return this.event.ownerId === this.authUser._id;\n    },\n    isGroup() {\n      return this.event.type === eventTypes.GROUP;\n    },\n    isSignUp() {\n      return this.event.isSignUpForm;\n    },\n    linkTo() {\n      if (this.isGroup) {\n        return \"group\";\n      } else if (this.isSignUp) {\n        return \"signUp\";\n      }\n      return \"event\";\n    },\n    identifier() {\n      if (this.isGroup) {\n        return \"groupId\";\n      } else if (this.isSignUp) {\n        return \"signUpId\";\n      }\n      return \"eventId\";\n    },\n    typeText() {\n      return this.isGroup ? \"group\" : \"event\";\n    },\n    userHasResponded() {\n      return this.event.hasResponded ?? false;\n    }\n  },\n  methods: {\n    ...mapActions([\"showError\", \"showInfo\", \"getEvents\", \"setEventFolder\"]),\n    moveEventToFolder(folderId) {\n      this.setEventFolder({\n        eventId: this.event._id,\n        folderId: folderId\n      });\n      this.showMenu = false;\n    },\n    copyLink() {\n      /* Copies event link to clipboard */\n      navigator.clipboard.writeText(`${window.location.origin}/e/${this.event.shortId ?? this.event._id}`);\n      this.showInfo(\"Link copied to clipboard!\");\n      this.showMenu = false;\n    },\n    isPhone() {\n      return isPhone(this.$vuetify);\n    },\n    removeEvent() {\n      _delete(`/events/${this.event._id}`).then(() => {\n        this.getEvents();\n        this.$refs.menu.save(); // NOTE: Not sure why but without this line, the menu persists to the next event.\n\n        this.$posthog?.capture(\"Event removed\", {\n          eventId: this.event._id,\n          eventName: this.event.name,\n          eventDuration: this.event.duration,\n          eventDates: this.event.dates,\n          eventNotificationsEnabled: this.event.notificationsEnabled,\n          eventType: this.event.type\n        });\n      }).catch(err => {\n        this.showError(\"There was a problem removing that event! Please try again later.\");\n      });\n    },\n    duplicateEvent() {\n      this.duplicateDialogOptions.loading = true;\n      post(`/events/${this.event._id}/duplicate`, {\n        eventName: this.duplicateDialogOptions.name,\n        copyAvailability: this.duplicateDialogOptions.copyAvailability\n      }).then(({\n        eventId,\n        shortId\n      }) => {\n        this.getEvents();\n        this.$refs.menu.save(); // NOTE: Not sure why but without this line, the menu persists to the next event.\n\n        this.$posthog?.capture(\"Event duplicated\", {\n          eventId: eventId,\n          eventName: this.duplicateDialogOptions.name,\n          eventDuration: this.event.duration,\n          eventDates: this.event.dates,\n          eventNotificationsEnabled: this.event.notificationsEnabled,\n          eventType: this.event.type,\n          copyAvailability: this.duplicateDialogOptions.copyAvailability\n        });\n      }).catch(err => {\n        this.showError(\"There was a problem duplicating that event! Please try again later.\");\n      }).finally(() => {\n        this.duplicateDialogOptions.loading = false;\n      });\n    }\n  },\n  watch: {\n    duplicateDialog: {\n      immediate: true,\n      handler(val) {\n        if (val) {\n          this.duplicateDialogOptions.name = `Copy of ${this.event.name}`;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["getDateRangeStringForEvent","_delete","isPhone","post","mapActions","mapState","eventTypes","name","props","event","type","Object","required","folderId","String","default","data","showMenu","duplicateDialog","duplicateDialogOptions","copyAvailability","loading","removeDialog","computed","dateString","isOwner","ownerId","authUser","_id","isGroup","GROUP","isSignUp","isSignUpForm","linkTo","identifier","typeText","userHasResponded","hasResponded","methods","moveEventToFolder","setEventFolder","eventId","copyLink","navigator","clipboard","writeText","window","location","origin","shortId","showInfo","$vuetify","removeEvent","then","getEvents","$refs","menu","save","$posthog","capture","eventName","eventDuration","duration","eventDates","dates","eventNotificationsEnabled","notificationsEnabled","eventType","catch","err","showError","duplicateEvent","finally","watch","immediate","handler","val"],"sources":["src/components/EventItem.vue"],"sourcesContent":["<template>\n  <router-link\n    :to=\"{\n      name: linkTo,\n      params: { [identifier]: event.shortId ?? event._id },\n    }\"\n  >\n    <v-container\n      v-ripple\n      class=\"tw-flex tw-min-h-16 tw-items-center tw-justify-between tw-rounded-lg tw-bg-white tw-px-4 tw-py-2.5 tw-text-black tw-drop-shadow tw-transition-all hover:tw-drop-shadow-md sm:tw-py-3\"\n      :data-ph-capture-attribute-event-id=\"event._id\"\n      :data-ph-capture-attribute-event-name=\"event.name\"\n    >\n      <div class=\"tw-flex tw-items-center\">\n        <div\n          class=\"tw-flex tw-size-10 tw-items-center tw-justify-center tw-rounded\"\n          :class=\"{\n            'tw-bg-pale-green': isOwner,\n            'tw-bg-off-white': !isOwner,\n          }\"\n        >\n          <v-icon :color=\"isOwner ? 'green' : 'grey'\">{{\n            isGroup ? \"mdi-account-group\" : \"mdi-calendar\"\n          }}</v-icon>\n        </div>\n        <div class=\"tw-ml-3\">\n          <div>{{ this.event.name }}</div>\n          <div class=\"tw-text-sm tw-font-light tw-text-very-dark-gray\">\n            {{ dateString }}\n          </div>\n        </div>\n      </div>\n      <div class=\"tw-min-w-max\">\n        <div\n          v-if=\"isGroup && !userHasResponded\"\n          class=\"tw-inline-block tw-text-sm tw-italic tw-text-gray\"\n        >\n          Invited\n        </div>\n        <v-chip\n          v-else\n          small\n          class=\"tw-m-0.5 tw-bg-off-white tw-text-very-dark-gray\"\n        >\n          <v-icon left small> mdi-account-multiple </v-icon>\n          {{ this.event.numResponses }}\n        </v-chip>\n        <v-menu\n          v-if=\"isOwner\"\n          v-model=\"showMenu\"\n          ref=\"menu\"\n          :close-on-content-click=\"false\"\n          transition=\"slide-x-transition\"\n          right\n          offset-x\n        >\n          <template v-slot:activator=\"{ on, attrs }\">\n            <v-btn plain icon v-bind=\"attrs\" v-on=\"on\" @click.prevent>\n              <v-icon>mdi-dots-vertical</v-icon>\n            </v-btn>\n          </template>\n\n          <v-list class=\"tw-py-1\" dense>\n            <v-list-item @click=\"copyLink\">\n              <v-list-item-content>\n                <v-list-item-title>Copy link</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n            <v-divider />\n            <v-dialog\n              v-if=\"!isGroup\"\n              v-model=\"duplicateDialog\"\n              width=\"400\"\n              persistent\n            >\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-list-item id=\"duplicate-event-btn\" v-bind=\"attrs\" v-on=\"on\">\n                  <v-list-item-content>\n                    <v-list-item-title>Duplicate</v-list-item-title>\n                  </v-list-item-content>\n                </v-list-item>\n              </template>\n              <v-card>\n                <v-card-title>Duplicate {{ typeText }}</v-card-title>\n                <v-card-text>\n                  <v-text-field\n                    v-model=\"duplicateDialogOptions.name\"\n                    required\n                    placeholder=\"Name your event...\"\n                    :disabled=\"duplicateDialogOptions.loading\"\n                    hide-details\n                    solo\n                  />\n                  <v-checkbox\n                    v-model=\"duplicateDialogOptions.copyAvailability\"\n                    label=\"Copy responses\"\n                    :disabled=\"duplicateDialogOptions.loading\"\n                    hide-details\n                    class=\"tw-mt-2\"\n                  />\n                </v-card-text>\n                <v-card-actions>\n                  <v-spacer />\n                  <v-btn\n                    text\n                    @click=\"duplicateDialog = false\"\n                    :disabled=\"duplicateDialogOptions.loading\"\n                    >Cancel</v-btn\n                  >\n                  <v-btn\n                    text\n                    color=\"primary\"\n                    @click=\"duplicateEvent\"\n                    :loading=\"duplicateDialogOptions.loading\"\n                    >Confirm</v-btn\n                  >\n                </v-card-actions>\n              </v-card>\n            </v-dialog>\n            <v-menu\n              v-if=\"isOwner\"\n              right\n              offset-x\n              :close-on-content-click=\"false\"\n              open-on-hover\n            >\n              <template v-slot:activator=\"{ on: onMenu, attrs: attrsMenu }\">\n                <v-list-item\n                  v-bind=\"attrsMenu\"\n                  v-on=\"onMenu\"\n                  class=\"tw-cursor-pointer tw-pr-1 hover:tw-bg-light-gray\"\n                >\n                  <v-list-item-title>Move to</v-list-item-title>\n                  <v-list-item-icon>\n                    <v-icon small>mdi-chevron-right</v-icon>\n                  </v-list-item-icon>\n                </v-list-item>\n              </template>\n              <v-list dense class=\"tw-py-1\">\n                <v-list-item @click=\"moveEventToFolder(null)\" class=\"tw-pr-1\">\n                  <v-list-item-title>No folder</v-list-item-title>\n                  <v-list-item-action v-if=\"folderId === null\">\n                    <v-icon small>mdi-check</v-icon>\n                  </v-list-item-action>\n                </v-list-item>\n                <v-list-item\n                  v-for=\"folder in folders\"\n                  :key=\"folder._id\"\n                  @click=\"moveEventToFolder(folder._id)\"\n                  class=\"tw-pr-1\"\n                >\n                  <v-list-item-title>{{ folder.name }}</v-list-item-title>\n                  <v-list-item-action v-if=\"folder._id === folderId\">\n                    <v-icon small>mdi-check</v-icon>\n                  </v-list-item-action>\n                </v-list-item>\n              </v-list>\n            </v-menu>\n            <v-divider />\n            <v-dialog v-model=\"removeDialog\" width=\"400\" persistent>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-list-item\n                  id=\"delete-event-btn\"\n                  class=\"red--text\"\n                  v-bind=\"attrs\"\n                  v-on=\"on\"\n                >\n                  <v-list-item-content>\n                    <v-list-item-title>Delete {{ typeText }}</v-list-item-title>\n                  </v-list-item-content>\n                </v-list-item>\n              </template>\n              <v-card>\n                <v-card-title>Are you sure?</v-card-title>\n                <v-card-text\n                  >Are you sure you want to delete this\n                  {{ typeText }}?</v-card-text\n                >\n                <v-card-actions>\n                  <v-spacer />\n                  <v-btn text @click=\"removeDialog = false\">Cancel</v-btn>\n                  <v-btn text color=\"error\" @click=\"removeEvent\"\n                    >I'm sure</v-btn\n                  >\n                </v-card-actions>\n              </v-card>\n            </v-dialog>\n          </v-list>\n        </v-menu>\n        <v-icon v-else class=\"tw-ml-2 tw-mr-1 tw-opacity-75\"\n          >mdi-chevron-right</v-icon\n        >\n      </div>\n    </v-container>\n  </router-link>\n</template>\n\n<script>\nimport { getDateRangeStringForEvent, _delete, isPhone, post } from \"@/utils\"\nimport { mapActions, mapState } from \"vuex\"\nimport { eventTypes } from \"@/constants\"\n\nexport default {\n  name: \"EventItem\",\n\n  props: {\n    event: { type: Object, required: true },\n    folderId: { type: String, default: null },\n  },\n\n  data: () => ({\n    showMenu: false,\n    duplicateDialog: false,\n    duplicateDialogOptions: {\n      name: \"\",\n      copyAvailability: false,\n      loading: false,\n    },\n    removeDialog: false,\n  }),\n\n  computed: {\n    ...mapState([\"authUser\", \"folders\"]),\n    dateString() {\n      return getDateRangeStringForEvent(this.event)\n    },\n    isOwner() {\n      return this.event.ownerId === this.authUser._id\n    },\n    isGroup() {\n      return this.event.type === eventTypes.GROUP\n    },\n    isSignUp() {\n      return this.event.isSignUpForm\n    },\n    linkTo() {\n      if (this.isGroup) {\n        return \"group\"\n      } else if (this.isSignUp) {\n        return \"signUp\"\n      }\n\n      return \"event\"\n    },\n    identifier() {\n      if (this.isGroup) {\n        return \"groupId\"\n      } else if (this.isSignUp) {\n        return \"signUpId\"\n      }\n      return \"eventId\"\n    },\n    typeText() {\n      return this.isGroup ? \"group\" : \"event\"\n    },\n    userHasResponded() {\n      return this.event.hasResponded ?? false\n    },\n  },\n\n  methods: {\n    ...mapActions([\"showError\", \"showInfo\", \"getEvents\", \"setEventFolder\"]),\n    moveEventToFolder(folderId) {\n      this.setEventFolder({\n        eventId: this.event._id,\n        folderId: folderId,\n      })\n      this.showMenu = false\n    },\n    copyLink() {\n      /* Copies event link to clipboard */\n      navigator.clipboard.writeText(\n        `${window.location.origin}/e/${this.event.shortId ?? this.event._id}`\n      )\n      this.showInfo(\"Link copied to clipboard!\")\n      this.showMenu = false\n    },\n    isPhone() {\n      return isPhone(this.$vuetify)\n    },\n    removeEvent() {\n      _delete(`/events/${this.event._id}`)\n        .then(() => {\n          this.getEvents()\n          this.$refs.menu.save() // NOTE: Not sure why but without this line, the menu persists to the next event.\n\n          this.$posthog?.capture(\"Event removed\", {\n            eventId: this.event._id,\n            eventName: this.event.name,\n            eventDuration: this.event.duration,\n            eventDates: this.event.dates,\n            eventNotificationsEnabled: this.event.notificationsEnabled,\n            eventType: this.event.type,\n          })\n        })\n        .catch((err) => {\n          this.showError(\n            \"There was a problem removing that event! Please try again later.\"\n          )\n        })\n    },\n    duplicateEvent() {\n      this.duplicateDialogOptions.loading = true\n      post(`/events/${this.event._id}/duplicate`, {\n        eventName: this.duplicateDialogOptions.name,\n        copyAvailability: this.duplicateDialogOptions.copyAvailability,\n      })\n        .then(({ eventId, shortId }) => {\n          this.getEvents()\n          this.$refs.menu.save() // NOTE: Not sure why but without this line, the menu persists to the next event.\n\n          this.$posthog?.capture(\"Event duplicated\", {\n            eventId: eventId,\n            eventName: this.duplicateDialogOptions.name,\n            eventDuration: this.event.duration,\n            eventDates: this.event.dates,\n            eventNotificationsEnabled: this.event.notificationsEnabled,\n            eventType: this.event.type,\n            copyAvailability: this.duplicateDialogOptions.copyAvailability,\n          })\n        })\n        .catch((err) => {\n          this.showError(\n            \"There was a problem duplicating that event! Please try again later.\"\n          )\n        })\n        .finally(() => {\n          this.duplicateDialogOptions.loading = false\n        })\n    },\n  },\n\n  watch: {\n    duplicateDialog: {\n      immediate: true,\n      handler(val) {\n        if (val) {\n          this.duplicateDialogOptions.name = `Copy of ${this.event.name}`\n        }\n      },\n    },\n  },\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}