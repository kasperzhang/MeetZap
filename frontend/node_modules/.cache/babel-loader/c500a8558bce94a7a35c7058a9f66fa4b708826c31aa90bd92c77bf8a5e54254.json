{"ast":null,"code":"import { allTimezones } from \"@/constants\";\nimport spacetime from \"spacetime\";\nexport default {\n  name: \"TimezoneSelector\",\n  props: {\n    value: {\n      type: Object,\n      required: true\n    },\n    label: {\n      type: String,\n      default: \"当前时区\"\n    },\n    labelColor: {\n      type: String,\n      default: \"\"\n    }\n  },\n  created() {\n    if (localStorage[\"timezone\"]) {\n      this.timezoneModified = true;\n    }\n    if (this.value.value) return; // Timezone has already been set\n\n    // Set timezone to localstorage timezone if localstorage is set\n    if (localStorage[\"timezone\"]) {\n      this.$emit(\"input\", JSON.parse(localStorage[\"timezone\"]));\n      return;\n    }\n\n    // Otherwise, set timezone to local timezone\n    this.$emit(\"input\", this.getLocalTimezone());\n  },\n  data() {\n    return {\n      timezoneModified: false // Whether the timezone has been modified from the local timezone\n    };\n  },\n  computed: {\n    /** Returns an array of all supported timezones */\n    timezones() {\n      // ===============================================================================\n      // Source: https://github.com/ndom91/react-timezone-select/blob/main/src/index.tsx\n      // ===============================================================================\n\n      const t = Object.entries(allTimezones).map(zone => {\n        try {\n          const now = spacetime.now(zone[0]);\n          const tz = now.timezone();\n          const min = tz.current.offset * 60;\n          const hr = `${min / 60 ^ 0}:${min % 60 === 0 ? \"00\" : Math.abs(min % 60)}`;\n          const gmtString = `(GMT${hr.includes(\"-\") ? hr : `+${hr}`})`;\n          const label = `${zone[1]}`;\n          return {\n            value: tz.name,\n            label: label,\n            gmtString: gmtString,\n            offset: tz.current.offset * 60\n          };\n        } catch (e) {\n          console.error(e);\n          return null;\n        }\n      }).filter(Boolean).sort((a, b) => a.offset - b.offset);\n      return t;\n    }\n  },\n  methods: {\n    /** Updates local storage and emits the new timezone */\n    onChange(val) {\n      localStorage[\"timezone\"] = JSON.stringify(val);\n      this.$emit(\"input\", val);\n      this.timezoneModified = true;\n    },\n    /** Returns a timezone object for the local timezone */\n    getLocalTimezone() {\n      const localTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      let timezoneObject = this.timezones.find(t => t.value === localTimezone);\n      if (!timezoneObject) {\n        const offset = spacetime.now(localTimezone).timezone().current.offset * 60;\n        timezoneObject = this.timezones.find(t => t.offset === offset);\n      }\n      return timezoneObject;\n    },\n    /** Resets timezone to the local timezone and clears localstorage as well */\n    resetTimezone() {\n      this.$emit(\"input\", this.getLocalTimezone());\n      localStorage.removeItem(\"timezone\");\n      this.timezoneModified = false;\n    }\n  }\n};","map":{"version":3,"names":["allTimezones","spacetime","name","props","value","type","Object","required","label","String","default","labelColor","created","localStorage","timezoneModified","$emit","JSON","parse","getLocalTimezone","data","computed","timezones","t","entries","map","zone","now","tz","timezone","min","current","offset","hr","Math","abs","gmtString","includes","e","console","error","filter","Boolean","sort","a","b","methods","onChange","val","stringify","localTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","timezoneObject","find","resetTimezone","removeItem"],"sources":["src/components/schedule_overlap/TimezoneSelector.vue"],"sourcesContent":["<!-- Allows user to change timezone -->\n<template>\n  <div\n    class=\"tw-flex tw-items-center tw-justify-center\"\n    id=\"timezone-select-container\"\n  >\n    <div :class=\"`tw-mr-2 tw-mt-px ${labelColor}`\">{{ label }}</div>\n    <v-select\n      id=\"timezone-select\"\n      :value=\"value\"\n      @input=\"onChange\"\n      :items=\"timezones\"\n      :menu-props=\"{ auto: true }\"\n      class=\"tw-z-20 -tw-mt-px tw-w-52 tw-text-sm\"\n      dense\n      color=\"#219653\"\n      item-color=\"green\"\n      hide-details\n      item-text=\"label\"\n      return-object\n    >\n      <template v-slot:item=\"{ item, on, attrs }\">\n        <v-list-item v-bind=\"attrs\" v-on=\"on\">\n          <v-list-item-content>\n            <v-list-item-title>\n              {{ item.gmtString }} {{ item.label }}\n            </v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n      </template>\n      <template v-slot:selection=\"{ item }\">\n        <div class=\"v-select__selection v-select__selection--comma\">\n          {{ item.gmtString }} {{ item.label }}\n        </div>\n      </template>\n    </v-select>\n    <v-btn v-if=\"timezoneModified\" @click=\"resetTimezone\" icon color=\"primary\"\n      ><v-icon>mdi-refresh</v-icon></v-btn\n    >\n  </div>\n</template>\n\n<script>\nimport { allTimezones } from \"@/constants\"\nimport spacetime from \"spacetime\"\n\nexport default {\n  name: \"TimezoneSelector\",\n\n  props: {\n    value: { type: Object, required: true },\n    label: { type: String, default: \"当前时区\" },\n    labelColor: { type: String, default: \"\" },\n  },\n\n  created() {\n    if (localStorage[\"timezone\"]) {\n      this.timezoneModified = true\n    }\n\n    if (this.value.value) return // Timezone has already been set\n\n    // Set timezone to localstorage timezone if localstorage is set\n    if (localStorage[\"timezone\"]) {\n      this.$emit(\"input\", JSON.parse(localStorage[\"timezone\"]))\n      return\n    }\n\n    // Otherwise, set timezone to local timezone\n    this.$emit(\"input\", this.getLocalTimezone())\n  },\n\n  data() {\n    return {\n      timezoneModified: false, // Whether the timezone has been modified from the local timezone\n    }\n  },\n\n  computed: {\n    /** Returns an array of all supported timezones */\n    timezones() {\n      // ===============================================================================\n      // Source: https://github.com/ndom91/react-timezone-select/blob/main/src/index.tsx\n      // ===============================================================================\n\n      const t = Object.entries(allTimezones)\n        .map((zone) => {\n          try {\n            const now = spacetime.now(zone[0])\n            const tz = now.timezone()\n\n            const min = tz.current.offset * 60\n            const hr = `${(min / 60) ^ 0}:${\n              min % 60 === 0 ? \"00\" : Math.abs(min % 60)\n            }`\n            const gmtString = `(GMT${hr.includes(\"-\") ? hr : `+${hr}`})`\n            const label = `${zone[1]}`\n\n            return {\n              value: tz.name,\n              label: label,\n              gmtString: gmtString,\n              offset: tz.current.offset * 60,\n            }\n          } catch (e) {\n            console.error(e)\n            return null\n          }\n        })\n        .filter(Boolean)\n        .sort((a, b) => a.offset - b.offset)\n      return t\n    },\n  },\n\n  methods: {\n    /** Updates local storage and emits the new timezone */\n    onChange(val) {\n      localStorage[\"timezone\"] = JSON.stringify(val)\n      this.$emit(\"input\", val)\n      this.timezoneModified = true\n    },\n    /** Returns a timezone object for the local timezone */\n    getLocalTimezone() {\n      const localTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone\n      let timezoneObject = this.timezones.find((t) => t.value === localTimezone)\n\n      if (!timezoneObject) {\n        const offset =\n          spacetime.now(localTimezone).timezone().current.offset * 60\n        timezoneObject = this.timezones.find((t) => t.offset === offset)\n      }\n      return timezoneObject\n    },\n    /** Resets timezone to the local timezone and clears localstorage as well */\n    resetTimezone() {\n      this.$emit(\"input\", this.getLocalTimezone())\n      localStorage.removeItem(\"timezone\")\n      this.timezoneModified = false\n    },\n  },\n}\n</script>\n"],"mappings":"AA2CA,SAAAA,YAAA;AACA,OAAAC,SAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACAC,KAAA;MAAAC,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;IACAC,KAAA;MAAAH,IAAA,EAAAI,MAAA;MAAAC,OAAA;IAAA;IACAC,UAAA;MAAAN,IAAA,EAAAI,MAAA;MAAAC,OAAA;IAAA;EACA;EAEAE,QAAA;IACA,IAAAC,YAAA;MACA,KAAAC,gBAAA;IACA;IAEA,SAAAV,KAAA,CAAAA,KAAA;;IAEA;IACA,IAAAS,YAAA;MACA,KAAAE,KAAA,UAAAC,IAAA,CAAAC,KAAA,CAAAJ,YAAA;MACA;IACA;;IAEA;IACA,KAAAE,KAAA,eAAAG,gBAAA;EACA;EAEAC,KAAA;IACA;MACAL,gBAAA;IACA;EACA;EAEAM,QAAA;IACA;IACAC,UAAA;MACA;MACA;MACA;;MAEA,MAAAC,CAAA,GAAAhB,MAAA,CAAAiB,OAAA,CAAAvB,YAAA,EACAwB,GAAA,CAAAC,IAAA;QACA;UACA,MAAAC,GAAA,GAAAzB,SAAA,CAAAyB,GAAA,CAAAD,IAAA;UACA,MAAAE,EAAA,GAAAD,GAAA,CAAAE,QAAA;UAEA,MAAAC,GAAA,GAAAF,EAAA,CAAAG,OAAA,CAAAC,MAAA;UACA,MAAAC,EAAA,MAAAH,GAAA,aACAA,GAAA,qBAAAI,IAAA,CAAAC,GAAA,CAAAL,GAAA,MACA;UACA,MAAAM,SAAA,UAAAH,EAAA,CAAAI,QAAA,QAAAJ,EAAA,OAAAA,EAAA;UACA,MAAAxB,KAAA,MAAAiB,IAAA;UAEA;YACArB,KAAA,EAAAuB,EAAA,CAAAzB,IAAA;YACAM,KAAA,EAAAA,KAAA;YACA2B,SAAA,EAAAA,SAAA;YACAJ,MAAA,EAAAJ,EAAA,CAAAG,OAAA,CAAAC,MAAA;UACA;QACA,SAAAM,CAAA;UACAC,OAAA,CAAAC,KAAA,CAAAF,CAAA;UACA;QACA;MACA,GACAG,MAAA,CAAAC,OAAA,EACAC,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAD,CAAA,CAAAZ,MAAA,GAAAa,CAAA,CAAAb,MAAA;MACA,OAAAT,CAAA;IACA;EACA;EAEAuB,OAAA;IACA;IACAC,SAAAC,GAAA;MACAlC,YAAA,eAAAG,IAAA,CAAAgC,SAAA,CAAAD,GAAA;MACA,KAAAhC,KAAA,UAAAgC,GAAA;MACA,KAAAjC,gBAAA;IACA;IACA;IACAI,iBAAA;MACA,MAAA+B,aAAA,GAAAC,IAAA,CAAAC,cAAA,GAAAC,eAAA,GAAAC,QAAA;MACA,IAAAC,cAAA,QAAAjC,SAAA,CAAAkC,IAAA,CAAAjC,CAAA,IAAAA,CAAA,CAAAlB,KAAA,KAAA6C,aAAA;MAEA,KAAAK,cAAA;QACA,MAAAvB,MAAA,GACA9B,SAAA,CAAAyB,GAAA,CAAAuB,aAAA,EAAArB,QAAA,GAAAE,OAAA,CAAAC,MAAA;QACAuB,cAAA,QAAAjC,SAAA,CAAAkC,IAAA,CAAAjC,CAAA,IAAAA,CAAA,CAAAS,MAAA,KAAAA,MAAA;MACA;MACA,OAAAuB,cAAA;IACA;IACA;IACAE,cAAA;MACA,KAAAzC,KAAA,eAAAG,gBAAA;MACAL,YAAA,CAAA4C,UAAA;MACA,KAAA3C,gBAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}