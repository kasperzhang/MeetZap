{"ast":null,"code":"import { isPhone, validateEmail } from \"@/utils\";\nimport { mapState } from \"vuex\";\nimport SignUpBlock from \"./SignUpBlock.vue\";\nexport default {\n  name: \"SignUpForSlotDialog\",\n  emits: [\"input\", \"submit\"],\n  components: {\n    SignUpBlock\n  },\n  props: {\n    value: {\n      type: Boolean,\n      required: true\n    },\n    event: {\n      type: Object,\n      required: true\n    },\n    signUpBlock: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      formValid: false,\n      name: \"\",\n      email: \"\",\n      nameRules: [],\n      emailRules: []\n    };\n  },\n  computed: {\n    ...mapState([\"authUser\"]),\n    isPhone() {\n      return isPhone(this.$vuetify);\n    }\n  },\n  methods: {\n    submit() {\n      console.log(this.signUpBlock);\n      // Set rules only on submit\n      this.nameRules = [name => !!name || \"Name is required\"\n      // (name) =>\n      //   !this.signUpBlock.respondents.includes(name) || \"Name already taken\",\n      ];\n      this.emailRules = [email => !!email || \"Email is required\", email => !!validateEmail(email) || \"Invalid email\"];\n      this.$nextTick(() => {\n        if (!this.$refs.form.validate()) return;\n        this.$emit(\"submit\", {\n          name: this.name,\n          email: this.email\n        });\n      });\n    }\n  },\n  watch: {\n    value() {\n      if (this.value) {\n        this.name = \"\";\n        this.email = \"\";\n        this.nameRules = [];\n        this.emailRules = [];\n        this.$refs.form?.resetValidation();\n      }\n    },\n    name() {\n      // Default rules before submitting\n      this.nameRules = [\n        // (name) => !this.respondents.includes(name) || \"Name already taken\",\n      ];\n    },\n    email() {\n      // Default rules before submitting\n      this.emailRules = [];\n    }\n  }\n};","map":{"version":3,"names":["isPhone","validateEmail","mapState","SignUpBlock","name","emits","components","props","value","type","Boolean","required","event","Object","signUpBlock","data","formValid","email","nameRules","emailRules","computed","$vuetify","methods","submit","console","log","$nextTick","$refs","form","validate","$emit","watch","resetValidation"],"sources":["src/components/sign_up_form/SignUpForSlotDialog.vue"],"sourcesContent":["<template>\n  <v-dialog\n    :value=\"value\"\n    @input=\"(e) => $emit('input', e)\"\n    width=\"400\"\n    content-class=\"tw-m-0\"\n  >\n    <v-card>\n      <v-card-title class=\"tw-flex\">\n        <div>Join slot <span v-if=\"!authUser\">as</span></div>\n        <v-spacer />\n        <v-btn icon @click=\"$emit('input', false)\">\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n      </v-card-title>\n      <v-card-text>\n        <div class=\"mb-2\">\n          <SignUpBlock :signUpBlock=\"signUpBlock\" infoOnly></SignUpBlock>\n        </div>\n\n        <v-form\n          ref=\"form\"\n          v-model=\"formValid\"\n          lazy-validation\n          class=\"tw-flex tw-flex-col tw-gap-y-4\"\n          onsubmit=\"return false;\"\n        >\n          <div v-if=\"!authUser\" class=\"tw-flex tw-flex-col tw-gap-y-4\">\n            <v-text-field\n              v-model=\"name\"\n              @keyup.enter=\"submit\"\n              :rules=\"nameRules\"\n              placeholder=\"Enter your name...\"\n              autofocus\n              hide-details=\"auto\"\n              autocomplete=\"off\"\n              solo\n            ></v-text-field>\n            <v-text-field\n              v-if=\"event.collectEmails\"\n              v-model=\"email\"\n              @keyup.enter=\"submit\"\n              :rules=\"emailRules\"\n              placeholder=\"Enter your email...\"\n              hint=\"The event creator is collecting emails. We will never share your email with anyone or contact you in any way.\"\n              persistent-hint\n              solo\n            ></v-text-field>\n          </div>\n\n          <div>\n            NOTE: After joining a slot,\n            <span class=\"tw-font-bold\"\n              >you will need to contact the sign up creator in order to edit\n              your slot.</span\n            >\n          </div>\n\n          <div v-if=\"event.blindAvailabilityEnabled\">\n            The sign up creator has hidden attendees from each other.\n            <span class=\"tw-font-bold\"\n              >Your name will only be visible to you.</span\n            >\n          </div>\n\n          <div class=\"tw-flex\">\n            <v-spacer />\n            <v-btn\n              @click=\"submit\"\n              class=\"tw-bg-green\"\n              :dark=\"formValid\"\n              :disabled=\"!formValid\"\n            >\n              Join slot\n            </v-btn>\n          </div>\n        </v-form>\n      </v-card-text>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { isPhone, validateEmail } from \"@/utils\"\nimport { mapState } from \"vuex\"\n\nimport SignUpBlock from \"./SignUpBlock.vue\"\n\nexport default {\n  name: \"SignUpForSlotDialog\",\n\n  emits: [\"input\", \"submit\"],\n\n  components: { SignUpBlock },\n\n  props: {\n    value: { type: Boolean, required: true },\n    event: { type: Object, required: true },\n    signUpBlock: { type: Object, required: true },\n  },\n\n  data() {\n    return {\n      formValid: false,\n      name: \"\",\n      email: \"\",\n      nameRules: [],\n      emailRules: [],\n    }\n  },\n\n  computed: {\n    ...mapState([\"authUser\"]),\n    isPhone() {\n      return isPhone(this.$vuetify)\n    },\n  },\n\n  methods: {\n    submit() {\n      console.log(this.signUpBlock)\n      // Set rules only on submit\n      this.nameRules = [\n        (name) => !!name || \"Name is required\",\n        // (name) =>\n        //   !this.signUpBlock.respondents.includes(name) || \"Name already taken\",\n      ]\n      this.emailRules = [\n        (email) => !!email || \"Email is required\",\n        (email) => !!validateEmail(email) || \"Invalid email\",\n      ]\n\n      this.$nextTick(() => {\n        if (!this.$refs.form.validate()) return\n\n        this.$emit(\"submit\", { name: this.name, email: this.email })\n      })\n    },\n  },\n\n  watch: {\n    value() {\n      if (this.value) {\n        this.name = \"\"\n        this.email = \"\"\n        this.nameRules = []\n        this.emailRules = []\n\n        this.$refs.form?.resetValidation()\n      }\n    },\n    name() {\n      // Default rules before submitting\n      this.nameRules = [\n        // (name) => !this.respondents.includes(name) || \"Name already taken\",\n      ]\n    },\n    email() {\n      // Default rules before submitting\n      this.emailRules = []\n    },\n  },\n}\n</script>\n"],"mappings":"AAmFA,SAAAA,OAAA,EAAAC,aAAA;AACA,SAAAC,QAAA;AAEA,OAAAC,WAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;EAEAC,UAAA;IAAAH;EAAA;EAEAI,KAAA;IACAC,KAAA;MAAAC,IAAA,EAAAC,OAAA;MAAAC,QAAA;IAAA;IACAC,KAAA;MAAAH,IAAA,EAAAI,MAAA;MAAAF,QAAA;IAAA;IACAG,WAAA;MAAAL,IAAA,EAAAI,MAAA;MAAAF,QAAA;IAAA;EACA;EAEAI,KAAA;IACA;MACAC,SAAA;MACAZ,IAAA;MACAa,KAAA;MACAC,SAAA;MACAC,UAAA;IACA;EACA;EAEAC,QAAA;IACA,GAAAlB,QAAA;IACAF,QAAA;MACA,OAAAA,OAAA,MAAAqB,QAAA;IACA;EACA;EAEAC,OAAA;IACAC,OAAA;MACAC,OAAA,CAAAC,GAAA,MAAAX,WAAA;MACA;MACA,KAAAI,SAAA,IACAd,IAAA,MAAAA,IAAA;MACA;MACA;MAAA,CACA;MACA,KAAAe,UAAA,IACAF,KAAA,MAAAA,KAAA,yBACAA,KAAA,MAAAhB,aAAA,CAAAgB,KAAA,qBACA;MAEA,KAAAS,SAAA;QACA,UAAAC,KAAA,CAAAC,IAAA,CAAAC,QAAA;QAEA,KAAAC,KAAA;UAAA1B,IAAA,OAAAA,IAAA;UAAAa,KAAA,OAAAA;QAAA;MACA;IACA;EACA;EAEAc,KAAA;IACAvB,MAAA;MACA,SAAAA,KAAA;QACA,KAAAJ,IAAA;QACA,KAAAa,KAAA;QACA,KAAAC,SAAA;QACA,KAAAC,UAAA;QAEA,KAAAQ,KAAA,CAAAC,IAAA,EAAAI,eAAA;MACA;IACA;IACA5B,KAAA;MACA;MACA,KAAAc,SAAA;QACA;MAAA,CACA;IACA;IACAD,MAAA;MACA;MACA,KAAAE,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}