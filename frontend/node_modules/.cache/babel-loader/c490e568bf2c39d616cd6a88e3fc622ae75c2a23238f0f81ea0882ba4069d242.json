{"ast":null,"code":"import UserAvatarContent from \"@/components/UserAvatarContent.vue\";\nimport { validateEmail, get } from \"@/utils\";\nexport default {\n  name: \"ConfirmDetailsDialog\",\n  props: {\n    value: {\n      type: Boolean,\n      required: true\n    },\n    respondents: {\n      type: Array,\n      default: () => []\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: () => ({\n    emails: [],\n    // Currently displayed emails\n    prevEmails: new Set(),\n    // Set that tracks previous emails to track the emails that have been changed\n    timeouts: [],\n    // Timeouts for search debouncing\n    emailSuggestions: [],\n    // Auto-suggestions for each email input\n\n    location: \"\",\n    description: \"\",\n    hasContactsAccess: true,\n    rules: {\n      validEmail: email => {\n        if (email?.length > 0 && !validateEmail(email)) {\n          return \"Please enter a valid email.\";\n        }\n        return true;\n      }\n    }\n  }),\n  mounted() {\n    this.emails = this.respondents.map(r => r.email);\n    this.timeouts = this.respondents.map(() => null);\n    this.emailSuggestions = this.respondents.map(() => []);\n\n    // Send a warmup request to update cache and check if contacts permissions are enabled\n    get(`/user/searchContacts?query=`).catch(err => {\n      // User has not granted contacts permissions\n      if (err.error?.code === 403) {\n        this.hasContactsAccess = false;\n      }\n    });\n  },\n  computed: {\n    confirmEnabled() {\n      // Only enable confirm button if all emails are valid\n      for (const email of this.emails) {\n        if (this.rules.validEmail(email) !== true) {\n          return false;\n        }\n      }\n      return true;\n    },\n    formattedEmailSuggestions() {\n      // Only return suggestions if email is not empty\n      return this.emailSuggestions.map((suggestion, i) => this.emails[i]?.length > 0 ? suggestion : []);\n    }\n  },\n  methods: {\n    confirm() {\n      this.$emit(\"confirm\", {\n        emails: this.emails,\n        location: this.location,\n        description: this.description\n      });\n    },\n    requestContactsAccess() {\n      this.$emit(\"requestContactsAccess\", {\n        emails: this.emails,\n        location: this.location,\n        description: this.description\n      });\n    },\n    setData({\n      emails,\n      location,\n      description\n    }) {\n      this.emails = emails;\n      this.location = location;\n      this.description = description;\n    },\n    searchContacts(emailsIndex, query) {\n      // Searches the user's contacts using the google contacts API\n      if (this.hasContactsAccess) {\n        clearTimeout(this.timeouts[emailsIndex]);\n        this.timeouts[emailsIndex] = setTimeout(() => {\n          get(`/user/searchContacts?query=${query}`).then(results => {\n            this.$set(this.emailSuggestions, emailsIndex, results);\n          });\n        }, 300);\n      }\n    },\n    emailFilter(item, queryText) {\n      // Custom email filter (unused)\n      const searchText = `${item.firstName} ${item.lastName} ${item.email}`;\n      return searchText.toLowerCase().includes(queryText.toLowerCase());\n    }\n  },\n  watch: {\n    emails() {\n      // If an email has been changed, search user's contacts for that query\n\n      if (this.value && this.hasContactsAccess) {\n        // Only search contacts if dialog is shown and has contacts access\n        const difference = this.emails.filter(x => x && !this.prevEmails.has(x));\n        if (difference.length === 0) {\n          return;\n        }\n        const changedEmail = difference[0];\n        const changedEmailIndex = this.emails.indexOf(changedEmail);\n        if (changedEmail.length > 0) {\n          this.searchContacts(changedEmailIndex, changedEmail);\n        }\n        this.prevEmails = new Set(this.emails);\n      }\n    }\n  },\n  components: {\n    UserAvatarContent\n  }\n};","map":{"version":3,"names":["UserAvatarContent","validateEmail","get","name","props","value","type","Boolean","required","respondents","Array","default","loading","data","emails","prevEmails","Set","timeouts","emailSuggestions","location","description","hasContactsAccess","rules","validEmail","email","length","mounted","map","r","catch","err","error","code","computed","confirmEnabled","formattedEmailSuggestions","suggestion","i","methods","confirm","$emit","requestContactsAccess","setData","searchContacts","emailsIndex","query","clearTimeout","setTimeout","then","results","$set","emailFilter","item","queryText","searchText","firstName","lastName","toLowerCase","includes","watch","difference","filter","x","has","changedEmail","changedEmailIndex","indexOf","components"],"sources":["src/components/schedule_overlap/ConfirmDetailsDialog.vue"],"sourcesContent":["<template>\n  <v-dialog\n    :value=\"value\"\n    @input=\"(e) => $emit('input', e)\"\n    content-class=\"tw-max-w-xl\"\n  >\n    <v-card>\n      <v-card-title class=\"tw-flex\">\n        <div>Confirm details</div>\n        <v-spacer />\n        <v-btn icon @click=\"$emit('input', false)\">\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n      </v-card-title>\n      <v-card-text class=\"tw-px-0\">\n        <v-expansion-panels accordion mandatory flat>\n          <v-expansion-panel>\n            <v-expansion-panel-header class=\"tw-font-medium\">\n              Attendees\n            </v-expansion-panel-header>\n            <v-expansion-panel-content>\n              <div class=\"tw-mb-4 tw-text-dark-gray\">\n                Google Calendar invites will be sent to people at the following\n                email addresses.\n                <span v-if=\"!hasContactsAccess\">\n                  <a class=\"tw-underline\" @click=\"requestContactsAccess\"\n                    >Enable contacts access</a\n                  >\n                  to receive email auto-suggestions.\n                </span>\n              </div>\n              <div class=\"tw-max-h-96 tw-table-auto tw-overflow-y-auto\">\n                <table class=\"tw-w-full tw-text-left tw-text-black\">\n                  <thead>\n                    <tr class=\"tw-bg-white tw-font-medium\">\n                      <th\n                        class=\"tw-sticky tw-top-0 tw-z-10 tw-bg-white tw-pb-4\"\n                      >\n                        Name\n                      </th>\n                      <th\n                        class=\"tw-sticky tw-top-0 tw-z-10 tw-bg-white tw-pb-4\"\n                      >\n                        Email\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr v-for=\"(respondent, r) in respondents\">\n                      <td class=\"tw-pb-4 tw-pr-4\">\n                        <div class=\"tw-flex tw-items-center\">\n                          <UserAvatarContent\n                            v-if=\"respondent.email.length > 0\"\n                            :user=\"respondent\"\n                            class=\"-tw-ml-3 -tw-mr-1 tw-h-4 tw-w-4\"\n                          ></UserAvatarContent>\n                          <v-icon v-else class=\"tw-ml-1 tw-mr-3\" small>\n                            mdi-account\n                          </v-icon>\n\n                          {{ respondent.firstName }} {{ respondent.lastName }}\n                        </div>\n                      </td>\n                      <td class=\"tw-pr-4\">\n                        <div class=\"tw-pb-4\" v-if=\"respondent.email.length > 0\">\n                          {{ respondent.email }}\n                        </div>\n                        <v-combobox\n                          v-else\n                          :search-input.sync=\"emails[r]\"\n                          :items=\"formattedEmailSuggestions[r]\"\n                          no-filter\n                          item-text=\"email\"\n                          item-value=\"email\"\n                          hide-no-data\n                          return-object\n                          append-icon=\"\"\n                          class=\"tw-pt-2\"\n                          placeholder=\"Email (optional)\"\n                          outlined\n                          dense\n                          :rules=\"[rules.validEmail]\"\n                        >\n                          <template v-slot:item=\"{ item }\">\n                            <v-list-item-avatar>\n                              <img\n                                v-if=\"item.picture.length > 0\"\n                                :src=\"item.picture\"\n                                referrerpolicy=\"no-referrer\"\n                              />\n                              <v-icon v-else>mdi-account</v-icon>\n                            </v-list-item-avatar>\n                            <v-list-item-content>\n                              <v-list-item-title\n                                v-text=\"`${item.firstName} ${item.lastName}`\"\n                              ></v-list-item-title>\n                              <v-list-item-subtitle\n                                v-text=\"item.email\"\n                              ></v-list-item-subtitle>\n                            </v-list-item-content>\n                          </template>\n                        </v-combobox>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </v-expansion-panel-content>\n          </v-expansion-panel>\n          <v-expansion-panel>\n            <v-expansion-panel-header class=\"tw-font-medium\">\n              Location & description (optional)\n            </v-expansion-panel-header>\n            <v-expansion-panel-content>\n              <v-text-field\n                v-model=\"location\"\n                prepend-icon=\"mdi-map-marker\"\n                placeholder=\"Location\"\n                outlined\n                dense\n              />\n              <v-textarea\n                v-model=\"description\"\n                prepend-icon=\"mdi-text\"\n                placeholder=\"Description\"\n                outlined\n                dense\n                hide-details\n              />\n            </v-expansion-panel-content>\n          </v-expansion-panel>\n        </v-expansion-panels>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer />\n        <v-btn\n          color=\"primary\"\n          @click=\"confirm\"\n          :disabled=\"!confirmEnabled\"\n          :loading=\"loading\"\n        >\n          Confirm\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport UserAvatarContent from \"@/components/UserAvatarContent.vue\"\nimport { validateEmail, get } from \"@/utils\"\n\nexport default {\n  name: \"ConfirmDetailsDialog\",\n\n  props: {\n    value: { type: Boolean, required: true },\n    respondents: { type: Array, default: () => [] },\n    loading: { type: Boolean, default: false },\n  },\n\n  data: () => ({\n    emails: [], // Currently displayed emails\n    prevEmails: new Set(), // Set that tracks previous emails to track the emails that have been changed\n    timeouts: [], // Timeouts for search debouncing\n    emailSuggestions: [], // Auto-suggestions for each email input\n\n    location: \"\",\n    description: \"\",\n    hasContactsAccess: true,\n    rules: {\n      validEmail: (email) => {\n        if (email?.length > 0 && !validateEmail(email)) {\n          return \"Please enter a valid email.\"\n        }\n        return true\n      },\n    },\n  }),\n\n  mounted() {\n    this.emails = this.respondents.map((r) => r.email)\n    this.timeouts = this.respondents.map(() => null)\n    this.emailSuggestions = this.respondents.map(() => [])\n\n    // Send a warmup request to update cache and check if contacts permissions are enabled\n    get(`/user/searchContacts?query=`).catch((err) => {\n      // User has not granted contacts permissions\n      if (err.error?.code === 403) {\n        this.hasContactsAccess = false\n      }\n    })\n  },\n\n  computed: {\n    confirmEnabled() {\n      // Only enable confirm button if all emails are valid\n      for (const email of this.emails) {\n        if (this.rules.validEmail(email) !== true) {\n          return false\n        }\n      }\n\n      return true\n    },\n    formattedEmailSuggestions() {\n      // Only return suggestions if email is not empty\n      return this.emailSuggestions.map((suggestion, i) =>\n        this.emails[i]?.length > 0 ? suggestion : []\n      )\n    },\n  },\n\n  methods: {\n    confirm() {\n      this.$emit(\"confirm\", {\n        emails: this.emails,\n        location: this.location,\n        description: this.description,\n      })\n    },\n    requestContactsAccess() {\n      this.$emit(\"requestContactsAccess\", {\n        emails: this.emails,\n        location: this.location,\n        description: this.description,\n      })\n    },\n    setData({ emails, location, description }) {\n      this.emails = emails\n      this.location = location\n      this.description = description\n    },\n    searchContacts(emailsIndex, query) {\n      // Searches the user's contacts using the google contacts API\n      if (this.hasContactsAccess) {\n        clearTimeout(this.timeouts[emailsIndex])\n        this.timeouts[emailsIndex] = setTimeout(() => {\n          get(`/user/searchContacts?query=${query}`).then((results) => {\n            this.$set(this.emailSuggestions, emailsIndex, results)\n          })\n        }, 300)\n      }\n    },\n    emailFilter(item, queryText) {\n      // Custom email filter (unused)\n      const searchText = `${item.firstName} ${item.lastName} ${item.email}`\n      return searchText.toLowerCase().includes(queryText.toLowerCase())\n    },\n  },\n\n  watch: {\n    emails() {\n      // If an email has been changed, search user's contacts for that query\n\n      if (this.value && this.hasContactsAccess) {\n        // Only search contacts if dialog is shown and has contacts access\n        const difference = this.emails.filter(\n          (x) => x && !this.prevEmails.has(x)\n        )\n        if (difference.length === 0) {\n          return\n        }\n\n        const changedEmail = difference[0]\n        const changedEmailIndex = this.emails.indexOf(changedEmail)\n\n        if (changedEmail.length > 0) {\n          this.searchContacts(changedEmailIndex, changedEmail)\n        }\n\n        this.prevEmails = new Set(this.emails)\n      }\n    },\n  },\n\n  components: { UserAvatarContent },\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}