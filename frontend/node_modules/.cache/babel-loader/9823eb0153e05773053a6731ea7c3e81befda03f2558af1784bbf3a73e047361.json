{"ast":null,"code":"import { serverURL, errors } from \"@/constants\";\n\n/* \n  Fetch utils\n*/\nexport const get = route => {\n  return fetchMethod(\"GET\", route);\n};\nexport const post = (route, body = {}) => {\n  return fetchMethod(\"POST\", route, body);\n};\nexport const patch = (route, body = {}) => {\n  return fetchMethod(\"PATCH\", route, body);\n};\nexport const put = (route, body = {}) => {\n  return fetchMethod(\"PUT\", route, body);\n};\nexport const _delete = (route, body = {}) => {\n  return fetchMethod(\"DELETE\", route, body);\n};\nexport const fetchMethod = (method, route, body = {}) => {\n  /* Calls the given route with the give method and body */\n  const params = {\n    method,\n    credentials: \"include\"\n  };\n  if (method !== \"GET\") {\n    // Add params specific to POST/PATCH/DELETE\n    params.headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    params.body = JSON.stringify(body);\n  }\n  return fetch(serverURL + route, params).then(async res => {\n    const text = await res.text();\n\n    // Parse JSON if text is not empty\n    let returnValue;\n    if (text.length === 0) {\n      returnValue = text;\n    } else {\n      try {\n        returnValue = JSON.parse(text);\n      } catch (err) {\n        throw {\n          error: errors.JsonError\n        };\n      }\n    }\n\n    // Check if response was ok\n    if (!res.ok) {\n      throw returnValue;\n    }\n    return returnValue;\n  }).then(data => {\n    return data;\n  });\n};","map":{"version":3,"names":["serverURL","errors","get","route","fetchMethod","post","body","patch","put","_delete","method","params","credentials","headers","JSON","stringify","fetch","then","res","text","returnValue","length","parse","err","error","JsonError","ok","data"],"sources":["/Users/kasperzhang/Desktop/schej.it/frontend/src/utils/fetch_utils.js"],"sourcesContent":["import { serverURL, errors } from \"@/constants\"\n\n/* \n  Fetch utils\n*/\nexport const get = (route) => {\n  return fetchMethod(\"GET\", route)\n}\n\nexport const post = (route, body = {}) => {\n  return fetchMethod(\"POST\", route, body)\n}\n\nexport const patch = (route, body = {}) => {\n  return fetchMethod(\"PATCH\", route, body)\n}\n\nexport const put = (route, body = {}) => {\n  return fetchMethod(\"PUT\", route, body)\n}\n\nexport const _delete = (route, body = {}) => {\n  return fetchMethod(\"DELETE\", route, body)\n}\n\nexport const fetchMethod = (method, route, body = {}) => {\n  /* Calls the given route with the give method and body */\n  const params = {\n    method,\n    credentials: \"include\",\n  }\n\n  if (method !== \"GET\") {\n    // Add params specific to POST/PATCH/DELETE\n    params.headers = {\n      \"Content-Type\": \"application/json\",\n    }\n    params.body = JSON.stringify(body)\n  }\n\n  return fetch(serverURL + route, params)\n    .then(async (res) => {\n      const text = await res.text()\n\n      // Parse JSON if text is not empty\n      let returnValue\n      if (text.length === 0) {\n        returnValue = text\n      } else {\n        try {\n          returnValue = JSON.parse(text)\n        } catch (err) {\n          throw { error: errors.JsonError }\n        }\n      }\n\n      // Check if response was ok\n      if (!res.ok) {\n        throw returnValue\n      }\n\n      return returnValue\n    })\n    .then((data) => {\n      return data\n    })\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,aAAa;;AAE/C;AACA;AACA;AACA,OAAO,MAAMC,GAAG,GAAIC,KAAK,IAAK;EAC5B,OAAOC,WAAW,CAAC,KAAK,EAAED,KAAK,CAAC;AAClC,CAAC;AAED,OAAO,MAAME,IAAI,GAAGA,CAACF,KAAK,EAAEG,IAAI,GAAG,CAAC,CAAC,KAAK;EACxC,OAAOF,WAAW,CAAC,MAAM,EAAED,KAAK,EAAEG,IAAI,CAAC;AACzC,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACJ,KAAK,EAAEG,IAAI,GAAG,CAAC,CAAC,KAAK;EACzC,OAAOF,WAAW,CAAC,OAAO,EAAED,KAAK,EAAEG,IAAI,CAAC;AAC1C,CAAC;AAED,OAAO,MAAME,GAAG,GAAGA,CAACL,KAAK,EAAEG,IAAI,GAAG,CAAC,CAAC,KAAK;EACvC,OAAOF,WAAW,CAAC,KAAK,EAAED,KAAK,EAAEG,IAAI,CAAC;AACxC,CAAC;AAED,OAAO,MAAMG,OAAO,GAAGA,CAACN,KAAK,EAAEG,IAAI,GAAG,CAAC,CAAC,KAAK;EAC3C,OAAOF,WAAW,CAAC,QAAQ,EAAED,KAAK,EAAEG,IAAI,CAAC;AAC3C,CAAC;AAED,OAAO,MAAMF,WAAW,GAAGA,CAACM,MAAM,EAAEP,KAAK,EAAEG,IAAI,GAAG,CAAC,CAAC,KAAK;EACvD;EACA,MAAMK,MAAM,GAAG;IACbD,MAAM;IACNE,WAAW,EAAE;EACf,CAAC;EAED,IAAIF,MAAM,KAAK,KAAK,EAAE;IACpB;IACAC,MAAM,CAACE,OAAO,GAAG;MACf,cAAc,EAAE;IAClB,CAAC;IACDF,MAAM,CAACL,IAAI,GAAGQ,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC;EACpC;EAEA,OAAOU,KAAK,CAAChB,SAAS,GAAGG,KAAK,EAAEQ,MAAM,CAAC,CACpCM,IAAI,CAAC,MAAOC,GAAG,IAAK;IACnB,MAAMC,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAI,CAAC,CAAC;;IAE7B;IACA,IAAIC,WAAW;IACf,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MACrBD,WAAW,GAAGD,IAAI;IACpB,CAAC,MAAM;MACL,IAAI;QACFC,WAAW,GAAGN,IAAI,CAACQ,KAAK,CAACH,IAAI,CAAC;MAChC,CAAC,CAAC,OAAOI,GAAG,EAAE;QACZ,MAAM;UAAEC,KAAK,EAAEvB,MAAM,CAACwB;QAAU,CAAC;MACnC;IACF;;IAEA;IACA,IAAI,CAACP,GAAG,CAACQ,EAAE,EAAE;MACX,MAAMN,WAAW;IACnB;IAEA,OAAOA,WAAW;EACpB,CAAC,CAAC,CACDH,IAAI,CAAEU,IAAI,IAAK;IACd,OAAOA,IAAI;EACb,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}