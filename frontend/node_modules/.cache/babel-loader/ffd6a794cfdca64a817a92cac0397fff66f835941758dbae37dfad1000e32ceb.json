{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { validateEmail, isPhone, post, put, timeNumToTimeString, dateToTimeNum, signInGoogle, getDateWithTimezone } from \"@/utils\";\nimport { mapState, mapActions } from \"vuex\";\nimport { eventTypes, dayIndexToDayString, authTypes } from \"@/constants\";\nimport HelpDialog from \"./HelpDialog.vue\";\nimport CalendarPermissionsCard from \"./calendar_permission_dialogs/CalendarPermissionsCard.vue\";\nimport TimezoneSelector from \"./schedule_overlap/TimezoneSelector.vue\";\nimport EmailInput from \"./event/EmailInput.vue\";\nimport dayjs from \"dayjs\";\nimport utcPlugin from \"dayjs/plugin/utc\";\nimport timezonePlugin from \"dayjs/plugin/timezone\";\ndayjs.extend(utcPlugin);\ndayjs.extend(timezonePlugin);\nexport default {\n  name: \"NewGroup\",\n  emits: [\"input\"],\n  props: {\n    event: {\n      type: Object\n    },\n    edit: {\n      type: Boolean,\n      default: false\n    },\n    dialog: {\n      type: Boolean,\n      default: true\n    },\n    showHelp: {\n      type: Boolean,\n      default: false\n    },\n    contactsPayload: {\n      type: Object,\n      default: () => ({})\n    },\n    folderId: {\n      type: String,\n      default: null\n    }\n  },\n  components: {\n    HelpDialog,\n    TimezoneSelector,\n    EmailInput,\n    CalendarPermissionsCard\n  },\n  data: () => ({\n    formValid: true,\n    name: \"\",\n    startTime: 9,\n    endTime: 17,\n    loading: false,\n    selectedDaysOfWeek: [],\n    startOnMonday: false,\n    emails: [],\n    showAdvancedOptions: false,\n    timezone: {},\n    helpDialog: false,\n    initialEventData: {}\n  }),\n  computed: {\n    ...mapState([\"authUser\"]),\n    nameRules() {\n      return [v => !!v || \"Group name is required\"];\n    },\n    selectedDaysRules() {\n      return [selectedDays => selectedDays.length > 0 || \"Please select at least one day\"];\n    },\n    formEmpty() {\n      return this.name === \"\" && this.emails.length === 0 && this.selectedDaysOfWeek.length === 0;\n    },\n    isPhone() {\n      return isPhone(this.$vuetify);\n    },\n    times() {\n      const times = [];\n      for (let h = 1; h < 12; ++h) {\n        times.push({\n          text: `${h} am`,\n          value: h\n        });\n      }\n      for (let h = 0; h < 12; ++h) {\n        times.push({\n          text: `${h == 0 ? 12 : h} pm`,\n          value: h + 12\n        });\n      }\n      times.push({\n        text: \"12 am\",\n        value: 0\n      });\n      return times;\n    },\n    otherEventAttendees() {\n      return this.event && this.event.attendees ? this.event.attendees.map(a => a.email).filter(email => email !== this.authUser.email) : [];\n    },\n    addedEmails() {\n      if (Object.keys(this.contactsPayload).length > 0) return this.contactsPayload.emails;\n      return this.otherEventAttendees;\n    }\n  },\n  mounted() {\n    if (Object.keys(this.contactsPayload).length > 0) {\n      this.name = this.contactsPayload.name;\n      this.startTime = this.contactsPayload.startTime;\n      this.endTime = this.contactsPayload.endTime;\n      this.selectedDaysOfWeek = this.contactsPayload.selectedDaysOfWeek;\n      this.startOnMonday = this.contactsPayload.startOnMonday;\n      this.$refs.form.resetValidation();\n    }\n  },\n  methods: {\n    ...mapActions([\"showError\", \"setEventFolder\"]),\n    blurNameField() {\n      this.$refs[\"name-field\"].blur();\n    },\n    reset() {\n      this.name = \"\";\n      this.startTime = 9;\n      this.endTime = 17;\n      this.selectedDaysOfWeek = [];\n      this.$refs.form.resetValidation();\n    },\n    submit() {\n      if (!this.$refs.form.validate()) return;\n\n      // Get duration of event\n      let duration = this.endTime - this.startTime;\n      if (duration < 0) duration += 24;\n\n      // Populate dates\n      const dates = [];\n      const startTimeString = timeNumToTimeString(this.startTime);\n      this.selectedDaysOfWeek.sort((a, b) => a - b);\n      this.selectedDaysOfWeek = this.selectedDaysOfWeek.filter(dayIndex => {\n        return this.startOnMonday ? dayIndex !== 0 : dayIndex !== 7;\n      });\n      for (const dayIndex of this.selectedDaysOfWeek) {\n        const day = dayIndexToDayString[dayIndex];\n        const date = dayjs.tz(`${day} ${startTimeString}`, this.timezone.value);\n        dates.push(date.toDate());\n      }\n      this.loading = true;\n      const name = this.name;\n      const type = eventTypes.GROUP;\n      const attendees = this.emails;\n      const startOnMonday = this.startOnMonday;\n      if (!this.edit) {\n        // Create a new group\n        post(\"/events\", {\n          name,\n          duration,\n          dates,\n          attendees,\n          type,\n          startOnMonday,\n          creatorPosthogId: this.$posthog?.get_distinct_id()\n        }).then(async ({\n          eventId,\n          shortId\n        }) => {\n          await this.setEventFolder({\n            eventId,\n            folderId: this.folderId\n          });\n          this.$router.push({\n            name: \"group\",\n            params: {\n              groupId: shortId ?? eventId,\n              initialTimezone: this.timezone\n            }\n          });\n          this.$emit(\"input\", false);\n          this.$posthog?.capture(\"Availability group created\", {\n            eventId: eventId,\n            eventName: name,\n            eventDuration: duration,\n            eventDates: JSON.stringify(dates),\n            eventAttendees: attendees,\n            eventType: type,\n            eventStartOnMonday: startOnMonday\n          });\n        }).catch(err => {\n          this.showError(\"There was a problem creating that group! Please try again later.\");\n          console.error(err);\n        }).finally(() => {\n          this.loading = false;\n        });\n      } else {\n        // Edit group\n        put(`/events/${this.event._id}`, {\n          name,\n          duration,\n          dates,\n          attendees,\n          type,\n          startOnMonday\n        }).then(() => {\n          this.$posthog?.capture(\"Availability group edited\", {\n            eventId: this.event._id,\n            eventName: name,\n            eventDuration: duration,\n            eventDates: JSON.stringify(dates),\n            eventAttendees: attendees,\n            eventType: type,\n            eventStartOnMonday: startOnMonday\n          });\n          this.$emit(\"input\", false);\n          this.reset();\n          window.location.reload();\n        }).catch(err => {\n          this.showError(\"There was a problem editing this group! Please try again later.\");\n        }).finally(() => {\n          this.loading = false;\n        });\n      }\n    },\n    /** Redirects user to oauth page requesting access to the user's contacts */\n    requestContactsAccess({\n      emails\n    }) {\n      const payload = {\n        emails,\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        selectedDaysOfWeek: this.selectedDaysOfWeek\n      };\n      signInGoogle({\n        state: {\n          type: authTypes.EVENT_CONTACTS,\n          eventId: this.event ? this.event.shortId ?? this.event._id : \"\",\n          openNewGroup: true,\n          payload\n        },\n        requestContactsPermission: true\n      });\n    },\n    /** Populate fields with data from event */\n    updateFieldsFromEvent() {\n      if (this.event) {\n        this.name = this.event.name;\n        this.startTime = Math.floor(dateToTimeNum(this.event.dates[0]));\n        this.endTime = (this.startTime + this.event.duration) % 24;\n        this.startOnMonday = this.event.startOnMonday;\n        const selectedDaysOfWeek = [];\n        for (let date of this.event.dates) {\n          date = getDateWithTimezone(date);\n          if (this.startOnMonday && date.getUTCDay() === 0) {\n            selectedDaysOfWeek.push(7);\n          } else {\n            selectedDaysOfWeek.push(date.getUTCDay());\n          }\n        }\n        this.selectedDaysOfWeek = selectedDaysOfWeek;\n        this.emails = this.otherEventAttendees;\n      }\n    },\n    resetToEventData() {\n      this.updateFieldsFromEvent();\n      this.$refs.emailInput.reset();\n    },\n    setInitialEventData() {\n      this.initialEventData = {\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        selectedDaysOfWeek: this.selectedDaysOfWeek,\n        emails: [...this.emails]\n      };\n    },\n    hasEventBeenEdited() {\n      return this.name !== this.initialEventData.name || this.startTime !== this.initialEventData.startTime || this.endTime !== this.initialEventData.endTime || JSON.stringify(this.selectedDaysOfWeek) !== JSON.stringify(this.initialEventData.selectedDaysOfWeek) || JSON.stringify(this.emails) !== JSON.stringify(this.initialEventData.emails);\n    }\n  },\n  watch: {\n    event: {\n      immediate: true,\n      handler() {\n        this.updateFieldsFromEvent();\n        this.setInitialEventData();\n      }\n    },\n    formEmpty(val) {\n      this.$emit(\"update:formEmpty\", val);\n    }\n  }\n};","map":{"version":3,"names":["validateEmail","isPhone","post","put","timeNumToTimeString","dateToTimeNum","signInGoogle","getDateWithTimezone","mapState","mapActions","eventTypes","dayIndexToDayString","authTypes","HelpDialog","CalendarPermissionsCard","TimezoneSelector","EmailInput","dayjs","utcPlugin","timezonePlugin","extend","name","emits","props","event","type","Object","edit","Boolean","default","dialog","showHelp","contactsPayload","folderId","String","components","data","formValid","startTime","endTime","loading","selectedDaysOfWeek","startOnMonday","emails","showAdvancedOptions","timezone","helpDialog","initialEventData","computed","nameRules","v","selectedDaysRules","selectedDays","length","formEmpty","$vuetify","times","h","push","text","value","otherEventAttendees","attendees","map","a","email","filter","authUser","addedEmails","keys","mounted","$refs","form","resetValidation","methods","blurNameField","blur","reset","submit","validate","duration","dates","startTimeString","sort","b","dayIndex","day","date","tz","toDate","GROUP","creatorPosthogId","$posthog","get_distinct_id","then","eventId","shortId","setEventFolder","$router","params","groupId","initialTimezone","$emit","capture","eventName","eventDuration","eventDates","JSON","stringify","eventAttendees","eventType","eventStartOnMonday","catch","err","showError","console","error","finally","_id","window","location","reload","requestContactsAccess","payload","state","EVENT_CONTACTS","openNewGroup","requestContactsPermission","updateFieldsFromEvent","Math","floor","getUTCDay","resetToEventData","emailInput","setInitialEventData","hasEventBeenEdited","watch","immediate","handler","val"],"sources":["src/components/NewGroup.vue"],"sourcesContent":["<template>\n  <v-card\n    :flat=\"dialog\"\n    :class=\"{ 'tw-py-4': !dialog, 'tw-flex-1': dialog }\"\n    class=\"tw-relative tw-flex tw-max-w-[28rem] tw-flex-col tw-overflow-hidden tw-rounded-lg tw-transition-all\"\n  >\n    <v-card-title class=\"tw-mb-2 tw-flex tw-gap-2 tw-px-4 sm:tw-px-8\">\n      <div>\n        <div class=\"tw-mb-1\">\n          {{ edit ? \"Edit group\" : \"New group\" }}\n        </div>\n        <div\n          v-if=\"dialog && showHelp\"\n          class=\"tw-text-xs tw-font-normal tw-italic tw-text-dark-gray\"\n        >\n          Ideal for viewing weekly calendar availability\n        </div>\n      </div>\n      <v-spacer />\n      <template v-if=\"dialog\">\n        <v-btn v-if=\"showHelp\" icon @click=\"helpDialog = true\">\n          <v-icon>mdi-information-outline</v-icon>\n        </v-btn>\n        <v-btn v-else @click=\"$emit('input', false)\" icon>\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n        <HelpDialog v-model=\"helpDialog\">\n          <template v-slot:header>Availability groups</template>\n          <div class=\"mb-4\">\n            Use availability groups to see group members' weekly calendar\n            availabilities from Google Calendar. Your actual calendar events\n            will NOT be visible to others.\n          </div>\n        </HelpDialog>\n      </template>\n    </v-card-title>\n    <v-card-text class=\"tw-flex-1 tw-overflow-auto tw-px-4 tw-py-1 sm:tw-px-8\">\n      <v-form\n        ref=\"form\"\n        class=\"tw-flex tw-flex-col tw-space-y-6\"\n        v-model=\"formValid\"\n        lazy-validation\n        :disabled=\"loading\"\n      >\n        <v-text-field\n          ref=\"name-field\"\n          v-model=\"name\"\n          placeholder=\"Name your group...\"\n          hide-details=\"auto\"\n          solo\n          @keyup.enter=\"blurNameField\"\n          :rules=\"nameRules\"\n          required\n        />\n\n        <div>\n          <div class=\"tw-mb-2 tw-text-lg tw-text-black\">Time range</div>\n          <div class=\"tw-flex tw-items-baseline tw-justify-center tw-space-x-2\">\n            <v-select\n              v-model=\"startTime\"\n              menu-props=\"auto\"\n              :items=\"times\"\n              hide-details\n              solo\n            ></v-select>\n            <div>to</div>\n            <v-select\n              v-model=\"endTime\"\n              menu-props=\"auto\"\n              :items=\"times\"\n              hide-details\n              solo\n            ></v-select>\n          </div>\n        </div>\n\n        <div>\n          <div class=\"tw-mb-2 tw-text-lg tw-text-black\">Day range</div>\n          <v-input\n            v-model=\"selectedDaysOfWeek\"\n            hide-details=\"auto\"\n            :rules=\"selectedDaysRules\"\n          >\n            <v-btn-toggle\n              v-model=\"selectedDaysOfWeek\"\n              multiple\n              solo\n              color=\"primary\"\n            >\n              <v-btn depressed v-show=\"!startOnMonday\"> Sun </v-btn>\n              <v-btn depressed> Mon </v-btn>\n              <v-btn depressed> Tue </v-btn>\n              <v-btn depressed> Wed </v-btn>\n              <v-btn depressed> Thu </v-btn>\n              <v-btn depressed> Fri </v-btn>\n              <v-btn depressed> Sat </v-btn>\n              <v-btn depressed v-show=\"startOnMonday\"> Sun </v-btn>\n            </v-btn-toggle>\n          </v-input>\n          <v-checkbox class=\"tw-mt-2\" v-model=\"startOnMonday\" hide-details>\n            <template v-slot:label>\n              <span class=\"tw-text-sm tw-text-very-dark-gray\">\n                Start on Monday\n              </span>\n            </template>\n          </v-checkbox>\n        </div>\n\n        <!-- <div v-if=\"!edit\"> -->\n        <EmailInput\n          ref=\"emailInput\"\n          :addedEmails=\"addedEmails\"\n          @update:emails=\"(newEmails) => (emails = newEmails)\"\n          @requestContactsAccess=\"requestContactsAccess\"\n        >\n          <template v-slot:header>\n            <div class=\"tw-mb-2 tw-text-lg tw-text-black\">Members</div>\n          </template>\n        </EmailInput>\n        <!-- </div> -->\n\n        <div>\n          <v-btn\n            class=\"tw-justify-start tw-pl-0\"\n            block\n            text\n            @click=\"showAdvancedOptions = !showAdvancedOptions\"\n            ><span class=\"tw-mr-1\">Advanced options</span>\n            <v-icon :class=\"`tw-rotate-${showAdvancedOptions ? '180' : '0'}`\"\n              >mdi-chevron-down</v-icon\n            ></v-btn\n          >\n          <v-expand-transition>\n            <div v-show=\"showAdvancedOptions\">\n              <div class=\"tw-my-2\">\n                <TimezoneSelector v-model=\"timezone\" label=\"Timezone\" />\n              </div>\n            </div>\n          </v-expand-transition>\n        </div>\n      </v-form>\n    </v-card-text>\n    <v-card-actions class=\"tw-relative tw-px-4 sm:tw-px-8\">\n      <div class=\"tw-relative tw-w-full\">\n        <v-btn\n          :disabled=\"!formValid\"\n          block\n          :loading=\"loading\"\n          color=\"primary\"\n          class=\"tw-mt-4 tw-bg-green\"\n          @click=\"submit\"\n        >\n          {{ edit ? \"Save edits\" : \"Create group\" }}\n        </v-btn>\n        <div\n          :class=\"formValid ? 'tw-invisible' : 'tw-visible'\"\n          class=\"tw-mt-1 tw-text-xs tw-text-red\"\n        >\n          Please fix form errors before continuing\n        </div>\n      </div>\n    </v-card-actions>\n  </v-card>\n</template>\n\n<script>\nimport {\n  validateEmail,\n  isPhone,\n  post,\n  put,\n  timeNumToTimeString,\n  dateToTimeNum,\n  signInGoogle,\n  getDateWithTimezone,\n} from \"@/utils\"\nimport { mapState, mapActions } from \"vuex\"\nimport { eventTypes, dayIndexToDayString, authTypes } from \"@/constants\"\nimport HelpDialog from \"./HelpDialog.vue\"\nimport CalendarPermissionsCard from \"./calendar_permission_dialogs/CalendarPermissionsCard.vue\"\nimport TimezoneSelector from \"./schedule_overlap/TimezoneSelector.vue\"\nimport EmailInput from \"./event/EmailInput.vue\"\n\nimport dayjs from \"dayjs\"\nimport utcPlugin from \"dayjs/plugin/utc\"\nimport timezonePlugin from \"dayjs/plugin/timezone\"\ndayjs.extend(utcPlugin)\ndayjs.extend(timezonePlugin)\n\nexport default {\n  name: \"NewGroup\",\n\n  emits: [\"input\"],\n\n  props: {\n    event: { type: Object },\n    edit: { type: Boolean, default: false },\n    dialog: { type: Boolean, default: true },\n    showHelp: { type: Boolean, default: false },\n    contactsPayload: { type: Object, default: () => ({}) },\n    folderId: { type: String, default: null },\n  },\n\n  components: {\n    HelpDialog,\n    TimezoneSelector,\n    EmailInput,\n    CalendarPermissionsCard,\n  },\n\n  data: () => ({\n    formValid: true,\n    name: \"\",\n    startTime: 9,\n    endTime: 17,\n    loading: false,\n    selectedDaysOfWeek: [],\n    startOnMonday: false,\n    emails: [],\n\n    showAdvancedOptions: false,\n    timezone: {},\n\n    helpDialog: false,\n    initialEventData: {},\n  }),\n\n  computed: {\n    ...mapState([\"authUser\"]),\n    nameRules() {\n      return [(v) => !!v || \"Group name is required\"]\n    },\n    selectedDaysRules() {\n      return [\n        (selectedDays) =>\n          selectedDays.length > 0 || \"Please select at least one day\",\n      ]\n    },\n    formEmpty() {\n      return (\n        this.name === \"\" &&\n        this.emails.length === 0 &&\n        this.selectedDaysOfWeek.length === 0\n      )\n    },\n    isPhone() {\n      return isPhone(this.$vuetify)\n    },\n    times() {\n      const times = []\n\n      for (let h = 1; h < 12; ++h) {\n        times.push({ text: `${h} am`, value: h })\n      }\n      for (let h = 0; h < 12; ++h) {\n        times.push({ text: `${h == 0 ? 12 : h} pm`, value: h + 12 })\n      }\n      times.push({ text: \"12 am\", value: 0 })\n\n      return times\n    },\n    otherEventAttendees() {\n      return this.event && this.event.attendees\n        ? this.event.attendees\n            .map((a) => a.email)\n            .filter((email) => email !== this.authUser.email)\n        : []\n    },\n    addedEmails() {\n      if (Object.keys(this.contactsPayload).length > 0)\n        return this.contactsPayload.emails\n      return this.otherEventAttendees\n    },\n  },\n\n  mounted() {\n    if (Object.keys(this.contactsPayload).length > 0) {\n      this.name = this.contactsPayload.name\n      this.startTime = this.contactsPayload.startTime\n      this.endTime = this.contactsPayload.endTime\n      this.selectedDaysOfWeek = this.contactsPayload.selectedDaysOfWeek\n      this.startOnMonday = this.contactsPayload.startOnMonday\n\n      this.$refs.form.resetValidation()\n    }\n  },\n\n  methods: {\n    ...mapActions([\"showError\", \"setEventFolder\"]),\n    blurNameField() {\n      this.$refs[\"name-field\"].blur()\n    },\n    reset() {\n      this.name = \"\"\n      this.startTime = 9\n      this.endTime = 17\n      this.selectedDaysOfWeek = []\n\n      this.$refs.form.resetValidation()\n    },\n    submit() {\n      if (!this.$refs.form.validate()) return\n\n      // Get duration of event\n      let duration = this.endTime - this.startTime\n      if (duration < 0) duration += 24\n\n      // Populate dates\n      const dates = []\n      const startTimeString = timeNumToTimeString(this.startTime)\n      this.selectedDaysOfWeek.sort((a, b) => a - b)\n      this.selectedDaysOfWeek = this.selectedDaysOfWeek.filter((dayIndex) => {\n        return this.startOnMonday ? dayIndex !== 0 : dayIndex !== 7\n      })\n      for (const dayIndex of this.selectedDaysOfWeek) {\n        const day = dayIndexToDayString[dayIndex]\n        const date = dayjs.tz(`${day} ${startTimeString}`, this.timezone.value)\n        dates.push(date.toDate())\n      }\n\n      this.loading = true\n\n      const name = this.name\n      const type = eventTypes.GROUP\n      const attendees = this.emails\n      const startOnMonday = this.startOnMonday\n\n      if (!this.edit) {\n        // Create a new group\n        post(\"/events\", {\n          name,\n          duration,\n          dates,\n          attendees,\n          type,\n          startOnMonday,\n          creatorPosthogId: this.$posthog?.get_distinct_id(),\n        })\n          .then(async ({ eventId, shortId }) => {\n            await this.setEventFolder({ eventId, folderId: this.folderId })\n            this.$router.push({\n              name: \"group\",\n              params: {\n                groupId: shortId ?? eventId,\n                initialTimezone: this.timezone,\n              },\n            })\n            this.$emit(\"input\", false)\n\n            this.$posthog?.capture(\"Availability group created\", {\n              eventId: eventId,\n              eventName: name,\n              eventDuration: duration,\n              eventDates: JSON.stringify(dates),\n              eventAttendees: attendees,\n              eventType: type,\n              eventStartOnMonday: startOnMonday,\n            })\n          })\n          .catch((err) => {\n            this.showError(\n              \"There was a problem creating that group! Please try again later.\"\n            )\n            console.error(err)\n          })\n          .finally(() => {\n            this.loading = false\n          })\n      } else {\n        // Edit group\n        put(`/events/${this.event._id}`, {\n          name,\n          duration,\n          dates,\n          attendees,\n          type,\n          startOnMonday,\n        })\n          .then(() => {\n            this.$posthog?.capture(\"Availability group edited\", {\n              eventId: this.event._id,\n              eventName: name,\n              eventDuration: duration,\n              eventDates: JSON.stringify(dates),\n              eventAttendees: attendees,\n              eventType: type,\n              eventStartOnMonday: startOnMonday,\n            })\n\n            this.$emit(\"input\", false)\n            this.reset()\n            window.location.reload()\n          })\n          .catch((err) => {\n            this.showError(\n              \"There was a problem editing this group! Please try again later.\"\n            )\n          })\n          .finally(() => {\n            this.loading = false\n          })\n      }\n    },\n    /** Redirects user to oauth page requesting access to the user's contacts */\n    requestContactsAccess({ emails }) {\n      const payload = {\n        emails,\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        selectedDaysOfWeek: this.selectedDaysOfWeek,\n      }\n      signInGoogle({\n        state: {\n          type: authTypes.EVENT_CONTACTS,\n          eventId: this.event ? this.event.shortId ?? this.event._id : \"\",\n          openNewGroup: true,\n          payload,\n        },\n        requestContactsPermission: true,\n      })\n    },\n    /** Populate fields with data from event */\n    updateFieldsFromEvent() {\n      if (this.event) {\n        this.name = this.event.name\n        this.startTime = Math.floor(dateToTimeNum(this.event.dates[0]))\n        this.endTime = (this.startTime + this.event.duration) % 24\n        this.startOnMonday = this.event.startOnMonday\n\n        const selectedDaysOfWeek = []\n        for (let date of this.event.dates) {\n          date = getDateWithTimezone(date)\n\n          if (this.startOnMonday && date.getUTCDay() === 0) {\n            selectedDaysOfWeek.push(7)\n          } else {\n            selectedDaysOfWeek.push(date.getUTCDay())\n          }\n        }\n        this.selectedDaysOfWeek = selectedDaysOfWeek\n\n        this.emails = this.otherEventAttendees\n      }\n    },\n    resetToEventData() {\n      this.updateFieldsFromEvent()\n      this.$refs.emailInput.reset()\n    },\n    setInitialEventData() {\n      this.initialEventData = {\n        name: this.name,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        selectedDaysOfWeek: this.selectedDaysOfWeek,\n        emails: [...this.emails],\n      }\n    },\n    hasEventBeenEdited() {\n      return (\n        this.name !== this.initialEventData.name ||\n        this.startTime !== this.initialEventData.startTime ||\n        this.endTime !== this.initialEventData.endTime ||\n        JSON.stringify(this.selectedDaysOfWeek) !==\n          JSON.stringify(this.initialEventData.selectedDaysOfWeek) ||\n        JSON.stringify(this.emails) !==\n          JSON.stringify(this.initialEventData.emails)\n      )\n    },\n  },\n\n  watch: {\n    event: {\n      immediate: true,\n      handler() {\n        this.updateFieldsFromEvent()\n        this.setInitialEventData()\n      },\n    },\n    formEmpty(val) {\n      this.$emit(\"update:formEmpty\", val)\n    },\n  },\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}