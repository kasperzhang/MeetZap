{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { _delete, getLocale, isPhone } from \"@/utils\";\nimport UserAvatarContent from \"../UserAvatarContent.vue\";\nimport { mapState, mapActions } from \"vuex\";\nimport EventOptions from \"./EventOptions.vue\";\nimport OverflowGradient from \"@/components/OverflowGradient.vue\";\nexport default {\n  name: \"RespondentsList\",\n  components: {\n    UserAvatarContent,\n    EventOptions,\n    OverflowGradient\n  },\n  props: {\n    eventId: {\n      type: String,\n      required: true\n    },\n    event: {\n      type: Object,\n      required: true\n    },\n    days: {\n      type: Array,\n      required: true\n    },\n    times: {\n      type: Array,\n      required: true\n    },\n    curDate: {\n      type: Date,\n      required: false\n    },\n    // Date of the current timeslot\n    curRespondent: {\n      type: String,\n      required: true\n    },\n    curRespondents: {\n      type: Array,\n      required: true\n    },\n    curTimeslot: {\n      type: Object,\n      required: true\n    },\n    curTimeslotAvailability: {\n      type: Object,\n      required: true\n    },\n    respondents: {\n      type: Array,\n      required: true\n    },\n    parsedResponses: {\n      type: Object,\n      required: true\n    },\n    isOwner: {\n      type: Boolean,\n      required: true\n    },\n    maxHeight: {\n      type: Number\n    },\n    isGroup: {\n      type: Boolean,\n      required: true\n    },\n    attendees: {\n      type: Array,\n      default: () => []\n    },\n    showCalendarEvents: {\n      type: Boolean,\n      required: true\n    },\n    responsesFormatted: {\n      type: Map,\n      required: true\n    },\n    timezone: {\n      type: Object,\n      required: true\n    },\n    showBestTimes: {\n      type: Boolean,\n      required: true\n    },\n    hideIfNeeded: {\n      type: Boolean,\n      required: true\n    },\n    startCalendarOnMonday: {\n      type: Boolean,\n      default: false\n    },\n    showEventOptions: {\n      type: Boolean,\n      required: true\n    },\n    guestAddedAvailability: {\n      type: Boolean,\n      required: true\n    },\n    addingAvailabilityAsGuest: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data() {\n    return {\n      deleteAvailabilityDialog: false,\n      exportCsvDialog: {\n        visible: false,\n        loading: false,\n        type: \"datesToAvailable\",\n        types: [{\n          text: \"Dates <> people available\",\n          value: \"datesToAvailable\"\n        }, {\n          text: \"Name <> dates available\",\n          value: \"nameToDates\"\n        }]\n      },\n      userToDelete: null,\n      desktopMaxHeight: 0,\n      respondentsListMinHeight: 400,\n      oldCurRespondents: [],\n      curRespondentsAddedTime: {},\n      // Map of respondent id to time they were added\n\n      hasMounted: false\n    };\n  },\n  computed: {\n    ...mapState([\"authUser\"]),\n    allowExportCsv() {\n      if (this.isGroup || this.isPhone) return false;\n      return this.event.blindAvailabilityEnabled ? this.isOwner && this.respondents.length > 0 : this.respondents.length > 0;\n    },\n    curRespondentsSet() {\n      return new Set(this.curRespondents);\n    },\n    isCurTimeslotSelected() {\n      return this.curTimeslot.dayIndex !== -1 && this.curTimeslot.timeIndex !== -1;\n    },\n    numUsersAvailable() {\n      this.curTimeslot;\n      let numUsers = 0;\n      for (const key in this.curTimeslotAvailability) {\n        if (this.curTimeslotAvailability[key]) numUsers++;\n      }\n      return numUsers;\n    },\n    numCurRespondentsAvailable() {\n      this.curTimeslot;\n      let numUsers = 0;\n      for (const key in this.curTimeslotAvailability) {\n        if (this.curTimeslotAvailability[key] && this.curRespondentsSet.has(key)) numUsers++;\n      }\n      return numUsers;\n    },\n    pendingUsers() {\n      if (!this.isGroup) return [];\n      const respondentEmailsSet = new Set(this.respondents.map(r => r.email.toLowerCase()));\n      return this.attendees.filter(a => {\n        if (!a.declined && !respondentEmailsSet.has(a.email.toLowerCase())) {\n          return true;\n        }\n        return false;\n      });\n    },\n    showIfNeededStar() {\n      if (this.hideIfNeeded) {\n        return false;\n      }\n      for (const user of this.respondents) {\n        if (this.respondentIfNeeded(user._id)) {\n          return true;\n        }\n      }\n      return false;\n    },\n    isPhone() {\n      return isPhone(this.$vuetify);\n    },\n    orderedRespondents() {\n      const orderedRespondents = [...this.respondents];\n      orderedRespondents.sort((a, b) => {\n        // Sort by added time if both are in curRespondents\n        // Sort curRespondents before others\n        if (this.curRespondentsSet.has(a._id) && this.curRespondentsSet.has(b._id)) {\n          return this.curRespondentsAddedTime[a._id] - this.curRespondentsAddedTime[b._id];\n        } else if (this.curRespondentsSet.has(a._id) && !this.curRespondentsSet.has(b._id)) {\n          return -1;\n        } else if (!this.curRespondentsSet.has(a._id) && this.curRespondentsSet.has(b._id)) {\n          return 1;\n        }\n\n        // Otherwise, sort by first name\n        return (a.firstName || \"\").localeCompare(b.firstName || \"\");\n      });\n      return orderedRespondents;\n    },\n    respondentsListMaxHeight() {\n      return Math.max(this.desktopMaxHeight, this.respondentsListMinHeight);\n    }\n  },\n  methods: {\n    ...mapActions([\"showError\", \"showInfo\"]),\n    /** Emit clickRespondent event */\n    clickRespondent(e, userId) {\n      e.stopImmediatePropagation();\n      this.$emit(\"clickRespondent\", e, userId);\n    },\n    /** Returns the class of the given respondent */\n    respondentClass(id) {\n      const c = [];\n      if ( /*this.curRespondent == id ||*/this.curRespondentsSet.has(id)) {\n        // c.push(\"tw-font-bold\")\n      } else if (this.curRespondents.length > 0) {\n        c.push(\"tw-text-gray\");\n      }\n      if ((this.curRespondentsSet.has(id) || this.curRespondents.length === 0) && this.respondentIfNeeded(id)) {\n        c.push(\"tw-bg-yellow\");\n      }\n      if (!this.curTimeslotAvailability[id]) {\n        c.push(\"tw-line-through\");\n        c.push(\"tw-text-gray\");\n      }\n      return c;\n    },\n    /** Returns whether the respondent has \"ifNeeded\" availability for the current timeslot */\n    respondentIfNeeded(id) {\n      if (!this.curDate || this.hideIfNeeded) return false;\n      return Boolean(this.parsedResponses[id]?.ifNeeded?.has(this.curDate.getTime()));\n    },\n    /** Returns whether the current respondent is selected (for subset avail) */\n    respondentSelected(id) {\n      return this.curRespondentsSet.has(id);\n    },\n    /** Returns whether the user is a guest */\n    isGuest(user) {\n      return user._id == user.firstName;\n    },\n    /** Shows the delete availability dialog */\n    showDeleteAvailabilityDialog(user) {\n      this.deleteAvailabilityDialog = true;\n      this.userToDelete = user;\n    },\n    /** Deletes the user's availability on the server */\n    async deleteAvailability(user) {\n      try {\n        await _delete(`/events/${this.eventId}/response`, {\n          guest: this.isGuest(user),\n          userId: user._id,\n          name: user._id\n        });\n        this.$emit(\"refreshEvent\");\n        this.showInfo(\"Availability successfully deleted!\");\n        this.$posthog?.capture(\"Deleted availability of another user\", {\n          eventId: this.eventId,\n          userId: user._id\n        });\n      } catch (e) {\n        console.error(e);\n        this.showError(\"There was an error deleting that person's availability!\");\n      }\n    },\n    getDateString(date) {\n      const locale = getLocale();\n      if (this.event.daysOnly) {\n        return date.toISOString().substring(0, 10);\n      }\n      return '\"' + date.toLocaleString(locale, {\n        timeZone: this.timezone.value\n      }) + '\"';\n    },\n    async exportCsv() {\n      const csv = [];\n      const increment = 15;\n      const numIterations = this.event.daysOnly ? 1 : this.event.duration * 60 / increment;\n\n      // Get responses sorted by first name\n      const responses = Object.values(this.parsedResponses).sort((a, b) => a.user.firstName.localeCompare(b.user.firstName));\n      if (this.exportCsvDialog.type === \"datesToAvailable\") {\n        // Write CSV header\n        const header = [\"Date / Time\"];\n        header.push(...responses.map(r => r.user.firstName + \" \" + r.user.lastName));\n        csv.push(header);\n\n        // Iterate through the dates\n        for (const date of this.event.dates) {\n          const curDate = new Date(date);\n\n          // Iterate through the timeslots for the current date\n          for (let i = 0; i < numIterations; ++i) {\n            const row = [this.getDateString(curDate)];\n\n            // Iterate through the responses and mark whether they are available or not\n            for (const response of responses) {\n              if (response.availability.has(curDate.getTime())) {\n                row.push(\"Available\");\n              } else if (response.ifNeeded.has(curDate.getTime())) {\n                row.push(\"If needed\");\n              } else {\n                row.push(\"\");\n              }\n            }\n\n            // Add row to CSV\n            csv.push(row);\n\n            // Increment curDate by the selected amount\n            curDate.setMinutes(curDate.getMinutes() + increment);\n          }\n        }\n      } else if (this.exportCsvDialog.type === \"nameToDates\") {\n        // Write CSV header\n        csv.push([\"Name\", \"Date / Times available\"]);\n\n        // Iterate through the responses\n        for (const response of responses) {\n          // The first row is the name\n          const row = [`${response.user.firstName} ${response.user.lastName}`];\n\n          // Iterate through the dates\n          for (const date of this.event.dates) {\n            const curDate = new Date(date);\n\n            // Iterate through the timeslots for the current date\n            for (let i = 0; i < numIterations; ++i) {\n              // If the user is available for the current timeslot, add the date to the row\n              if (response.availability.has(curDate.getTime()) || response.ifNeeded.has(curDate.getTime())) {\n                row.push(this.getDateString(curDate));\n              } else {\n                row.push(\"\");\n              }\n\n              // Increment curDate by the selected amount\n              curDate.setMinutes(curDate.getMinutes() + increment);\n            }\n          }\n          csv.push(row);\n        }\n      }\n\n      // Create CSV uri\n      // Source: https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side\n      const csvString = \"data:text/csv;charset=utf-8,\" + csv.map(e => e.join(\",\")).join(\"\\n\");\n      const encodedUri = encodeURI(csvString);\n\n      // Set CSV filename and download\n      // Source: https://stackoverflow.com/questions/7034754/how-to-set-a-file-name-using-window-open\n      const downloadLink = document.createElement(\"a\");\n      downloadLink.href = encodedUri;\n      downloadLink.download = `${this.event.name}.csv`;\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    },\n    trackExportCsvClick() {\n      this.$posthog?.capture(\"export_csv_clicked\", {\n        eventId: this.eventId,\n        numRespondents: this.respondents.length\n      });\n    },\n    setDesktopMaxHeight() {\n      const el = this.$refs.scrollableSection;\n      if (el) {\n        const {\n          top\n        } = el.getBoundingClientRect();\n        this.desktopMaxHeight = window.innerHeight - top - 32;\n      } else {\n        this.desktopMaxHeight = 0;\n      }\n    },\n    /** Copies the given email to the clipboard */\n    async copyEmailToClipboard(email) {\n      try {\n        await navigator.clipboard.writeText(email);\n        this.showInfo(\"Email copied to clipboard!\");\n      } catch (err) {\n        console.error(\"Failed to copy email: \", err);\n        this.showError(\"Failed to copy email.\");\n      }\n    }\n  },\n  mounted() {\n    this.setDesktopMaxHeight();\n    addEventListener(\"resize\", this.setDesktopMaxHeight);\n    // addEventListener(\"scroll\", this.setDesktopMaxHeight)\n\n    this.$nextTick(() => {\n      this.hasMounted = true;\n    });\n  },\n  beforeDestroy() {\n    removeEventListener(\"resize\", this.setDesktopMaxHeight);\n    // removeEventListener(\"scroll\", this.setDesktopMaxHeight)\n  },\n  watch: {\n    curRespondents: {\n      deep: true,\n      handler() {\n        const oldSet = new Set(this.oldCurRespondents);\n        const newSet = new Set(this.curRespondents);\n\n        // Get added respondents (in newSet but not in oldSet)\n        const addedRespondents = this.curRespondents.filter(id => !oldSet.has(id));\n\n        // Get removed respondents (in oldSet but not in newSet)\n        const removedRespondents = this.oldCurRespondents.filter(id => !newSet.has(id));\n\n        // Update curRespondentsAddedTime\n        for (const id of addedRespondents) {\n          this.$set(this.curRespondentsAddedTime, id, new Date().getTime());\n        }\n        for (const id of removedRespondents) {\n          this.$delete(this.curRespondentsAddedTime, id);\n        }\n        this.oldCurRespondents = [...this.curRespondents];\n      }\n    }\n  }\n};","map":{"version":3,"names":["_delete","getLocale","isPhone","UserAvatarContent","mapState","mapActions","EventOptions","OverflowGradient","name","components","props","eventId","type","String","required","event","Object","days","Array","times","curDate","Date","curRespondent","curRespondents","curTimeslot","curTimeslotAvailability","respondents","parsedResponses","isOwner","Boolean","maxHeight","Number","isGroup","attendees","default","showCalendarEvents","responsesFormatted","Map","timezone","showBestTimes","hideIfNeeded","startCalendarOnMonday","showEventOptions","guestAddedAvailability","addingAvailabilityAsGuest","data","deleteAvailabilityDialog","exportCsvDialog","visible","loading","types","text","value","userToDelete","desktopMaxHeight","respondentsListMinHeight","oldCurRespondents","curRespondentsAddedTime","hasMounted","computed","allowExportCsv","blindAvailabilityEnabled","length","curRespondentsSet","Set","isCurTimeslotSelected","dayIndex","timeIndex","numUsersAvailable","numUsers","key","numCurRespondentsAvailable","has","pendingUsers","respondentEmailsSet","map","r","email","toLowerCase","filter","a","declined","showIfNeededStar","user","respondentIfNeeded","_id","$vuetify","orderedRespondents","sort","b","firstName","localeCompare","respondentsListMaxHeight","Math","max","methods","clickRespondent","e","userId","stopImmediatePropagation","$emit","respondentClass","id","c","push","ifNeeded","getTime","respondentSelected","isGuest","showDeleteAvailabilityDialog","deleteAvailability","guest","showInfo","$posthog","capture","console","error","showError","getDateString","date","locale","daysOnly","toISOString","substring","toLocaleString","timeZone","exportCsv","csv","increment","numIterations","duration","responses","values","header","lastName","dates","i","row","response","availability","setMinutes","getMinutes","csvString","join","encodedUri","encodeURI","downloadLink","document","createElement","href","download","body","appendChild","click","removeChild","trackExportCsvClick","numRespondents","setDesktopMaxHeight","el","$refs","scrollableSection","top","getBoundingClientRect","window","innerHeight","copyEmailToClipboard","navigator","clipboard","writeText","err","mounted","addEventListener","$nextTick","beforeDestroy","removeEventListener","watch","deep","handler","oldSet","newSet","addedRespondents","removedRespondents","$set","$delete"],"sources":["src/components/schedule_overlap/RespondentsList.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"tw-flex tw-items-center tw-font-medium\">\n      <template v-if=\"!isOwner && event.blindAvailabilityEnabled\">\n        Your response\n      </template>\n      <template v-else>\n        <div class=\"tw-mr-1 tw-text-lg\">\n          {{ !isGroup ? \"参与者\" : \"成员\" }}\n        </div>\n        <div class=\"tw-font-normal\">\n          <template v-if=\"curRespondents.length === 0\">\n            {{\n              isCurTimeslotSelected\n                ? `(${numUsersAvailable}/${respondents.length})`\n                : `(${respondents.length})`\n            }}\n          </template>\n          <template v-else>\n            {{\n              isCurTimeslotSelected\n                ? `(${numCurRespondentsAvailable}/${curRespondents.length})`\n                : `(${curRespondents.length})`\n            }}\n          </template>\n        </div>\n        <template v-if=\"allowExportCsv\">\n          <v-spacer />\n          <v-menu right offset-x>\n            <template v-slot:activator=\"{ on, attrs }\">\n              <v-btn icon v-on=\"on\" v-bind=\"attrs\"\n                ><v-icon>mdi-dots-vertical</v-icon></v-btn\n              >\n            </template>\n            <v-list class=\"tw-py-1\" dense>\n              <v-dialog v-model=\"exportCsvDialog.visible\" width=\"400\">\n                <template v-slot:activator=\"{ on, attrs }\">\n                  <v-list-item\n                    id=\"export-csv-btn\"\n                    v-on=\"on\"\n                    v-bind=\"attrs\"\n                    @click=\"trackExportCsvClick\"\n                  >\n                    <v-list-item-title>导出 CSV</v-list-item-title>\n                  </v-list-item>\n                </template>\n                <v-card>\n                  <v-card-title>导出 CSV</v-card-title>\n                  <v-card-text>\n                    <div class=\"tw-mb-1\">Select CSV format:</div>\n                    <v-select\n                      v-model=\"exportCsvDialog.type\"\n                      solo\n                      hide-details\n                      :items=\"exportCsvDialog.types\"\n                      item-text=\"text\"\n                      item-value=\"value\"\n                    />\n                  </v-card-text>\n                  <v-card-actions>\n                    <v-spacer />\n                    <v-btn\n                      text\n                      @click=\"exportCsvDialog.visible = false\"\n                      :disabled=\"exportCsvDialog.loading\"\n                      >取消</v-btn\n                    >\n                    <v-btn\n                      text\n                      @click=\"exportCsv\"\n                      color=\"primary\"\n                      :loading=\"exportCsvDialog.loading\"\n                      >导出</v-btn\n                    >\n                  </v-card-actions>\n                </v-card>\n              </v-dialog>\n            </v-list>\n          </v-menu>\n        </template>\n      </template>\n      <template v-if=\"isPhone\">\n        <v-spacer />\n        <div\n          class=\"tw-mt-2 tw-text-sm tw-font-normal tw-text-dark-gray\"\n          :class=\"showIfNeededStar ? 'tw-visible' : 'tw-invisible'\"\n        >\n          * if needed\n        </div>\n      </template>\n    </div>\n    <div\n      v-if=\"isOwner && !isPhone && event.blindAvailabilityEnabled\"\n      class=\"tw-mb-2 tw-mt-1 tw-text-xs tw-italic tw-text-very-dark-gray\"\n    >\n      Responses are only visible to {{ isOwner ? \"you\" : \"event creator\" }}\n    </div>\n    <div\n      ref=\"scrollableSection\"\n      class=\"tw-flex tw-flex-col\"\n      :style=\"\n        maxHeight\n          ? `max-height: ${maxHeight}px !important;`\n          : !isPhone\n          ? `max-height: ${respondentsListMaxHeight}px !important;`\n          : ''\n      \"\n    >\n      <div\n        ref=\"respondentsScrollView\"\n        class=\"-tw-ml-2 tw-pl-2 tw-pt-2 tw-text-sm\"\n        :class=\"\n          isPhone && !maxHeight\n            ? 'tw-overflow-hidden'\n            : 'tw-overflow-y-auto tw-overflow-x-hidden'\n        \"\n      >\n        <div v-if=\"respondents.length === 0\" class=\"tw-mb-6\">\n          <span\n            class=\"tw-text-very-dark-gray\"\n            v-if=\"!isOwner && event.blindAvailabilityEnabled\"\n          >\n            No response yet!\n          </span>\n          <span class=\"tw-text-very-dark-gray\" v-else>No responses yet!</span>\n        </div>\n        <template v-else>\n          <transition-group\n            name=\"list\"\n            class=\"tw-grid tw-grid-cols-2 tw-gap-x-2 sm:tw-block\"\n          >\n            <div\n              v-for=\"(user, i) in orderedRespondents\"\n              :key=\"user._id\"\n              class=\"tw-group tw-relative tw-flex tw-cursor-pointer tw-items-center tw-py-1\"\n              @mouseover=\"(e) => $emit('mouseOverRespondent', e, user._id)\"\n              @mouseleave=\"$emit('mouseLeaveRespondent')\"\n              @click=\"(e) => clickRespondent(e, user._id)\"\n            >\n              <div class=\"tw-relative tw-flex tw-items-center\">\n                <div class=\"tw-ml-1 tw-mr-3\">\n                  <UserAvatarContent\n                    v-if=\"!isGuest(user)\"\n                    :user=\"user\"\n                    :size=\"16\"\n                  ></UserAvatarContent>\n                  <v-avatar v-else :size=\"16\">\n                    <v-icon small>mdi-account</v-icon>\n                  </v-avatar>\n                </div>\n\n                <v-simple-checkbox\n                  @click=\"(e) => $emit('clickRespondent', e, user._id)\"\n                  color=\"primary\"\n                  :value=\"respondentSelected(user._id)\"\n                  class=\"tw-absolute -tw-top-[2px] tw-left-0 tw-bg-white tw-opacity-0 group-hover:tw-opacity-100 group-[&:has(.email-hover-target:hover)]:!tw-opacity-0\"\n                  :class=\"\n                    respondentSelected(user._id)\n                      ? 'tw-opacity-100'\n                      : 'tw-opacity-0'\n                  \"\n                />\n              </div>\n              <div class=\"tw-flex tw-flex-col\">\n                <div\n                  class=\"tw-mr-1 tw-transition-all\"\n                  :class=\"respondentClass(user._id)\"\n                >\n                  {{\n                    user.firstName +\n                    \" \" +\n                    user.lastName +\n                    (respondentIfNeeded(user._id) ? \"*\" : \"\")\n                  }}\n                </div>\n                <div\n                  v-if=\"isOwner && event.collectEmails\"\n                  class=\"email-hover-target tw-flex tw-items-center tw-rounded-sm tw-p-px tw-text-xs tw-text-dark-gray tw-transition-all hover:tw-bg-light-gray\"\n                  :class=\"respondentClass(user._id)\"\n                  @mouseover.stop\n                  @click.stop=\"copyEmailToClipboard(user.email)\"\n                >\n                  {{ user.email }}\n                  <v-icon class=\"tw-ml-1 tw-text-xs\">mdi-content-copy</v-icon>\n                </div>\n              </div>\n              <div\n                class=\"tw-absolute tw-right-0 tw-opacity-0 tw-transition-none group-hover:tw-opacity-100 group-[&:has(.email-hover-target:hover)]:!tw-opacity-0\"\n              >\n                <v-btn\n                  v-if=\"isGuest(user)\"\n                  small\n                  icon\n                  class=\"tw-bg-white\"\n                  @click=\"$emit('editGuestAvailability', user._id)\"\n                  ><v-icon small color=\"#4F4F4F\">mdi-pencil</v-icon></v-btn\n                >\n                <v-btn\n                  v-if=\"isOwner && !isGroup\"\n                  small\n                  icon\n                  class=\"tw-bg-white\"\n                  @click=\"() => showDeleteAvailabilityDialog(user)\"\n                  ><v-icon small class=\"hover:tw-text-red\" color=\"#4F4F4F\"\n                    >mdi-delete</v-icon\n                  ></v-btn\n                >\n              </div>\n            </div>\n          </transition-group>\n          <div class=\"tw-h-2\"></div>\n        </template>\n      </div>\n      <div class=\"tw-relative\">\n        <OverflowGradient\n          v-if=\"hasMounted && !isPhone\"\n          class=\"tw-h-16\"\n          :scrollContainer=\"$refs.respondentsScrollView\"\n          :showArrow=\"false\"\n        />\n      </div>\n\n      <div\n        v-if=\"!isPhone && respondents.length > 0\"\n        class=\"tw-col-span-full tw-mb-2 tw-mt-1 tw-text-sm tw-text-dark-gray\"\n        :class=\"showIfNeededStar ? 'tw-visible' : 'tw-invisible'\"\n      >\n        * 如果需要的话\n      </div>\n      <div\n        v-if=\"!maxHeight && pendingUsers.length > 0\"\n        class=\"tw-mb-4 sm:tw-mb-6\"\n      >\n        <div class=\"tw-mb-2 tw-flex tw-items-center tw-font-medium\">\n          <div class=\"tw-mr-1 tw-text-lg\">Pending</div>\n          <div class=\"tw-font-normal\">({{ pendingUsers.length }})</div>\n        </div>\n        <div>\n          <div v-for=\"(user, i) in pendingUsers\" :key=\"user.email\">\n            <div class=\"tw-relative tw-flex tw-items-center\">\n              <v-icon class=\"tw-ml-1 tw-mr-3\" small>mdi-account</v-icon>\n              <div class=\"tw-mr-1 tw-text-sm tw-transition-all\">\n                {{ user.email }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <template v-if=\"!isPhone\">\n        <v-btn\n          v-if=\"\n            !isGroup &&\n            (authUser || guestAddedAvailability) &&\n            (!event.blindAvailabilityEnabled || isOwner)\n          \"\n          text\n          color=\"primary\"\n          class=\"-tw-ml-2 tw-mb-4 tw-w-min tw-px-2\"\n          @click=\"\n            () => {\n              if (authUser) {\n                $emit('addAvailabilityAsGuest')\n              } else {\n                $emit('addAvailability')\n              }\n            }\n          \"\n        >\n          {{\n            authUser ? \"添加可用时间（嘉宾）\" : \"添加可用时间\"\n          }}</v-btn\n        >\n        <v-switch\n          v-if=\"respondents.length > 1\"\n          class=\"tw-mb-4\"\n          inset\n          id=\"show-best-times-toggle\"\n          :input-value=\"showBestTimes\"\n          @change=\"(val) => $emit('update:showBestTimes', !!val)\"\n          hide-details\n        >\n          <template v-slot:label>\n            <div class=\"tw-text-sm tw-text-black\">\n              显示最佳{{ event.daysOnly ? '日期' : '时间' }}\n            </div>\n          </template>\n        </v-switch>\n        <EventOptions\n          :event=\"event\"\n          :showEventOptions=\"showEventOptions\"\n          @toggleShowEventOptions=\"$emit('toggleShowEventOptions')\"\n          :showBestTimes=\"showBestTimes\"\n          @update:showBestTimes=\"(val) => $emit('update:showBestTimes', val)\"\n          :hideIfNeeded=\"hideIfNeeded\"\n          @update:hideIfNeeded=\"(val) => $emit('update:hideIfNeeded', val)\"\n          :showCalendarEvents=\"showCalendarEvents\"\n          @update:showCalendarEvents=\"\n            (val) => $emit('update:showCalendarEvents', val)\n          \"\n          :startCalendarOnMonday=\"startCalendarOnMonday\"\n          @update:startCalendarOnMonday=\"\n            (val) => $emit('update:startCalendarOnMonday', val)\n          \"\n          :numResponses=\"respondents.length\"\n        />\n      </template>\n    </div>\n\n    <div\n      v-if=\"(!isOwner || isPhone) && event.blindAvailabilityEnabled\"\n      class=\"tw-mt-2 tw-text-xs tw-italic tw-text-very-dark-gray\"\n    >\n      Responses are only visible to {{ isOwner ? \"you\" : \"event creator\" }}\n    </div>\n\n    <v-dialog v-model=\"deleteAvailabilityDialog\" width=\"500\" persistent>\n      <v-card>\n        <v-card-title>Are you sure?</v-card-title>\n        <v-card-text class=\"tw-text-sm tw-text-dark-gray\"\n          >Are you sure you want to delete\n          <strong>{{ userToDelete?.firstName }}</strong\n          >'s availability from this\n          {{ isGroup ? \"group\" : \"event\" }}?</v-card-text\n        >\n        <v-card-actions>\n          <v-spacer />\n          <v-btn text @click=\"deleteAvailabilityDialog = false\">取消</v-btn>\n          <v-btn\n            text\n            color=\"error\"\n            @click=\"\n              () => {\n                deleteAvailability(userToDelete)\n                deleteAvailabilityDialog = false\n              }\n            \"\n            >Delete</v-btn\n          >\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <v-switch\n      v-if=\"isGroup && isPhone\"\n      :class=\"maxHeight && 'tw-mt-2'\"\n      class=\"tw-mb-4\"\n      inset\n      :input-value=\"showCalendarEvents\"\n      @change=\"(val) => $emit('update:showCalendarEvents', Boolean(val))\"\n      hide-details\n    >\n      <template v-slot:label>\n        <div class=\"tw-text-sm tw-text-black\">Overlay calendar events</div>\n      </template>\n    </v-switch>\n\n    <v-btn\n      v-if=\"\n        !maxHeight &&\n        isPhone &&\n        !isGroup &&\n        (authUser || guestAddedAvailability) &&\n        (!event.blindAvailabilityEnabled || isOwner)\n      \"\n      text\n      color=\"primary\"\n      class=\"-tw-ml-2 tw-mt-4 tw-w-min tw-px-2\"\n      @click=\"\n        () => {\n          if (authUser) {\n            $emit('addAvailabilityAsGuest')\n          } else {\n            $emit('addAvailability')\n          }\n        }\n      \"\n    >\n      {{ authUser ? \"添加可用时间\" : \"添加可用时间\" }}</v-btn\n    >\n  </div>\n</template>\n\n<style scoped>\n.list-move {\n  transition: transform 0.5s;\n}\n</style>\n\n<script>\nimport { _delete, getLocale, isPhone } from \"@/utils\"\nimport UserAvatarContent from \"../UserAvatarContent.vue\"\nimport { mapState, mapActions } from \"vuex\"\nimport EventOptions from \"./EventOptions.vue\"\nimport OverflowGradient from \"@/components/OverflowGradient.vue\"\n\nexport default {\n  name: \"RespondentsList\",\n\n  components: { UserAvatarContent, EventOptions, OverflowGradient },\n\n  props: {\n    eventId: { type: String, required: true },\n    event: { type: Object, required: true },\n    days: { type: Array, required: true },\n    times: { type: Array, required: true },\n    curDate: { type: Date, required: false }, // Date of the current timeslot\n    curRespondent: { type: String, required: true },\n    curRespondents: { type: Array, required: true },\n    curTimeslot: { type: Object, required: true },\n    curTimeslotAvailability: { type: Object, required: true },\n    respondents: { type: Array, required: true },\n    parsedResponses: { type: Object, required: true },\n    isOwner: { type: Boolean, required: true },\n    maxHeight: { type: Number },\n    isGroup: { type: Boolean, required: true },\n    attendees: { type: Array, default: () => [] },\n    showCalendarEvents: { type: Boolean, required: true },\n    responsesFormatted: { type: Map, required: true },\n    timezone: { type: Object, required: true },\n    showBestTimes: { type: Boolean, required: true },\n    hideIfNeeded: { type: Boolean, required: true },\n    startCalendarOnMonday: { type: Boolean, default: false },\n    showEventOptions: { type: Boolean, required: true },\n    guestAddedAvailability: { type: Boolean, required: true },\n    addingAvailabilityAsGuest: { type: Boolean, required: true },\n  },\n\n  data() {\n    return {\n      deleteAvailabilityDialog: false,\n      exportCsvDialog: {\n        visible: false,\n        loading: false,\n        type: \"datesToAvailable\",\n        types: [\n          {\n            text: \"Dates <> people available\",\n            value: \"datesToAvailable\",\n          },\n          { text: \"Name <> dates available\", value: \"nameToDates\" },\n        ],\n      },\n      userToDelete: null,\n      desktopMaxHeight: 0,\n      respondentsListMinHeight: 400,\n\n      oldCurRespondents: [],\n      curRespondentsAddedTime: {}, // Map of respondent id to time they were added\n\n      hasMounted: false,\n    }\n  },\n\n  computed: {\n    ...mapState([\"authUser\"]),\n    allowExportCsv() {\n      if (this.isGroup || this.isPhone) return false\n\n      return this.event.blindAvailabilityEnabled\n        ? this.isOwner && this.respondents.length > 0\n        : this.respondents.length > 0\n    },\n    curRespondentsSet() {\n      return new Set(this.curRespondents)\n    },\n    isCurTimeslotSelected() {\n      return (\n        this.curTimeslot.dayIndex !== -1 && this.curTimeslot.timeIndex !== -1\n      )\n    },\n    numUsersAvailable() {\n      this.curTimeslot\n      let numUsers = 0\n      for (const key in this.curTimeslotAvailability) {\n        if (this.curTimeslotAvailability[key]) numUsers++\n      }\n      return numUsers\n    },\n    numCurRespondentsAvailable() {\n      this.curTimeslot\n      let numUsers = 0\n      for (const key in this.curTimeslotAvailability) {\n        if (\n          this.curTimeslotAvailability[key] &&\n          this.curRespondentsSet.has(key)\n        )\n          numUsers++\n      }\n      return numUsers\n    },\n    pendingUsers() {\n      if (!this.isGroup) return []\n\n      const respondentEmailsSet = new Set(\n        this.respondents.map((r) => r.email.toLowerCase())\n      )\n\n      return this.attendees.filter((a) => {\n        if (!a.declined && !respondentEmailsSet.has(a.email.toLowerCase())) {\n          return true\n        }\n        return false\n      })\n    },\n    showIfNeededStar() {\n      if (this.hideIfNeeded) {\n        return false\n      }\n\n      for (const user of this.respondents) {\n        if (this.respondentIfNeeded(user._id)) {\n          return true\n        }\n      }\n      return false\n    },\n    isPhone() {\n      return isPhone(this.$vuetify)\n    },\n    orderedRespondents() {\n      const orderedRespondents = [...this.respondents]\n      orderedRespondents.sort((a, b) => {\n        // Sort by added time if both are in curRespondents\n        // Sort curRespondents before others\n        if (\n          this.curRespondentsSet.has(a._id) &&\n          this.curRespondentsSet.has(b._id)\n        ) {\n          return (\n            this.curRespondentsAddedTime[a._id] -\n            this.curRespondentsAddedTime[b._id]\n          )\n        } else if (\n          this.curRespondentsSet.has(a._id) &&\n          !this.curRespondentsSet.has(b._id)\n        ) {\n          return -1\n        } else if (\n          !this.curRespondentsSet.has(a._id) &&\n          this.curRespondentsSet.has(b._id)\n        ) {\n          return 1\n        }\n\n        // Otherwise, sort by first name\n        return (a.firstName || \"\").localeCompare(b.firstName || \"\")\n      })\n      return orderedRespondents\n    },\n    respondentsListMaxHeight() {\n      return Math.max(this.desktopMaxHeight, this.respondentsListMinHeight)\n    },\n  },\n\n  methods: {\n    ...mapActions([\"showError\", \"showInfo\"]),\n    /** Emit clickRespondent event */\n    clickRespondent(e, userId) {\n      e.stopImmediatePropagation()\n      this.$emit(\"clickRespondent\", e, userId)\n    },\n    /** Returns the class of the given respondent */\n    respondentClass(id) {\n      const c = []\n      if (/*this.curRespondent == id ||*/ this.curRespondentsSet.has(id)) {\n        // c.push(\"tw-font-bold\")\n      } else if (this.curRespondents.length > 0) {\n        c.push(\"tw-text-gray\")\n      }\n\n      if (\n        (this.curRespondentsSet.has(id) || this.curRespondents.length === 0) &&\n        this.respondentIfNeeded(id)\n      ) {\n        c.push(\"tw-bg-yellow\")\n      }\n\n      if (!this.curTimeslotAvailability[id]) {\n        c.push(\"tw-line-through\")\n        c.push(\"tw-text-gray\")\n      }\n      return c\n    },\n    /** Returns whether the respondent has \"ifNeeded\" availability for the current timeslot */\n    respondentIfNeeded(id) {\n      if (!this.curDate || this.hideIfNeeded) return false\n\n      return Boolean(\n        this.parsedResponses[id]?.ifNeeded?.has(this.curDate.getTime())\n      )\n    },\n    /** Returns whether the current respondent is selected (for subset avail) */\n    respondentSelected(id) {\n      return this.curRespondentsSet.has(id)\n    },\n    /** Returns whether the user is a guest */\n    isGuest(user) {\n      return user._id == user.firstName\n    },\n    /** Shows the delete availability dialog */\n    showDeleteAvailabilityDialog(user) {\n      this.deleteAvailabilityDialog = true\n      this.userToDelete = user\n    },\n    /** Deletes the user's availability on the server */\n    async deleteAvailability(user) {\n      try {\n        await _delete(`/events/${this.eventId}/response`, {\n          guest: this.isGuest(user),\n          userId: user._id,\n          name: user._id,\n        })\n        this.$emit(\"refreshEvent\")\n        this.showInfo(\"Availability successfully deleted!\")\n\n        this.$posthog?.capture(\"Deleted availability of another user\", {\n          eventId: this.eventId,\n          userId: user._id,\n        })\n      } catch (e) {\n        console.error(e)\n        this.showError(\n          \"There was an error deleting that person's availability!\"\n        )\n      }\n    },\n    getDateString(date) {\n      const locale = getLocale()\n\n      if (this.event.daysOnly) {\n        return date.toISOString().substring(0, 10)\n      }\n      return (\n        '\"' +\n        date.toLocaleString(locale, { timeZone: this.timezone.value }) +\n        '\"'\n      )\n    },\n    async exportCsv() {\n      const csv = []\n      const increment = 15\n      const numIterations = this.event.daysOnly\n        ? 1\n        : (this.event.duration * 60) / increment\n\n      // Get responses sorted by first name\n      const responses = Object.values(this.parsedResponses).sort((a, b) =>\n        a.user.firstName.localeCompare(b.user.firstName)\n      )\n\n      if (this.exportCsvDialog.type === \"datesToAvailable\") {\n        // Write CSV header\n        const header = [\"Date / Time\"]\n        header.push(\n          ...responses.map((r) => r.user.firstName + \" \" + r.user.lastName)\n        )\n        csv.push(header)\n\n        // Iterate through the dates\n        for (const date of this.event.dates) {\n          const curDate = new Date(date)\n\n          // Iterate through the timeslots for the current date\n          for (let i = 0; i < numIterations; ++i) {\n            const row = [this.getDateString(curDate)]\n\n            // Iterate through the responses and mark whether they are available or not\n            for (const response of responses) {\n              if (response.availability.has(curDate.getTime())) {\n                row.push(\"Available\")\n              } else if (response.ifNeeded.has(curDate.getTime())) {\n                row.push(\"If needed\")\n              } else {\n                row.push(\"\")\n              }\n            }\n\n            // Add row to CSV\n            csv.push(row)\n\n            // Increment curDate by the selected amount\n            curDate.setMinutes(curDate.getMinutes() + increment)\n          }\n        }\n      } else if (this.exportCsvDialog.type === \"nameToDates\") {\n        // Write CSV header\n        csv.push([\"Name\", \"Date / Times available\"])\n\n        // Iterate through the responses\n        for (const response of responses) {\n          // The first row is the name\n          const row = [`${response.user.firstName} ${response.user.lastName}`]\n\n          // Iterate through the dates\n          for (const date of this.event.dates) {\n            const curDate = new Date(date)\n\n            // Iterate through the timeslots for the current date\n            for (let i = 0; i < numIterations; ++i) {\n              // If the user is available for the current timeslot, add the date to the row\n              if (\n                response.availability.has(curDate.getTime()) ||\n                response.ifNeeded.has(curDate.getTime())\n              ) {\n                row.push(this.getDateString(curDate))\n              } else {\n                row.push(\"\")\n              }\n\n              // Increment curDate by the selected amount\n              curDate.setMinutes(curDate.getMinutes() + increment)\n            }\n          }\n          csv.push(row)\n        }\n      }\n\n      // Create CSV uri\n      // Source: https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side\n      const csvString =\n        \"data:text/csv;charset=utf-8,\" + csv.map((e) => e.join(\",\")).join(\"\\n\")\n      const encodedUri = encodeURI(csvString)\n\n      // Set CSV filename and download\n      // Source: https://stackoverflow.com/questions/7034754/how-to-set-a-file-name-using-window-open\n      const downloadLink = document.createElement(\"a\")\n      downloadLink.href = encodedUri\n      downloadLink.download = `${this.event.name}.csv`\n      document.body.appendChild(downloadLink)\n      downloadLink.click()\n      document.body.removeChild(downloadLink)\n    },\n    trackExportCsvClick() {\n      this.$posthog?.capture(\"export_csv_clicked\", {\n        eventId: this.eventId,\n        numRespondents: this.respondents.length,\n      })\n    },\n    setDesktopMaxHeight() {\n      const el = this.$refs.scrollableSection\n      if (el) {\n        const { top } = el.getBoundingClientRect()\n        this.desktopMaxHeight = window.innerHeight - top - 32\n      } else {\n        this.desktopMaxHeight = 0\n      }\n    },\n    /** Copies the given email to the clipboard */\n    async copyEmailToClipboard(email) {\n      try {\n        await navigator.clipboard.writeText(email)\n        this.showInfo(\"Email copied to clipboard!\")\n      } catch (err) {\n        console.error(\"Failed to copy email: \", err)\n        this.showError(\"Failed to copy email.\")\n      }\n    },\n  },\n\n  mounted() {\n    this.setDesktopMaxHeight()\n\n    addEventListener(\"resize\", this.setDesktopMaxHeight)\n    // addEventListener(\"scroll\", this.setDesktopMaxHeight)\n\n    this.$nextTick(() => {\n      this.hasMounted = true\n    })\n  },\n\n  beforeDestroy() {\n    removeEventListener(\"resize\", this.setDesktopMaxHeight)\n    // removeEventListener(\"scroll\", this.setDesktopMaxHeight)\n  },\n\n  watch: {\n    curRespondents: {\n      deep: true,\n      handler() {\n        const oldSet = new Set(this.oldCurRespondents)\n        const newSet = new Set(this.curRespondents)\n\n        // Get added respondents (in newSet but not in oldSet)\n        const addedRespondents = this.curRespondents.filter(\n          (id) => !oldSet.has(id)\n        )\n\n        // Get removed respondents (in oldSet but not in newSet)\n        const removedRespondents = this.oldCurRespondents.filter(\n          (id) => !newSet.has(id)\n        )\n\n        // Update curRespondentsAddedTime\n        for (const id of addedRespondents) {\n          this.$set(this.curRespondentsAddedTime, id, new Date().getTime())\n        }\n        for (const id of removedRespondents) {\n          this.$delete(this.curRespondentsAddedTime, id)\n        }\n\n        this.oldCurRespondents = [...this.curRespondents]\n      },\n    },\n  },\n}\n</script>\n"],"mappings":";AAqYA,SAAAA,OAAA,EAAAC,SAAA,EAAAC,OAAA;AACA,OAAAC,iBAAA;AACA,SAAAC,QAAA,EAAAC,UAAA;AACA,OAAAC,YAAA;AACA,OAAAC,gBAAA;AAEA;EACAC,IAAA;EAEAC,UAAA;IAAAN,iBAAA;IAAAG,YAAA;IAAAC;EAAA;EAEAG,KAAA;IACAC,OAAA;MAAAC,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;IACAC,KAAA;MAAAH,IAAA,EAAAI,MAAA;MAAAF,QAAA;IAAA;IACAG,IAAA;MAAAL,IAAA,EAAAM,KAAA;MAAAJ,QAAA;IAAA;IACAK,KAAA;MAAAP,IAAA,EAAAM,KAAA;MAAAJ,QAAA;IAAA;IACAM,OAAA;MAAAR,IAAA,EAAAS,IAAA;MAAAP,QAAA;IAAA;IAAA;IACAQ,aAAA;MAAAV,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;IACAS,cAAA;MAAAX,IAAA,EAAAM,KAAA;MAAAJ,QAAA;IAAA;IACAU,WAAA;MAAAZ,IAAA,EAAAI,MAAA;MAAAF,QAAA;IAAA;IACAW,uBAAA;MAAAb,IAAA,EAAAI,MAAA;MAAAF,QAAA;IAAA;IACAY,WAAA;MAAAd,IAAA,EAAAM,KAAA;MAAAJ,QAAA;IAAA;IACAa,eAAA;MAAAf,IAAA,EAAAI,MAAA;MAAAF,QAAA;IAAA;IACAc,OAAA;MAAAhB,IAAA,EAAAiB,OAAA;MAAAf,QAAA;IAAA;IACAgB,SAAA;MAAAlB,IAAA,EAAAmB;IAAA;IACAC,OAAA;MAAApB,IAAA,EAAAiB,OAAA;MAAAf,QAAA;IAAA;IACAmB,SAAA;MAAArB,IAAA,EAAAM,KAAA;MAAAgB,OAAA,EAAAA,CAAA;IAAA;IACAC,kBAAA;MAAAvB,IAAA,EAAAiB,OAAA;MAAAf,QAAA;IAAA;IACAsB,kBAAA;MAAAxB,IAAA,EAAAyB,GAAA;MAAAvB,QAAA;IAAA;IACAwB,QAAA;MAAA1B,IAAA,EAAAI,MAAA;MAAAF,QAAA;IAAA;IACAyB,aAAA;MAAA3B,IAAA,EAAAiB,OAAA;MAAAf,QAAA;IAAA;IACA0B,YAAA;MAAA5B,IAAA,EAAAiB,OAAA;MAAAf,QAAA;IAAA;IACA2B,qBAAA;MAAA7B,IAAA,EAAAiB,OAAA;MAAAK,OAAA;IAAA;IACAQ,gBAAA;MAAA9B,IAAA,EAAAiB,OAAA;MAAAf,QAAA;IAAA;IACA6B,sBAAA;MAAA/B,IAAA,EAAAiB,OAAA;MAAAf,QAAA;IAAA;IACA8B,yBAAA;MAAAhC,IAAA,EAAAiB,OAAA;MAAAf,QAAA;IAAA;EACA;EAEA+B,KAAA;IACA;MACAC,wBAAA;MACAC,eAAA;QACAC,OAAA;QACAC,OAAA;QACArC,IAAA;QACAsC,KAAA,GACA;UACAC,IAAA;UACAC,KAAA;QACA,GACA;UAAAD,IAAA;UAAAC,KAAA;QAAA;MAEA;MACAC,YAAA;MACAC,gBAAA;MACAC,wBAAA;MAEAC,iBAAA;MACAC,uBAAA;MAAA;;MAEAC,UAAA;IACA;EACA;EAEAC,QAAA;IACA,GAAAvD,QAAA;IACAwD,eAAA;MACA,SAAA5B,OAAA,SAAA9B,OAAA;MAEA,YAAAa,KAAA,CAAA8C,wBAAA,GACA,KAAAjC,OAAA,SAAAF,WAAA,CAAAoC,MAAA,OACA,KAAApC,WAAA,CAAAoC,MAAA;IACA;IACAC,kBAAA;MACA,WAAAC,GAAA,MAAAzC,cAAA;IACA;IACA0C,sBAAA;MACA,OACA,KAAAzC,WAAA,CAAA0C,QAAA,gBAAA1C,WAAA,CAAA2C,SAAA;IAEA;IACAC,kBAAA;MACA,KAAA5C,WAAA;MACA,IAAA6C,QAAA;MACA,WAAAC,GAAA,SAAA7C,uBAAA;QACA,SAAAA,uBAAA,CAAA6C,GAAA,GAAAD,QAAA;MACA;MACA,OAAAA,QAAA;IACA;IACAE,2BAAA;MACA,KAAA/C,WAAA;MACA,IAAA6C,QAAA;MACA,WAAAC,GAAA,SAAA7C,uBAAA;QACA,IACA,KAAAA,uBAAA,CAAA6C,GAAA,KACA,KAAAP,iBAAA,CAAAS,GAAA,CAAAF,GAAA,GAEAD,QAAA;MACA;MACA,OAAAA,QAAA;IACA;IACAI,aAAA;MACA,UAAAzC,OAAA;MAEA,MAAA0C,mBAAA,OAAAV,GAAA,CACA,KAAAtC,WAAA,CAAAiD,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,KAAA,CAAAC,WAAA,GACA;MAEA,YAAA7C,SAAA,CAAA8C,MAAA,CAAAC,CAAA;QACA,KAAAA,CAAA,CAAAC,QAAA,KAAAP,mBAAA,CAAAF,GAAA,CAAAQ,CAAA,CAAAH,KAAA,CAAAC,WAAA;UACA;QACA;QACA;MACA;IACA;IACAI,iBAAA;MACA,SAAA1C,YAAA;QACA;MACA;MAEA,WAAA2C,IAAA,SAAAzD,WAAA;QACA,SAAA0D,kBAAA,CAAAD,IAAA,CAAAE,GAAA;UACA;QACA;MACA;MACA;IACA;IACAnF,QAAA;MACA,OAAAA,OAAA,MAAAoF,QAAA;IACA;IACAC,mBAAA;MACA,MAAAA,kBAAA,YAAA7D,WAAA;MACA6D,kBAAA,CAAAC,IAAA,EAAAR,CAAA,EAAAS,CAAA;QACA;QACA;QACA,IACA,KAAA1B,iBAAA,CAAAS,GAAA,CAAAQ,CAAA,CAAAK,GAAA,KACA,KAAAtB,iBAAA,CAAAS,GAAA,CAAAiB,CAAA,CAAAJ,GAAA,GACA;UACA,OACA,KAAA5B,uBAAA,CAAAuB,CAAA,CAAAK,GAAA,IACA,KAAA5B,uBAAA,CAAAgC,CAAA,CAAAJ,GAAA;QAEA,WACA,KAAAtB,iBAAA,CAAAS,GAAA,CAAAQ,CAAA,CAAAK,GAAA,KACA,MAAAtB,iBAAA,CAAAS,GAAA,CAAAiB,CAAA,CAAAJ,GAAA,GACA;UACA;QACA,WACA,MAAAtB,iBAAA,CAAAS,GAAA,CAAAQ,CAAA,CAAAK,GAAA,KACA,KAAAtB,iBAAA,CAAAS,GAAA,CAAAiB,CAAA,CAAAJ,GAAA,GACA;UACA;QACA;;QAEA;QACA,QAAAL,CAAA,CAAAU,SAAA,QAAAC,aAAA,CAAAF,CAAA,CAAAC,SAAA;MACA;MACA,OAAAH,kBAAA;IACA;IACAK,yBAAA;MACA,OAAAC,IAAA,CAAAC,GAAA,MAAAxC,gBAAA,OAAAC,wBAAA;IACA;EACA;EAEAwC,OAAA;IACA,GAAA1F,UAAA;IACA;IACA2F,gBAAAC,CAAA,EAAAC,MAAA;MACAD,CAAA,CAAAE,wBAAA;MACA,KAAAC,KAAA,oBAAAH,CAAA,EAAAC,MAAA;IACA;IACA;IACAG,gBAAAC,EAAA;MACA,MAAAC,CAAA;MACA,yCAAAxC,iBAAA,CAAAS,GAAA,CAAA8B,EAAA;QACA;MAAA,CACA,eAAA/E,cAAA,CAAAuC,MAAA;QACAyC,CAAA,CAAAC,IAAA;MACA;MAEA,IACA,MAAAzC,iBAAA,CAAAS,GAAA,CAAA8B,EAAA,UAAA/E,cAAA,CAAAuC,MAAA,WACA,KAAAsB,kBAAA,CAAAkB,EAAA,GACA;QACAC,CAAA,CAAAC,IAAA;MACA;MAEA,UAAA/E,uBAAA,CAAA6E,EAAA;QACAC,CAAA,CAAAC,IAAA;QACAD,CAAA,CAAAC,IAAA;MACA;MACA,OAAAD,CAAA;IACA;IACA;IACAnB,mBAAAkB,EAAA;MACA,UAAAlF,OAAA,SAAAoB,YAAA;MAEA,OAAAX,OAAA,CACA,KAAAF,eAAA,CAAA2E,EAAA,GAAAG,QAAA,EAAAjC,GAAA,MAAApD,OAAA,CAAAsF,OAAA,GACA;IACA;IACA;IACAC,mBAAAL,EAAA;MACA,YAAAvC,iBAAA,CAAAS,GAAA,CAAA8B,EAAA;IACA;IACA;IACAM,QAAAzB,IAAA;MACA,OAAAA,IAAA,CAAAE,GAAA,IAAAF,IAAA,CAAAO,SAAA;IACA;IACA;IACAmB,6BAAA1B,IAAA;MACA,KAAArC,wBAAA;MACA,KAAAO,YAAA,GAAA8B,IAAA;IACA;IACA;IACA,MAAA2B,mBAAA3B,IAAA;MACA;QACA,MAAAnF,OAAA,iBAAAW,OAAA;UACAoG,KAAA,OAAAH,OAAA,CAAAzB,IAAA;UACAe,MAAA,EAAAf,IAAA,CAAAE,GAAA;UACA7E,IAAA,EAAA2E,IAAA,CAAAE;QACA;QACA,KAAAe,KAAA;QACA,KAAAY,QAAA;QAEA,KAAAC,QAAA,EAAAC,OAAA;UACAvG,OAAA,OAAAA,OAAA;UACAuF,MAAA,EAAAf,IAAA,CAAAE;QACA;MACA,SAAAY,CAAA;QACAkB,OAAA,CAAAC,KAAA,CAAAnB,CAAA;QACA,KAAAoB,SAAA,CACA,yDACA;MACA;IACA;IACAC,cAAAC,IAAA;MACA,MAAAC,MAAA,GAAAvH,SAAA;MAEA,SAAAc,KAAA,CAAA0G,QAAA;QACA,OAAAF,IAAA,CAAAG,WAAA,GAAAC,SAAA;MACA;MACA,OACA,MACAJ,IAAA,CAAAK,cAAA,CAAAJ,MAAA;QAAAK,QAAA,OAAAvF,QAAA,CAAAc;MAAA,KACA;IAEA;IACA,MAAA0E,UAAA;MACA,MAAAC,GAAA;MACA,MAAAC,SAAA;MACA,MAAAC,aAAA,QAAAlH,KAAA,CAAA0G,QAAA,GACA,IACA,KAAA1G,KAAA,CAAAmH,QAAA,QAAAF,SAAA;;MAEA;MACA,MAAAG,SAAA,GAAAnH,MAAA,CAAAoH,MAAA,MAAAzG,eAAA,EAAA6D,IAAA,EAAAR,CAAA,EAAAS,CAAA,KACAT,CAAA,CAAAG,IAAA,CAAAO,SAAA,CAAAC,aAAA,CAAAF,CAAA,CAAAN,IAAA,CAAAO,SAAA,CACA;MAEA,SAAA3C,eAAA,CAAAnC,IAAA;QACA;QACA,MAAAyH,MAAA;QACAA,MAAA,CAAA7B,IAAA,CACA,GAAA2B,SAAA,CAAAxD,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAO,IAAA,CAAAO,SAAA,SAAAd,CAAA,CAAAO,IAAA,CAAAmD,QAAA,CACA;QACAP,GAAA,CAAAvB,IAAA,CAAA6B,MAAA;;QAEA;QACA,WAAAd,IAAA,SAAAxG,KAAA,CAAAwH,KAAA;UACA,MAAAnH,OAAA,OAAAC,IAAA,CAAAkG,IAAA;;UAEA;UACA,SAAAiB,CAAA,MAAAA,CAAA,GAAAP,aAAA,IAAAO,CAAA;YACA,MAAAC,GAAA,SAAAnB,aAAA,CAAAlG,OAAA;;YAEA;YACA,WAAAsH,QAAA,IAAAP,SAAA;cACA,IAAAO,QAAA,CAAAC,YAAA,CAAAnE,GAAA,CAAApD,OAAA,CAAAsF,OAAA;gBACA+B,GAAA,CAAAjC,IAAA;cACA,WAAAkC,QAAA,CAAAjC,QAAA,CAAAjC,GAAA,CAAApD,OAAA,CAAAsF,OAAA;gBACA+B,GAAA,CAAAjC,IAAA;cACA;gBACAiC,GAAA,CAAAjC,IAAA;cACA;YACA;;YAEA;YACAuB,GAAA,CAAAvB,IAAA,CAAAiC,GAAA;;YAEA;YACArH,OAAA,CAAAwH,UAAA,CAAAxH,OAAA,CAAAyH,UAAA,KAAAb,SAAA;UACA;QACA;MACA,gBAAAjF,eAAA,CAAAnC,IAAA;QACA;QACAmH,GAAA,CAAAvB,IAAA;;QAEA;QACA,WAAAkC,QAAA,IAAAP,SAAA;UACA;UACA,MAAAM,GAAA,OAAAC,QAAA,CAAAvD,IAAA,CAAAO,SAAA,IAAAgD,QAAA,CAAAvD,IAAA,CAAAmD,QAAA;;UAEA;UACA,WAAAf,IAAA,SAAAxG,KAAA,CAAAwH,KAAA;YACA,MAAAnH,OAAA,OAAAC,IAAA,CAAAkG,IAAA;;YAEA;YACA,SAAAiB,CAAA,MAAAA,CAAA,GAAAP,aAAA,IAAAO,CAAA;cACA;cACA,IACAE,QAAA,CAAAC,YAAA,CAAAnE,GAAA,CAAApD,OAAA,CAAAsF,OAAA,OACAgC,QAAA,CAAAjC,QAAA,CAAAjC,GAAA,CAAApD,OAAA,CAAAsF,OAAA,KACA;gBACA+B,GAAA,CAAAjC,IAAA,MAAAc,aAAA,CAAAlG,OAAA;cACA;gBACAqH,GAAA,CAAAjC,IAAA;cACA;;cAEA;cACApF,OAAA,CAAAwH,UAAA,CAAAxH,OAAA,CAAAyH,UAAA,KAAAb,SAAA;YACA;UACA;UACAD,GAAA,CAAAvB,IAAA,CAAAiC,GAAA;QACA;MACA;;MAEA;MACA;MACA,MAAAK,SAAA,GACA,iCAAAf,GAAA,CAAApD,GAAA,CAAAsB,CAAA,IAAAA,CAAA,CAAA8C,IAAA,OAAAA,IAAA;MACA,MAAAC,UAAA,GAAAC,SAAA,CAAAH,SAAA;;MAEA;MACA;MACA,MAAAI,YAAA,GAAAC,QAAA,CAAAC,aAAA;MACAF,YAAA,CAAAG,IAAA,GAAAL,UAAA;MACAE,YAAA,CAAAI,QAAA,WAAAvI,KAAA,CAAAP,IAAA;MACA2I,QAAA,CAAAI,IAAA,CAAAC,WAAA,CAAAN,YAAA;MACAA,YAAA,CAAAO,KAAA;MACAN,QAAA,CAAAI,IAAA,CAAAG,WAAA,CAAAR,YAAA;IACA;IACAS,oBAAA;MACA,KAAA1C,QAAA,EAAAC,OAAA;QACAvG,OAAA,OAAAA,OAAA;QACAiJ,cAAA,OAAAlI,WAAA,CAAAoC;MACA;IACA;IACA+F,oBAAA;MACA,MAAAC,EAAA,QAAAC,KAAA,CAAAC,iBAAA;MACA,IAAAF,EAAA;QACA;UAAAG;QAAA,IAAAH,EAAA,CAAAI,qBAAA;QACA,KAAA5G,gBAAA,GAAA6G,MAAA,CAAAC,WAAA,GAAAH,GAAA;MACA;QACA,KAAA3G,gBAAA;MACA;IACA;IACA;IACA,MAAA+G,qBAAAxF,KAAA;MACA;QACA,MAAAyF,SAAA,CAAAC,SAAA,CAAAC,SAAA,CAAA3F,KAAA;QACA,KAAAmC,QAAA;MACA,SAAAyD,GAAA;QACAtD,OAAA,CAAAC,KAAA,2BAAAqD,GAAA;QACA,KAAApD,SAAA;MACA;IACA;EACA;EAEAqD,QAAA;IACA,KAAAb,mBAAA;IAEAc,gBAAA,gBAAAd,mBAAA;IACA;;IAEA,KAAAe,SAAA;MACA,KAAAlH,UAAA;IACA;EACA;EAEAmH,cAAA;IACAC,mBAAA,gBAAAjB,mBAAA;IACA;EACA;EAEAkB,KAAA;IACAxJ,cAAA;MACAyJ,IAAA;MACAC,QAAA;QACA,MAAAC,MAAA,OAAAlH,GAAA,MAAAR,iBAAA;QACA,MAAA2H,MAAA,OAAAnH,GAAA,MAAAzC,cAAA;;QAEA;QACA,MAAA6J,gBAAA,QAAA7J,cAAA,CAAAwD,MAAA,CACAuB,EAAA,KAAA4E,MAAA,CAAA1G,GAAA,CAAA8B,EAAA,CACA;;QAEA;QACA,MAAA+E,kBAAA,QAAA7H,iBAAA,CAAAuB,MAAA,CACAuB,EAAA,KAAA6E,MAAA,CAAA3G,GAAA,CAAA8B,EAAA,CACA;;QAEA;QACA,WAAAA,EAAA,IAAA8E,gBAAA;UACA,KAAAE,IAAA,MAAA7H,uBAAA,EAAA6C,EAAA,MAAAjF,IAAA,GAAAqF,OAAA;QACA;QACA,WAAAJ,EAAA,IAAA+E,kBAAA;UACA,KAAAE,OAAA,MAAA9H,uBAAA,EAAA6C,EAAA;QACA;QAEA,KAAA9C,iBAAA,YAAAjC,cAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}