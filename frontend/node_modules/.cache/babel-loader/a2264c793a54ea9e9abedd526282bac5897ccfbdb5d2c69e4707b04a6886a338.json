{"ast":null,"code":"export default {\n  name: \"DatePicker\",\n  methods: {\n    dayOnlyNumber(date) {\n      // date is in 'YYYY-MM-DD' format\n      return String(Number(date.split('-')[2]));\n    }\n  },\n  props: {\n    value: {\n      type: Array,\n      required: true\n    },\n    minCalendarDate: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      datePickerEl: null,\n      dragging: false,\n      dragState: \"add\",\n      dragStates: {\n        ADD: \"add\",\n        REMOVE: \"remove\"\n      },\n      pickerDate: \"\"\n    };\n  },\n  methods: {\n    /** Start drag */\n    mousedown(date) {\n      this.dragging = true;\n      this.setDragState(date);\n      this.addRemoveDate(date);\n    },\n    touchstart(date) {\n      this.dragging = true;\n      this.setDragState(date);\n      this.addRemoveDate(date);\n    },\n    /** Dragging */\n    mouseover(date) {\n      if (!this.dragging) return;\n      this.addRemoveDate(date);\n    },\n    touchmove(e) {\n      if (!this.dragging) return;\n      e.preventDefault();\n\n      // Get the target that we are touching\n      var target = document.elementFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n\n      // Only care about targets that are within the date picker and are buttons\n      if (target && this.datePickerEl.contains(target) && target.classList.contains(\"v-btn__content\")) {\n        // Get date num from target\n        const dateNum = parseInt(target.innerHTML);\n        if (dateNum != NaN) {\n          const dateNumString = `${dateNum}`;\n          const date = `${this.pickerDate}-${dateNumString.padStart(2, \"0\")}`;\n          this.addRemoveDate(date);\n        }\n      }\n    },\n    /** End drag */\n    mouseup(e) {\n      if (!this.dragging) return;\n\n      // Prevent month switching when tap and drag to left / right\n      e.preventDefault();\n      e.stopPropagation();\n      this.dragging = false;\n    },\n    /** Sets the drag state based on the date */\n    setDragState(date) {\n      const set = new Set(this.value);\n      if (set.has(date)) {\n        this.dragState = this.dragStates.REMOVE;\n      } else {\n        this.dragState = this.dragStates.ADD;\n      }\n    },\n    addRemoveDate(date) {\n      if (this.dragState === this.dragStates.ADD) {\n        this.addDate(date);\n      } else if (this.dragState === this.dragStates.REMOVE) {\n        this.removeDate(date);\n      }\n    },\n    addDate(date) {\n      const set = new Set(this.value);\n      set.add(date);\n      this.$emit(\"input\", [...set]);\n    },\n    removeDate(date) {\n      const set = new Set(this.value);\n      set.delete(date);\n      this.$emit(\"input\", [...set]);\n    }\n  },\n  mounted() {\n    this.datePickerEl = this.$refs.datePicker.$el;\n    this.datePickerEl.addEventListener(\"mouseup\", this.mouseup);\n    this.datePickerEl.addEventListener(\"touchmove\", this.touchmove);\n    this.datePickerEl.addEventListener(\"touchend\", this.mouseup, {\n      capture: true\n    });\n  },\n  beforeDestroy() {\n    this.datePickerEl.removeEventListener(\"mouseup\", this.mouseup);\n    this.datePickerEl.removeEventListener(\"touchmove\", this.touchmove);\n    this.datePickerEl.removeEventListener(\"touchend\", this.mouseup);\n  }\n};","map":{"version":3,"names":["name","methods","dayOnlyNumber","date","String","Number","split","props","value","type","Array","required","minCalendarDate","default","data","datePickerEl","dragging","dragState","dragStates","ADD","REMOVE","pickerDate","mousedown","setDragState","addRemoveDate","touchstart","mouseover","touchmove","e","preventDefault","target","document","elementFromPoint","changedTouches","clientX","clientY","contains","classList","dateNum","parseInt","innerHTML","NaN","dateNumString","padStart","mouseup","stopPropagation","set","Set","has","addDate","removeDate","add","$emit","delete","mounted","$refs","datePicker","$el","addEventListener","capture","beforeDestroy","removeEventListener"],"sources":["src/components/DatePicker.vue"],"sourcesContent":["<template>\n  <div>\n    <v-date-picker\n      ref=\"datePicker\"\n      :pickerDate.sync=\"pickerDate\"\n      :value=\"value\"\n      @touchstart:date=\"touchstart\"\n      @mousedown:date=\"mousedown\"\n      @mouseover:date=\"mouseover\"\n      readonly\n      no-title\n      multiple\n      color=\"primary\"\n      :show-current=\"false\"\n      class=\"tw-min-w-full tw-rounded-md tw-border-0 tw-drop-shadow sm:tw-min-w-0\"\n      :min=\"minCalendarDate\"\n      full-width\n      :scrollable=\"false\"\n      locale=\"zh-CN\"\n      :day-format=\"dayOnlyNumber\"\n    ></v-date-picker>\n    <!-- <div class=\"tw-mt-2 tw-text-xs tw-text-very-dark-gray\">\n      Drag to select multiple dates\n    </div> -->\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"DatePicker\",\n\n  methods: {\n    dayOnlyNumber(date) {\n      // date is in 'YYYY-MM-DD' format\n      return String(Number(date.split('-')[2]))\n    },\n  },\n\n  props: {\n    value: { type: Array, required: true },\n    minCalendarDate: { type: String, default: \"\" },\n  },\n\n  data() {\n    return {\n      datePickerEl: null,\n      dragging: false,\n      dragState: \"add\",\n      dragStates: { ADD: \"add\", REMOVE: \"remove\" },\n      pickerDate: \"\",\n    }\n  },\n\n  methods: {\n    /** Start drag */\n    mousedown(date) {\n      this.dragging = true\n      this.setDragState(date)\n      this.addRemoveDate(date)\n    },\n    touchstart(date) {\n      this.dragging = true\n      this.setDragState(date)\n      this.addRemoveDate(date)\n    },\n\n    /** Dragging */\n    mouseover(date) {\n      if (!this.dragging) return\n\n      this.addRemoveDate(date)\n    },\n    touchmove(e) {\n      if (!this.dragging) return\n\n      e.preventDefault()\n\n      // Get the target that we are touching\n      var target = document.elementFromPoint(\n        e.changedTouches[0].clientX,\n        e.changedTouches[0].clientY\n      )\n\n      // Only care about targets that are within the date picker and are buttons\n      if (\n        target &&\n        this.datePickerEl.contains(target) &&\n        target.classList.contains(\"v-btn__content\")\n      ) {\n        // Get date num from target\n        const dateNum = parseInt(target.innerHTML)\n        if (dateNum != NaN) {\n          const dateNumString = `${dateNum}`\n          const date = `${this.pickerDate}-${dateNumString.padStart(2, \"0\")}`\n          this.addRemoveDate(date)\n        }\n      }\n    },\n\n    /** End drag */\n    mouseup(e) {\n      if (!this.dragging) return\n\n      // Prevent month switching when tap and drag to left / right\n      e.preventDefault()\n      e.stopPropagation()\n\n      this.dragging = false\n    },\n\n    /** Sets the drag state based on the date */\n    setDragState(date) {\n      const set = new Set(this.value)\n      if (set.has(date)) {\n        this.dragState = this.dragStates.REMOVE\n      } else {\n        this.dragState = this.dragStates.ADD\n      }\n    },\n    addRemoveDate(date) {\n      if (this.dragState === this.dragStates.ADD) {\n        this.addDate(date)\n      } else if (this.dragState === this.dragStates.REMOVE) {\n        this.removeDate(date)\n      }\n    },\n    addDate(date) {\n      const set = new Set(this.value)\n      set.add(date)\n      this.$emit(\"input\", [...set])\n    },\n    removeDate(date) {\n      const set = new Set(this.value)\n      set.delete(date)\n      this.$emit(\"input\", [...set])\n    },\n  },\n\n  mounted() {\n    this.datePickerEl = this.$refs.datePicker.$el\n    this.datePickerEl.addEventListener(\"mouseup\", this.mouseup)\n    this.datePickerEl.addEventListener(\"touchmove\", this.touchmove)\n    this.datePickerEl.addEventListener(\"touchend\", this.mouseup, {\n      capture: true,\n    })\n  },\n\n  beforeDestroy() {\n    this.datePickerEl.removeEventListener(\"mouseup\", this.mouseup)\n    this.datePickerEl.removeEventListener(\"touchmove\", this.touchmove)\n    this.datePickerEl.removeEventListener(\"touchend\", this.mouseup)\n  },\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}